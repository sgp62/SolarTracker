
SolarTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005700  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005968  08005968  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005970  08005970  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dbc  20000074  080059ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e30  080059ec  00022e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acd0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341a  00000000  00000000  0003ad74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003e190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  0003f780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f6e  00000000  00000000  00040c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187f0  00000000  00000000  00044ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e13  00000000  00000000  0005d396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001341a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f90  00000000  00000000  001341fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005878 	.word	0x08005878

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005878 	.word	0x08005878

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b08c      	sub	sp, #48	; 0x30
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fb6e 	bl	8000bee <HAL_Init>
  /* USER CODE BEGIN Init */
//  BSP_LED_Init(LED3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f857 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f909 	bl	800072c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f8d7 	bl	80006cc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800051e:	f000 f897 	bl	8000650 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 7, 6);
 8000522:	2206      	movs	r2, #6
 8000524:	2107      	movs	r1, #7
 8000526:	2025      	movs	r0, #37	; 0x25
 8000528:	f000 fc52 	bl	8000dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 800052c:	2025      	movs	r0, #37	; 0x25
 800052e:	f000 fc6b 	bl	8000e08 <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <main+0xa4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <main+0xa4>)
 8000538:	f043 0320 	orr.w	r3, r3, #32
 800053c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SPI_sem */
  osSemaphoreDef(SPI_sem);
 800053e:	2300      	movs	r3, #0
 8000540:	62bb      	str	r3, [r7, #40]	; 0x28
 8000542:	2300      	movs	r3, #0
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_semHandle = osSemaphoreCreate(osSemaphore(SPI_sem), 1);
 8000546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054a:	2101      	movs	r1, #1
 800054c:	4618      	mov	r0, r3
 800054e:	f002 ff57 	bl	8003400 <osSemaphoreCreate>
 8000552:	4603      	mov	r3, r0
 8000554:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <main+0xa8>)
 8000556:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_sem */
  osSemaphoreDef(UART_sem);
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
 800055c:	2300      	movs	r3, #0
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
  UART_semHandle = osSemaphoreCreate(osSemaphore(UART_sem), 1);
 8000560:	f107 0320 	add.w	r3, r7, #32
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f002 ff4a 	bl	8003400 <osSemaphoreCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <main+0xac>)
 8000570:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 8000572:	2200      	movs	r2, #0
 8000574:	2164      	movs	r1, #100	; 0x64
 8000576:	2002      	movs	r0, #2
 8000578:	f003 f916 	bl	80037a8 <xQueueGenericCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <main+0xb0>)
 8000580:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, uartTaskFunc, osPriorityNormal, 0, 512);
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <main+0xb4>)
 8000584:	1d3c      	adds	r4, r7, #4
 8000586:	461d      	mov	r5, r3
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fee5 	bl	8003368 <osThreadCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <main+0xb8>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f002 fed9 	bl	800335a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0xa0>
 80005aa:	bf00      	nop
 80005ac:	40013800 	.word	0x40013800
 80005b0:	20000434 	.word	0x20000434
 80005b4:	20000438 	.word	0x20000438
 80005b8:	200004a0 	.word	0x200004a0
 80005bc:	0800589c 	.word	0x0800589c
 80005c0:	20000430 	.word	0x20000430

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	; 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 f886 	bl	80056e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ea:	f000 fdab 	bl	8001144 <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 f982 	bl	80008fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f8:	2310      	movs	r3, #16
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000604:	2360      	movs	r3, #96	; 0x60
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fded 	bl	80011f0 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800061c:	f000 f96e 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f001 f9ed 	bl	8001a18 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000644:	f000 f95a 	bl	80008fc <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3758      	adds	r7, #88	; 0x58
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_SPI1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_SPI1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_SPI1_Init+0x74>)
 800065c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_SPI1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_SPI1_Init+0x74>)
 800066a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800066e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_SPI1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_SPI1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_SPI1_Init+0x74>)
 800067e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000682:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_SPI1_Init+0x74>)
 8000686:	2228      	movs	r2, #40	; 0x28
 8000688:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_SPI1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_SPI1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_SPI1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SPI1_Init+0x74>)
 800069e:	2207      	movs	r2, #7
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_SPI1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_SPI1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_SPI1_Init+0x74>)
 80006b0:	f001 fef0 	bl	8002494 <HAL_SPI_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f91f 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000348 	.word	0x20000348
 80006c8:	40013000 	.word	0x40013000

080006cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <MX_USART1_UART_Init+0x5c>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART1_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART1_UART_Init+0x58>)
 8000710:	f002 f9e2 	bl	8002ad8 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 f8ef 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200003ac 	.word	0x200003ac
 8000728:	40013800 	.word	0x40013800

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_GPIO_Init+0x5c>)
 8000742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <MX_GPIO_Init+0x5c>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_GPIO_Init+0x5c>)
 800074e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000750:	f003 0301 	and.w	r3, r3, #1
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f000 fcca 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000764:	2310      	movs	r3, #16
 8000766:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f000 fb52 	bl	8000e24 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40021000 	.word	0x40021000

0800078c <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <USART1_IRQHandler+0xc4>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d002      	beq.n	80007a8 <USART1_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 80007a2:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <USART1_IRQHandler+0xc4>)
 80007a4:	2208      	movs	r2, #8
 80007a6:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <USART1_IRQHandler+0xc4>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <USART1_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <USART1_IRQHandler+0xc4>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <USART1_IRQHandler+0xc4>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <USART1_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <USART1_IRQHandler+0xc4>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <USART1_IRQHandler+0xc4>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d036      	beq.n	8000846 <USART1_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <USART1_IRQHandler+0xc4>)
 80007da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007dc:	b29b      	uxth	r3, r3
 80007de:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b0d      	cmp	r3, #13
 80007e4:	d002      	beq.n	80007ec <USART1_IRQHandler+0x60>
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b0a      	cmp	r3, #10
 80007ea:	d119      	bne.n	8000820 <USART1_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <USART1_IRQHandler+0xc8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d028      	beq.n	8000846 <USART1_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <USART1_IRQHandler+0xc8>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	1c5a      	adds	r2, r3, #1
 80007fa:	4916      	ldr	r1, [pc, #88]	; (8000854 <USART1_IRQHandler+0xc8>)
 80007fc:	600a      	str	r2, [r1, #0]
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <USART1_IRQHandler+0xcc>)
 8000800:	2100      	movs	r1, #0
 8000802:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <USART1_IRQHandler+0xd0>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	463a      	mov	r2, r7
 800080a:	2300      	movs	r3, #0
 800080c:	4912      	ldr	r1, [pc, #72]	; (8000858 <USART1_IRQHandler+0xcc>)
 800080e:	f003 f98d 	bl	8003b2c <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <USART1_IRQHandler+0xc8>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <USART1_IRQHandler+0xd4>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 800081e:	e012      	b.n	8000846 <USART1_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b24      	cmp	r3, #36	; 0x24
 8000824:	d003      	beq.n	800082e <USART1_IRQHandler+0xa2>
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <USART1_IRQHandler+0xc8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2bc8      	cmp	r3, #200	; 0xc8
 800082c:	d102      	bne.n	8000834 <USART1_IRQHandler+0xa8>
				rx_index = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <USART1_IRQHandler+0xc8>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <USART1_IRQHandler+0xc8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	4906      	ldr	r1, [pc, #24]	; (8000854 <USART1_IRQHandler+0xc8>)
 800083c:	600a      	str	r2, [r1, #0]
 800083e:	4906      	ldr	r1, [pc, #24]	; (8000858 <USART1_IRQHandler+0xcc>)
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8000844:	e7ff      	b.n	8000846 <USART1_IRQHandler+0xba>
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40013800 	.word	0x40013800
 8000854:	200004a4 	.word	0x200004a4
 8000858:	200004a8 	.word	0x200004a8
 800085c:	200004a0 	.word	0x200004a0
 8000860:	20000344 	.word	0x20000344

08000864 <uartTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_uartTaskFunc */
void uartTaskFunc(void const * argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	static uint8_t valid_count = 0;

  /* Infinite loop */
  for(;;)
  {
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <uartTaskFunc+0x60>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f003 fad7 	bl	8003e24 <uxQueueMessagesWaitingFromISR>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0f7      	beq.n	800086c <uartTaskFunc+0x8>
//		  if(valid_count == 0) {
//			  //osSemaphoreAcquire(UART_semHandle, osWaitForever); //Grab semaphore for new message
//			  xSemaphoreTake(UART_semHandle, portMAX_DELAY);
//		  }

	      xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <uartTaskFunc+0x60>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2201      	movs	r2, #1
 8000882:	4911      	ldr	r1, [pc, #68]	; (80008c8 <uartTaskFunc+0x64>)
 8000884:	4618      	mov	r0, r3
 8000886:	f003 f9ed 	bl	8003c64 <xQueueReceive>
	      valid_count++;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <uartTaskFunc+0x68>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <uartTaskFunc+0x68>)
 8000894:	701a      	strb	r2, [r3, #0]
	      if(SerialBufferReceived.Buffer[18] == 'A'){
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <uartTaskFunc+0x64>)
 8000898:	7c9b      	ldrb	r3, [r3, #18]
 800089a:	2b41      	cmp	r3, #65	; 0x41
 800089c:	d10d      	bne.n	80008ba <uartTaskFunc+0x56>
	    	  //Got a fix0000
	    	  if(valid_count >= 47){ //Length of NMEA message
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <uartTaskFunc+0x68>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b2e      	cmp	r3, #46	; 0x2e
 80008a4:	d909      	bls.n	80008ba <uartTaskFunc+0x56>
		    	  valid_count = 0;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <uartTaskFunc+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
		    	  //Post SPI write semaphore when received full valid message
		    	  //osSemaphoreRelease(SPI_semHandle);
		    	  xSemaphoreGive(SPI_semHandle);
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <uartTaskFunc+0x6c>)
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	2300      	movs	r3, #0
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	f003 f83b 	bl	8003930 <xQueueGenericSend>
	    	  }
	      }
	      got_nmea=0;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <uartTaskFunc+0x70>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 80008c0:	e7d4      	b.n	800086c <uartTaskFunc+0x8>
 80008c2:	bf00      	nop
 80008c4:	200004a0 	.word	0x200004a0
 80008c8:	2000043c 	.word	0x2000043c
 80008cc:	20000571 	.word	0x20000571
 80008d0:	20000434 	.word	0x20000434
 80008d4:	20000344 	.word	0x20000344

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 f999 	bl	8000c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012c00 	.word	0x40012c00

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_MspInit+0x4c>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_MspInit+0x4c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_MspInit+0x4c>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_MspInit+0x4c>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_MspInit+0x4c>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	210f      	movs	r1, #15
 8000942:	f06f 0001 	mvn.w	r0, #1
 8000946:	f000 fa43 	bl	8000dd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_SPI_MspInit+0x7c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d128      	bne.n	80009cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000984:	6613      	str	r3, [r2, #96]	; 0x60
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_SPI_MspInit+0x80>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80009aa:	23c2      	movs	r3, #194	; 0xc2
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009ba:	2305      	movs	r3, #5
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f000 fa2c 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40013000 	.word	0x40013000
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09e      	sub	sp, #120	; 0x78
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	2254      	movs	r2, #84	; 0x54
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fe71 	bl	80056e4 <memset>
  if(huart->Instance==USART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <HAL_UART_MspInit+0xa8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d137      	bne.n	8000a7c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fa53 	bl	8001ec4 <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff ff6a 	bl	80008fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_UART_MspInit+0xac>)
 8000a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2c:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <HAL_UART_MspInit+0xac>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6613      	str	r3, [r2, #96]	; 0x60
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_UART_MspInit+0xac>)
 8000a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_UART_MspInit+0xac>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <HAL_UART_MspInit+0xac>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_UART_MspInit+0xac>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a5c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 f9d4 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3778      	adds	r7, #120	; 0x78
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40013800 	.word	0x40013800
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	2019      	movs	r0, #25
 8000aa2:	f000 f995 	bl	8000dd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000aa6:	2019      	movs	r0, #25
 8000aa8:	f000 f9ae 	bl	8000e08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_InitTick+0x9c>)
 8000aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_InitTick+0x9c>)
 8000ab2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_InitTick+0x9c>)
 8000aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac4:	f107 0210 	add.w	r2, r7, #16
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f966 	bl	8001da0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ad4:	f001 f94e 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 8000ad8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <HAL_InitTick+0xa0>)
 8000ade:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_InitTick+0xa4>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <HAL_InitTick+0xa8>)
 8000aec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_InitTick+0xa4>)
 8000af0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_InitTick+0xa4>)
 8000af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_InitTick+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_InitTick+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <HAL_InitTick+0xa4>)
 8000b0a:	f001 fd66 	bl	80025da <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d104      	bne.n	8000b1e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <HAL_InitTick+0xa4>)
 8000b16:	f001 fdc1 	bl	800269c <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3730      	adds	r7, #48	; 0x30
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	20000574 	.word	0x20000574
 8000b34:	40012c00 	.word	0x40012c00

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b6a:	f001 fdeb 	bl	8002744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000574 	.word	0x20000574

08000b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff ffea 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopForever+0xe>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopForever+0x16>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f004 fd57 	bl	800567c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bce:	f7ff fc9b 	bl	8000508 <main>

08000bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd2:	e7fe      	b.n	8000bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000be0:	08005978 	.word	0x08005978
  ldr r2, =_sbss
 8000be4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000be8:	20002e30 	.word	0x20002e30

08000bec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC1_IRQHandler>

08000bee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f8de 	bl	8000dba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f7ff ff44 	bl	8000a8c <HAL_InitTick>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	71fb      	strb	r3, [r7, #7]
 8000c0e:	e001      	b.n	8000c14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c10:	f7ff fe7a 	bl	8000908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	200005c0 	.word	0x200005c0

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200005c0 	.word	0x200005c0

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff4c 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de2:	f7ff ff61 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000de6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	6978      	ldr	r0, [r7, #20]
 8000dee:	f7ff ffb1 	bl	8000d54 <NVIC_EncodePriority>
 8000df2:	4602      	mov	r2, r0
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff80 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff54 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	e148      	b.n	80010c6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 813a 	beq.w	80010c0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d005      	beq.n	8000e64 <HAL_GPIO_Init+0x40>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d130      	bne.n	8000ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	091b      	lsrs	r3, r3, #4
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d017      	beq.n	8000f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d123      	bne.n	8000f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	6939      	ldr	r1, [r7, #16]
 8000f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 8094 	beq.w	80010c0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9c:	4a51      	ldr	r2, [pc, #324]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa4:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <HAL_GPIO_Init+0x2c0>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb0:	4a4d      	ldr	r2, [pc, #308]	; (80010e8 <HAL_GPIO_Init+0x2c4>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1d4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a43      	ldr	r2, [pc, #268]	; (80010ec <HAL_GPIO_Init+0x2c8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1d0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <HAL_GPIO_Init+0x2cc>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1cc>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e004      	b.n	8000ffa <HAL_GPIO_Init+0x1d6>
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x1d6>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_GPIO_Init+0x1d6>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	4093      	lsls	r3, r2
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800100a:	4937      	ldr	r1, [pc, #220]	; (80010e8 <HAL_GPIO_Init+0x2c4>)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800103c:	4a2d      	ldr	r2, [pc, #180]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001042:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001066:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001090:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_GPIO_Init+0x2d0>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	3301      	adds	r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa22 f303 	lsr.w	r3, r2, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f47f aeaf 	bne.w	8000e34 <HAL_GPIO_Init+0x10>
  }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48000800 	.word	0x48000800
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_PWREx_GetVoltageRange+0x18>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40007000 	.word	0x40007000

08001144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001152:	d130      	bne.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800115c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001160:	d038      	beq.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001170:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2232      	movs	r2, #50	; 0x32
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0c9b      	lsrs	r3, r3, #18
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001188:	e002      	b.n	8001190 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3b01      	subs	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800119c:	d102      	bne.n	80011a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f2      	bne.n	800118a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b0:	d110      	bne.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e00f      	b.n	80011d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c2:	d007      	beq.n	80011d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40007000 	.word	0x40007000
 80011e8:	20000000 	.word	0x20000000
 80011ec:	431bde83 	.word	0x431bde83

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	f000 bc02 	b.w	8001a08 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001204:	4b96      	ldr	r3, [pc, #600]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800120e:	4b94      	ldr	r3, [pc, #592]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80e4 	beq.w	80013ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d007      	beq.n	800123c <HAL_RCC_OscConfig+0x4c>
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2b0c      	cmp	r3, #12
 8001230:	f040 808b 	bne.w	800134a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b01      	cmp	r3, #1
 8001238:	f040 8087 	bne.w	800134a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800123c:	4b88      	ldr	r3, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_OscConfig+0x64>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e3d9      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1a      	ldr	r2, [r3, #32]
 8001258:	4b81      	ldr	r3, [pc, #516]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <HAL_RCC_OscConfig+0x7e>
 8001264:	4b7e      	ldr	r3, [pc, #504]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800126c:	e005      	b.n	800127a <HAL_RCC_OscConfig+0x8a>
 800126e:	4b7c      	ldr	r3, [pc, #496]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800127a:	4293      	cmp	r3, r2
 800127c:	d223      	bcs.n	80012c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fdbe 	bl	8001e04 <RCC_SetFlashLatencyFromMSIRange>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e3ba      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001292:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a72      	ldr	r2, [pc, #456]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b70      	ldr	r3, [pc, #448]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	496d      	ldr	r1, [pc, #436]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b0:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	4968      	ldr	r1, [pc, #416]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
 80012c4:	e025      	b.n	8001312 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c6:	4b66      	ldr	r3, [pc, #408]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a65      	ldr	r2, [pc, #404]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b63      	ldr	r3, [pc, #396]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4960      	ldr	r1, [pc, #384]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e4:	4b5e      	ldr	r3, [pc, #376]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	495b      	ldr	r1, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fd7e 	bl	8001e04 <RCC_SetFlashLatencyFromMSIRange>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e37a      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001312:	f000 fc81 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001316:	4602      	mov	r2, r0
 8001318:	4b51      	ldr	r3, [pc, #324]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	4950      	ldr	r1, [pc, #320]	; (8001464 <HAL_RCC_OscConfig+0x274>)
 8001324:	5ccb      	ldrb	r3, [r1, r3]
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_RCC_OscConfig+0x278>)
 8001330:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001332:	4b4e      	ldr	r3, [pc, #312]	; (800146c <HAL_RCC_OscConfig+0x27c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fba8 	bl	8000a8c <HAL_InitTick>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d052      	beq.n	80013ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	e35e      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d032      	beq.n	80013b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001352:	4b43      	ldr	r3, [pc, #268]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a42      	ldr	r2, [pc, #264]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800135e:	f7ff fc73 	bl	8000c48 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001366:	f7ff fc6f 	bl	8000c48 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e347      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a35      	ldr	r2, [pc, #212]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4930      	ldr	r1, [pc, #192]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	492b      	ldr	r1, [pc, #172]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
 80013b6:	e01a      	b.n	80013ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013be:	f023 0301 	bic.w	r3, r3, #1
 80013c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc40 	bl	8000c48 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc3c 	bl	8000c48 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e314      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x1dc>
 80013ea:	e000      	b.n	80013ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d073      	beq.n	80014e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d005      	beq.n	800140c <HAL_RCC_OscConfig+0x21c>
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d10e      	bne.n	8001424 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d10b      	bne.n	8001424 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d063      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d15f      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e2f1      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142c:	d106      	bne.n	800143c <HAL_RCC_OscConfig+0x24c>
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e025      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001444:	d114      	bne.n	8001470 <HAL_RCC_OscConfig+0x280>
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a02      	ldr	r2, [pc, #8]	; (8001460 <HAL_RCC_OscConfig+0x270>)
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e013      	b.n	8001488 <HAL_RCC_OscConfig+0x298>
 8001460:	40021000 	.word	0x40021000
 8001464:	080058c0 	.word	0x080058c0
 8001468:	20000000 	.word	0x20000000
 800146c:	20000004 	.word	0x20000004
 8001470:	4ba0      	ldr	r3, [pc, #640]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a9f      	ldr	r2, [pc, #636]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b9d      	ldr	r3, [pc, #628]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a9c      	ldr	r2, [pc, #624]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d013      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fbda 	bl	8000c48 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fbd6 	bl	8000c48 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e2ae      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x2a8>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fbc6 	bl	8000c48 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fbc2 	bl	8000c48 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e29a      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x2d0>
 80014de:	e000      	b.n	80014e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d060      	beq.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_OscConfig+0x310>
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d119      	bne.n	800152e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d116      	bne.n	800152e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001500:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x328>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e277      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	4973      	ldr	r1, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800152c:	e040      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d023      	beq.n	800157e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6e      	ldr	r2, [pc, #440]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fb81 	bl	8000c48 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fb7d 	bl	8000c48 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e255      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800155c:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	495f      	ldr	r1, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
 800157c:	e018      	b.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157e:	4b5d      	ldr	r3, [pc, #372]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a5c      	ldr	r2, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fb5d 	bl	8000c48 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fb59 	bl	8000c48 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e231      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d03c      	beq.n	8001636 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01c      	beq.n	80015fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c4:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80015c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ca:	4a4a      	ldr	r2, [pc, #296]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb38 	bl	8000c48 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015dc:	f7ff fb34 	bl	8000c48 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e20c      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80015f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ef      	beq.n	80015dc <HAL_RCC_OscConfig+0x3ec>
 80015fc:	e01b      	b.n	8001636 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fe:	4b3d      	ldr	r3, [pc, #244]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001604:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fb1b 	bl	8000c48 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fb17 	bl	8000c48 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1ef      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800162a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ef      	bne.n	8001616 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 80a6 	beq.w	8001790 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10d      	bne.n	8001670 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165e:	6593      	str	r3, [r2, #88]	; 0x58
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166c:	2301      	movs	r3, #1
 800166e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <HAL_RCC_OscConfig+0x508>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d118      	bne.n	80016ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_RCC_OscConfig+0x508>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <HAL_RCC_OscConfig+0x508>)
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001688:	f7ff fade 	bl	8000c48 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001690:	f7ff fada 	bl	8000c48 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1b2      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_RCC_OscConfig+0x508>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4d8>
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c6:	e029      	b.n	800171c <HAL_RCC_OscConfig+0x52c>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d115      	bne.n	80016fc <HAL_RCC_OscConfig+0x50c>
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e6:	4a03      	ldr	r2, [pc, #12]	; (80016f4 <HAL_RCC_OscConfig+0x504>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f0:	e014      	b.n	800171c <HAL_RCC_OscConfig+0x52c>
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40007000 	.word	0x40007000
 80016fc:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001702:	4a99      	ldr	r2, [pc, #612]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800170c:	4b96      	ldr	r3, [pc, #600]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	4a95      	ldr	r2, [pc, #596]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d016      	beq.n	8001752 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fa90 	bl	8000c48 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fa8c 	bl	8000c48 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e162      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ed      	beq.n	800172c <HAL_RCC_OscConfig+0x53c>
 8001750:	e015      	b.n	800177e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fa79 	bl	8000c48 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff fa75 	bl	8000c48 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e14b      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001770:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ed      	bne.n	800175a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177e:	7ffb      	ldrb	r3, [r7, #31]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001784:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	4a77      	ldr	r2, [pc, #476]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 800178a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b00      	cmp	r3, #0
 800179a:	d03c      	beq.n	8001816 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d01c      	beq.n	80017de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a4:	4b70      	ldr	r3, [pc, #448]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80017a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017aa:	4a6f      	ldr	r2, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa48 	bl	8000c48 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017bc:	f7ff fa44 	bl	8000c48 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e11c      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ce:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80017d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ef      	beq.n	80017bc <HAL_RCC_OscConfig+0x5cc>
 80017dc:	e01b      	b.n	8001816 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017de:	4b62      	ldr	r3, [pc, #392]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80017e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e4:	4a60      	ldr	r2, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ee:	f7ff fa2b 	bl	8000c48 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f6:	f7ff fa27 	bl	8000c48 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0ff      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001808:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 800180a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ef      	bne.n	80017f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 80f3 	beq.w	8001a06 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	2b02      	cmp	r3, #2
 8001826:	f040 80c9 	bne.w	80019bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800182a:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0203 	and.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	429a      	cmp	r2, r3
 800183c:	d12c      	bne.n	8001898 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	3b01      	subs	r3, #1
 800184a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d123      	bne.n	8001898 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d11b      	bne.n	8001898 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d113      	bne.n	8001898 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	3b01      	subs	r3, #1
 800187e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d109      	bne.n	8001898 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	085b      	lsrs	r3, r3, #1
 8001890:	3b01      	subs	r3, #1
 8001892:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d06b      	beq.n	8001970 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d062      	beq.n	8001964 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0ac      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ae:	4b2e      	ldr	r3, [pc, #184]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a2d      	ldr	r2, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80018b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ba:	f7ff f9c5 	bl	8000c48 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff f9c1 	bl	8000c48 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e099      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_RCC_OscConfig+0x77c>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018f0:	3a01      	subs	r2, #1
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018fa:	0212      	lsls	r2, r2, #8
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001902:	0852      	lsrs	r2, r2, #1
 8001904:	3a01      	subs	r2, #1
 8001906:	0552      	lsls	r2, r2, #21
 8001908:	4311      	orrs	r1, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800190e:	0852      	lsrs	r2, r2, #1
 8001910:	3a01      	subs	r2, #1
 8001912:	0652      	lsls	r2, r2, #25
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800191a:	06d2      	lsls	r2, r2, #27
 800191c:	430a      	orrs	r2, r1
 800191e:	4912      	ldr	r1, [pc, #72]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001920:	4313      	orrs	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 800192a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800192e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800193c:	f7ff f984 	bl	8000c48 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff f980 	bl	8000c48 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e058      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_RCC_OscConfig+0x778>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001962:	e050      	b.n	8001a06 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e04f      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
 8001968:	40021000 	.word	0x40021000
 800196c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d144      	bne.n	8001a06 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001994:	f7ff f958 	bl	8000c48 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f954 	bl	8000c48 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e02c      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x7ac>
 80019ba:	e024      	b.n	8001a06 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d01f      	beq.n	8001a02 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 80019c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f93b 	bl	8000c48 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f937 	bl	8000c48 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e00f      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4905      	ldr	r1, [pc, #20]	; (8001a10 <HAL_RCC_OscConfig+0x820>)
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_RCC_OscConfig+0x824>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e001      	b.n	8001a06 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	feeefffc 	.word	0xfeeefffc

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0e7      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	4970      	ldr	r1, [pc, #448]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b6e      	ldr	r3, [pc, #440]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0cf      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d908      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4960      	ldr	r1, [pc, #384]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d04c      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d121      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0a6      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e09a      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d109      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e08e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e086      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f023 0203 	bic.w	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	4943      	ldr	r1, [pc, #268]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b00:	f7ff f8a2 	bl	8000c48 <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b08:	f7ff f89e 	bl	8000c48 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e06e      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 020c 	and.w	r2, r3, #12
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1eb      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d010      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d208      	bcs.n	8001b5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	492b      	ldr	r1, [pc, #172]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d210      	bcs.n	8001b8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 0207 	bic.w	r2, r3, #7
 8001b74:	4923      	ldr	r1, [pc, #140]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e036      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4918      	ldr	r1, [pc, #96]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4910      	ldr	r1, [pc, #64]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bcc:	f000 f824 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	490b      	ldr	r1, [pc, #44]	; (8001c0c <HAL_RCC_ClockConfig+0x1f4>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1fc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe ff4b 	bl	8000a8c <HAL_InitTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	080058c0 	.word	0x080058c0
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c26:	4b3e      	ldr	r3, [pc, #248]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c30:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x34>
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d121      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d11e      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c4c:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c58:	4b31      	ldr	r3, [pc, #196]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e005      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c74:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10d      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	e004      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c9c:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001c9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d134      	bne.n	8001d10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d003      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001cbc:	e005      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc0:	617b      	str	r3, [r7, #20]
      break;
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc6:	617b      	str	r3, [r7, #20]
      break;
 8001cc8:	e002      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	617b      	str	r3, [r7, #20]
      break;
 8001cce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	3301      	adds	r3, #1
 8001cdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0e5b      	lsrs	r3, r3, #25
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	3301      	adds	r3, #1
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d10:	69bb      	ldr	r3, [r7, #24]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	080058d8 	.word	0x080058d8
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d4c:	f7ff fff0 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4904      	ldr	r1, [pc, #16]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	080058d0 	.word	0x080058d0

08001d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d78:	f7ff ffda 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	0adb      	lsrs	r3, r3, #11
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4904      	ldr	r1, [pc, #16]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	080058d0 	.word	0x080058d0

08001da0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	220f      	movs	r2, #15
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_RCC_GetClockConfig+0x60>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0207 	and.w	r2, r3, #7
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40022000 	.word	0x40022000

08001e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e1c:	f7ff f984 	bl	8001128 <HAL_PWREx_GetVoltageRange>
 8001e20:	6178      	str	r0, [r7, #20]
 8001e22:	e014      	b.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	4a24      	ldr	r2, [pc, #144]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e3c:	f7ff f974 	bl	8001128 <HAL_PWREx_GetVoltageRange>
 8001e40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e54:	d10b      	bne.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b80      	cmp	r3, #128	; 0x80
 8001e5a:	d919      	bls.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e60:	d902      	bls.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e62:	2302      	movs	r3, #2
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	e013      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e68:	2301      	movs	r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e010      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d902      	bls.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e74:	2303      	movs	r3, #3
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e00a      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d102      	bne.n	8001e86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e80:	2302      	movs	r3, #2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e004      	b.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b70      	cmp	r3, #112	; 0x70
 8001e8a:	d101      	bne.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 0207 	bic.w	r2, r3, #7
 8001e98:	4909      	ldr	r1, [pc, #36]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d001      	beq.n	8001eb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40022000 	.word	0x40022000

08001ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ecc:	2300      	movs	r3, #0
 8001ece:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d031      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ee8:	d01a      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001eea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001eee:	d814      	bhi.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ef8:	d10f      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001efa:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	4a5c      	ldr	r2, [pc, #368]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f06:	e00c      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 f9ce 	bl	80022b0 <RCCEx_PLLSAI1_Config>
 8001f14:	4603      	mov	r3, r0
 8001f16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f18:	e003      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f1e:	e000      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f22:	7cfb      	ldrb	r3, [r7, #19]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10b      	bne.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f28:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	494e      	ldr	r1, [pc, #312]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f3e:	e001      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 809e 	beq.w	800208e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f70:	4a3f      	ldr	r2, [pc, #252]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f76:	6593      	str	r3, [r2, #88]	; 0x58
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f88:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a39      	ldr	r2, [pc, #228]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fe58 	bl	8000c48 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f9a:	e009      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9c:	f7fe fe54 	bl	8000c48 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d902      	bls.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	74fb      	strb	r3, [r7, #19]
        break;
 8001fae:	e005      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb0:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0ef      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d15a      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fcc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01e      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d019      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800200a:	4a19      	ldr	r2, [pc, #100]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d016      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fe14 	bl	8000c48 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002022:	e00b      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe fe10 	bl	8000c48 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d902      	bls.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	74fb      	strb	r3, [r7, #19]
            break;
 800203a:	e006      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0ec      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10b      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205e:	4904      	ldr	r1, [pc, #16]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002066:	e009      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	74bb      	strb	r3, [r7, #18]
 800206c:	e006      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207c:	7c7b      	ldrb	r3, [r7, #17]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002082:	4b8a      	ldr	r3, [pc, #552]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4a89      	ldr	r2, [pc, #548]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800209a:	4b84      	ldr	r3, [pc, #528]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a0:	f023 0203 	bic.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4980      	ldr	r1, [pc, #512]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020bc:	4b7b      	ldr	r3, [pc, #492]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	f023 020c 	bic.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	4978      	ldr	r1, [pc, #480]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020de:	4b73      	ldr	r3, [pc, #460]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	496f      	ldr	r1, [pc, #444]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	4967      	ldr	r1, [pc, #412]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002122:	4b62      	ldr	r3, [pc, #392]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002130:	495e      	ldr	r1, [pc, #376]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	4956      	ldr	r1, [pc, #344]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002166:	4b51      	ldr	r3, [pc, #324]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	494d      	ldr	r1, [pc, #308]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d028      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002188:	4b48      	ldr	r3, [pc, #288]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4945      	ldr	r1, [pc, #276]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021a6:	d106      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a8:	4b40      	ldr	r3, [pc, #256]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a3f      	ldr	r2, [pc, #252]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b2:	60d3      	str	r3, [r2, #12]
 80021b4:	e011      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021be:	d10c      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	2101      	movs	r1, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f872 	bl	80022b0 <RCCEx_PLLSAI1_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d028      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021e6:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	492d      	ldr	r1, [pc, #180]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002204:	d106      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002210:	60d3      	str	r3, [r2, #12]
 8002212:	e011      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800221c:	d10c      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	2101      	movs	r1, #1
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f843 	bl	80022b0 <RCCEx_PLLSAI1_Config>
 800222a:	4603      	mov	r3, r0
 800222c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800222e:	7cfb      	ldrb	r3, [r7, #19]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01c      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002252:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002262:	d10c      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	2102      	movs	r1, #2
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f820 	bl	80022b0 <RCCEx_PLLSAI1_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	4904      	ldr	r1, [pc, #16]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000

080022b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022be:	4b74      	ldr	r3, [pc, #464]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d018      	beq.n	80022fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022ca:	4b71      	ldr	r3, [pc, #452]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0203 	and.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d10d      	bne.n	80022f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
       ||
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022e2:	4b6b      	ldr	r3, [pc, #428]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
       ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d047      	beq.n	8002386 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e044      	b.n	8002386 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d018      	beq.n	8002336 <RCCEx_PLLSAI1_Config+0x86>
 8002304:	2b03      	cmp	r3, #3
 8002306:	d825      	bhi.n	8002354 <RCCEx_PLLSAI1_Config+0xa4>
 8002308:	2b01      	cmp	r3, #1
 800230a:	d002      	beq.n	8002312 <RCCEx_PLLSAI1_Config+0x62>
 800230c:	2b02      	cmp	r3, #2
 800230e:	d009      	beq.n	8002324 <RCCEx_PLLSAI1_Config+0x74>
 8002310:	e020      	b.n	8002354 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d11d      	bne.n	800235a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002322:	e01a      	b.n	800235a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002324:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d116      	bne.n	800235e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002334:	e013      	b.n	800235e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002336:	4b56      	ldr	r3, [pc, #344]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10f      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002342:	4b53      	ldr	r3, [pc, #332]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002352:	e006      	b.n	8002362 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	73fb      	strb	r3, [r7, #15]
      break;
 8002358:	e004      	b.n	8002364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800235a:	bf00      	nop
 800235c:	e002      	b.n	8002364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800235e:	bf00      	nop
 8002360:	e000      	b.n	8002364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002362:	bf00      	nop
    }

    if(status == HAL_OK)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800236a:	4b49      	ldr	r3, [pc, #292]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	430b      	orrs	r3, r1
 8002380:	4943      	ldr	r1, [pc, #268]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d17c      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800238c:	4b40      	ldr	r3, [pc, #256]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3f      	ldr	r2, [pc, #252]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002398:	f7fe fc56 	bl	8000c48 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800239e:	e009      	b.n	80023b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023a0:	f7fe fc52 	bl	8000c48 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d902      	bls.n	80023b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	73fb      	strb	r3, [r7, #15]
        break;
 80023b2:	e005      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ef      	bne.n	80023a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15f      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d110      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80023d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6892      	ldr	r2, [r2, #8]
 80023dc:	0211      	lsls	r1, r2, #8
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68d2      	ldr	r2, [r2, #12]
 80023e2:	06d2      	lsls	r2, r2, #27
 80023e4:	430a      	orrs	r2, r1
 80023e6:	492a      	ldr	r1, [pc, #168]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	610b      	str	r3, [r1, #16]
 80023ec:	e027      	b.n	800243e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d112      	bne.n	800241a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6892      	ldr	r2, [r2, #8]
 8002404:	0211      	lsls	r1, r2, #8
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6912      	ldr	r2, [r2, #16]
 800240a:	0852      	lsrs	r2, r2, #1
 800240c:	3a01      	subs	r2, #1
 800240e:	0552      	lsls	r2, r2, #21
 8002410:	430a      	orrs	r2, r1
 8002412:	491f      	ldr	r1, [pc, #124]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	610b      	str	r3, [r1, #16]
 8002418:	e011      	b.n	800243e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002422:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	0211      	lsls	r1, r2, #8
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6952      	ldr	r2, [r2, #20]
 8002430:	0852      	lsrs	r2, r2, #1
 8002432:	3a01      	subs	r2, #1
 8002434:	0652      	lsls	r2, r2, #25
 8002436:	430a      	orrs	r2, r1
 8002438:	4915      	ldr	r1, [pc, #84]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243a:	4313      	orrs	r3, r2
 800243c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a13      	ldr	r2, [pc, #76]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002448:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244a:	f7fe fbfd 	bl	8000c48 <HAL_GetTick>
 800244e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002450:	e009      	b.n	8002466 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002452:	f7fe fbf9 	bl	8000c48 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	73fb      	strb	r3, [r7, #15]
          break;
 8002464:	e005      	b.n	8002472 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ef      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	4903      	ldr	r1, [pc, #12]	; (8002490 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40021000 	.word	0x40021000

08002494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e095      	b.n	80025d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b6:	d009      	beq.n	80024cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
 80024be:	e005      	b.n	80024cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe fa36 	bl	8000958 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002502:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800250c:	d902      	bls.n	8002514 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e002      	b.n	800251a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002518:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002522:	d007      	beq.n	8002534 <HAL_SPI_Init+0xa0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800252c:	d002      	beq.n	8002534 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	ea42 0103 	orr.w	r1, r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	f003 0204 	and.w	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80025b0:	ea42 0103 	orr.w	r1, r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e049      	b.n	8002680 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f841 	bl	8002688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	4619      	mov	r1, r3
 8002618:	4610      	mov	r0, r2
 800261a:	f000 f9db 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d001      	beq.n	80026b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e03b      	b.n	800272c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_TIM_Base_Start_IT+0x9c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_TIM_Base_Start_IT+0x4e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d004      	beq.n	80026ea <HAL_TIM_Base_Start_IT+0x4e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a15      	ldr	r2, [pc, #84]	; (800273c <HAL_TIM_Base_Start_IT+0xa0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d115      	bne.n	8002716 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_TIM_Base_Start_IT+0xa4>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b06      	cmp	r3, #6
 80026fa:	d015      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x8c>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002702:	d011      	beq.n	8002728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002714:	e008      	b.n	8002728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e000      	b.n	800272a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40014000 	.word	0x40014000
 8002740:	00010007 	.word	0x00010007

08002744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0202 	mvn.w	r2, #2
 8002770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f905 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8f7 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f908 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d122      	bne.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0204 	mvn.w	r2, #4
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8db 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8cd 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8de 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b08      	cmp	r3, #8
 800280e:	d11b      	bne.n	8002848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0208 	mvn.w	r2, #8
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2204      	movs	r2, #4
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8b1 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8a3 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f8b4 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	d122      	bne.n	800289c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b10      	cmp	r3, #16
 8002862:	d11b      	bne.n	800289c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0210 	mvn.w	r2, #16
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2208      	movs	r2, #8
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f887 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f879 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f88a 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0201 	mvn.w	r2, #1
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe f808 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b80      	cmp	r3, #128	; 0x80
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f8de 	bl	8002ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002902:	d10e      	bne.n	8002922 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b80      	cmp	r3, #128	; 0x80
 8002910:	d107      	bne.n	8002922 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800291a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f8d1 	bl	8002ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d10e      	bne.n	800294e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d107      	bne.n	800294e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f838 	bl	80029be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b20      	cmp	r3, #32
 800295a:	d10e      	bne.n	800297a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d107      	bne.n	800297a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0220 	mvn.w	r2, #32
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f891 	bl	8002a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <TIM_Base_SetConfig+0xbc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0x20>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d108      	bne.n	8002a06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <TIM_Base_SetConfig+0xbc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00b      	beq.n	8002a26 <TIM_Base_SetConfig+0x52>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d007      	beq.n	8002a26 <TIM_Base_SetConfig+0x52>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <TIM_Base_SetConfig+0xc0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d003      	beq.n	8002a26 <TIM_Base_SetConfig+0x52>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <TIM_Base_SetConfig+0xc4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <TIM_Base_SetConfig+0xbc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <TIM_Base_SetConfig+0xa0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <TIM_Base_SetConfig+0xc0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0xa0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <TIM_Base_SetConfig+0xc4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400

08002a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e040      	b.n	8002b6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fd ff6e 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0201 	bic.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f82c 	bl	8002b74 <UART_SetConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e022      	b.n	8002b6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa4c 	bl	8002fcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fad3 	bl	8003110 <UART_CheckIdleState>
 8002b6a:	4603      	mov	r3, r0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b78:	b08a      	sub	sp, #40	; 0x28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4bb4      	ldr	r3, [pc, #720]	; (8002e74 <UART_SetConfig+0x300>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4aa9      	ldr	r2, [pc, #676]	; (8002e78 <UART_SetConfig+0x304>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4aa0      	ldr	r2, [pc, #640]	; (8002e7c <UART_SetConfig+0x308>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d126      	bne.n	8002c4c <UART_SetConfig+0xd8>
 8002bfe:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <UART_SetConfig+0x30c>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d81b      	bhi.n	8002c44 <UART_SetConfig+0xd0>
 8002c0c:	a201      	add	r2, pc, #4	; (adr r2, 8002c14 <UART_SetConfig+0xa0>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c35 	.word	0x08002c35
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c3d 	.word	0x08002c3d
 8002c24:	2301      	movs	r3, #1
 8002c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c2a:	e080      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c32:	e07c      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002c34:	2304      	movs	r3, #4
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c3a:	e078      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c42:	e074      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002c44:	2310      	movs	r3, #16
 8002c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c4a:	e070      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a8c      	ldr	r2, [pc, #560]	; (8002e84 <UART_SetConfig+0x310>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d138      	bne.n	8002cc8 <UART_SetConfig+0x154>
 8002c56:	4b8a      	ldr	r3, [pc, #552]	; (8002e80 <UART_SetConfig+0x30c>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f003 030c 	and.w	r3, r3, #12
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d82d      	bhi.n	8002cc0 <UART_SetConfig+0x14c>
 8002c64:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <UART_SetConfig+0xf8>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002ca1 	.word	0x08002ca1
 8002c70:	08002cc1 	.word	0x08002cc1
 8002c74:	08002cc1 	.word	0x08002cc1
 8002c78:	08002cc1 	.word	0x08002cc1
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08002cc1 	.word	0x08002cc1
 8002c84:	08002cc1 	.word	0x08002cc1
 8002c88:	08002cc1 	.word	0x08002cc1
 8002c8c:	08002ca9 	.word	0x08002ca9
 8002c90:	08002cc1 	.word	0x08002cc1
 8002c94:	08002cc1 	.word	0x08002cc1
 8002c98:	08002cc1 	.word	0x08002cc1
 8002c9c:	08002cb9 	.word	0x08002cb9
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ca6:	e042      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cae:	e03e      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb6:	e03a      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002cb8:	2308      	movs	r3, #8
 8002cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cbe:	e036      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc6:	e032      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a6a      	ldr	r2, [pc, #424]	; (8002e78 <UART_SetConfig+0x304>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12a      	bne.n	8002d28 <UART_SetConfig+0x1b4>
 8002cd2:	4b6b      	ldr	r3, [pc, #428]	; (8002e80 <UART_SetConfig+0x30c>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ce0:	d01a      	beq.n	8002d18 <UART_SetConfig+0x1a4>
 8002ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ce6:	d81b      	bhi.n	8002d20 <UART_SetConfig+0x1ac>
 8002ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cec:	d00c      	beq.n	8002d08 <UART_SetConfig+0x194>
 8002cee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf2:	d815      	bhi.n	8002d20 <UART_SetConfig+0x1ac>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <UART_SetConfig+0x18c>
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cfc:	d008      	beq.n	8002d10 <UART_SetConfig+0x19c>
 8002cfe:	e00f      	b.n	8002d20 <UART_SetConfig+0x1ac>
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d06:	e012      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0e:	e00e      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002d10:	2304      	movs	r3, #4
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d16:	e00a      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1e:	e006      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002d20:	2310      	movs	r3, #16
 8002d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d26:	e002      	b.n	8002d2e <UART_SetConfig+0x1ba>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a51      	ldr	r2, [pc, #324]	; (8002e78 <UART_SetConfig+0x304>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d17a      	bne.n	8002e2e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d824      	bhi.n	8002d8a <UART_SetConfig+0x216>
 8002d40:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <UART_SetConfig+0x1d4>)
 8002d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d46:	bf00      	nop
 8002d48:	08002d6d 	.word	0x08002d6d
 8002d4c:	08002d8b 	.word	0x08002d8b
 8002d50:	08002d75 	.word	0x08002d75
 8002d54:	08002d8b 	.word	0x08002d8b
 8002d58:	08002d7b 	.word	0x08002d7b
 8002d5c:	08002d8b 	.word	0x08002d8b
 8002d60:	08002d8b 	.word	0x08002d8b
 8002d64:	08002d8b 	.word	0x08002d8b
 8002d68:	08002d83 	.word	0x08002d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d6c:	f7fe ffec 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8002d70:	61f8      	str	r0, [r7, #28]
        break;
 8002d72:	e010      	b.n	8002d96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d74:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <UART_SetConfig+0x314>)
 8002d76:	61fb      	str	r3, [r7, #28]
        break;
 8002d78:	e00d      	b.n	8002d96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7a:	f7fe ff4d 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8002d7e:	61f8      	str	r0, [r7, #28]
        break;
 8002d80:	e009      	b.n	8002d96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d86:	61fb      	str	r3, [r7, #28]
        break;
 8002d88:	e005      	b.n	8002d96 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8107 	beq.w	8002fac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d305      	bcc.n	8002dba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d903      	bls.n	8002dc2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002dc0:	e0f4      	b.n	8002fac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	461c      	mov	r4, r3
 8002dc8:	4615      	mov	r5, r2
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	022b      	lsls	r3, r5, #8
 8002dd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002dd8:	0222      	lsls	r2, r4, #8
 8002dda:	68f9      	ldr	r1, [r7, #12]
 8002ddc:	6849      	ldr	r1, [r1, #4]
 8002dde:	0849      	lsrs	r1, r1, #1
 8002de0:	2000      	movs	r0, #0
 8002de2:	4688      	mov	r8, r1
 8002de4:	4681      	mov	r9, r0
 8002de6:	eb12 0a08 	adds.w	sl, r2, r8
 8002dea:	eb43 0b09 	adc.w	fp, r3, r9
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dfc:	4650      	mov	r0, sl
 8002dfe:	4659      	mov	r1, fp
 8002e00:	f7fd f9e6 	bl	80001d0 <__aeabi_uldivmod>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4613      	mov	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e12:	d308      	bcc.n	8002e26 <UART_SetConfig+0x2b2>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1a:	d204      	bcs.n	8002e26 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	e0c2      	b.n	8002fac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e2c:	e0be      	b.n	8002fac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e36:	d16a      	bne.n	8002f0e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d834      	bhi.n	8002eaa <UART_SetConfig+0x336>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0x2d4>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002e8d 	.word	0x08002e8d
 8002e50:	08002e95 	.word	0x08002e95
 8002e54:	08002eab 	.word	0x08002eab
 8002e58:	08002e9b 	.word	0x08002e9b
 8002e5c:	08002eab 	.word	0x08002eab
 8002e60:	08002eab 	.word	0x08002eab
 8002e64:	08002eab 	.word	0x08002eab
 8002e68:	08002ea3 	.word	0x08002ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7fe ff6c 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8002e70:	61f8      	str	r0, [r7, #28]
        break;
 8002e72:	e020      	b.n	8002eb6 <UART_SetConfig+0x342>
 8002e74:	efff69f3 	.word	0xefff69f3
 8002e78:	40008000 	.word	0x40008000
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40004400 	.word	0x40004400
 8002e88:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e8c:	f7fe ff72 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 8002e90:	61f8      	str	r0, [r7, #28]
        break;
 8002e92:	e010      	b.n	8002eb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e94:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <UART_SetConfig+0x454>)
 8002e96:	61fb      	str	r3, [r7, #28]
        break;
 8002e98:	e00d      	b.n	8002eb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9a:	f7fe febd 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8002e9e:	61f8      	str	r0, [r7, #28]
        break;
 8002ea0:	e009      	b.n	8002eb6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea6:	61fb      	str	r3, [r7, #28]
        break;
 8002ea8:	e005      	b.n	8002eb6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d077      	beq.n	8002fac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005a      	lsls	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	441a      	add	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b0f      	cmp	r3, #15
 8002ed6:	d916      	bls.n	8002f06 <UART_SetConfig+0x392>
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ede:	d212      	bcs.n	8002f06 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f023 030f 	bic.w	r3, r3, #15
 8002ee8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	8afb      	ldrh	r3, [r7, #22]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	8afa      	ldrh	r2, [r7, #22]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	e052      	b.n	8002fac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f0c:	e04e      	b.n	8002fac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d827      	bhi.n	8002f66 <UART_SetConfig+0x3f2>
 8002f16:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <UART_SetConfig+0x3a8>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f41 	.word	0x08002f41
 8002f20:	08002f49 	.word	0x08002f49
 8002f24:	08002f51 	.word	0x08002f51
 8002f28:	08002f67 	.word	0x08002f67
 8002f2c:	08002f57 	.word	0x08002f57
 8002f30:	08002f67 	.word	0x08002f67
 8002f34:	08002f67 	.word	0x08002f67
 8002f38:	08002f67 	.word	0x08002f67
 8002f3c:	08002f5f 	.word	0x08002f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f40:	f7fe ff02 	bl	8001d48 <HAL_RCC_GetPCLK1Freq>
 8002f44:	61f8      	str	r0, [r7, #28]
        break;
 8002f46:	e014      	b.n	8002f72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f48:	f7fe ff14 	bl	8001d74 <HAL_RCC_GetPCLK2Freq>
 8002f4c:	61f8      	str	r0, [r7, #28]
        break;
 8002f4e:	e010      	b.n	8002f72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <UART_SetConfig+0x454>)
 8002f52:	61fb      	str	r3, [r7, #28]
        break;
 8002f54:	e00d      	b.n	8002f72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f56:	f7fe fe5f 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8002f5a:	61f8      	str	r0, [r7, #28]
        break;
 8002f5c:	e009      	b.n	8002f72 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f62:	61fb      	str	r3, [r7, #28]
        break;
 8002f64:	e005      	b.n	8002f72 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f70:	bf00      	nop
    }

    if (pclk != 0U)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d019      	beq.n	8002fac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	085a      	lsrs	r2, r3, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	441a      	add	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	d909      	bls.n	8002fa6 <UART_SetConfig+0x432>
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d205      	bcs.n	8002fa6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60da      	str	r2, [r3, #12]
 8002fa4:	e002      	b.n	8002fac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3728      	adds	r7, #40	; 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fc6:	bf00      	nop
 8002fc8:	00f42400 	.word	0x00f42400

08002fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01a      	beq.n	80030e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ca:	d10a      	bne.n	80030e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
  }
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003120:	f7fd fd92 	bl	8000c48 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d10e      	bne.n	8003152 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003134:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f82d 	bl	80031a2 <UART_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e023      	b.n	800319a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b04      	cmp	r3, #4
 800315e:	d10e      	bne.n	800317e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f817 	bl	80031a2 <UART_WaitOnFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e00d      	b.n	800319a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2220      	movs	r2, #32
 8003182:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b09c      	sub	sp, #112	; 0x70
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b2:	e0a5      	b.n	8003300 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	f000 80a1 	beq.w	8003300 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7fd fd43 	bl	8000c48 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80031ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d13e      	bne.n	8003252 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031e8:	667b      	str	r3, [r7, #100]	; 0x64
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e6      	bne.n	80031d4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3308      	adds	r3, #8
 800320c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	f023 0301 	bic.w	r3, r3, #1
 800321c:	663b      	str	r3, [r7, #96]	; 0x60
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3308      	adds	r3, #8
 8003224:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003226:	64ba      	str	r2, [r7, #72]	; 0x48
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800322c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e5      	bne.n	8003206 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e067      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d04f      	beq.n	8003300 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d147      	bne.n	8003300 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003278:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	e853 3f00 	ldrex	r3, [r3]
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800328e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
 800329a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800329e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a0:	e841 2300 	strex	r3, r2, [r1]
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e6      	bne.n	800327a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3308      	adds	r3, #8
 80032b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	613b      	str	r3, [r7, #16]
   return(result);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3308      	adds	r3, #8
 80032ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032cc:	623a      	str	r2, [r7, #32]
 80032ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	69f9      	ldr	r1, [r7, #28]
 80032d2:	6a3a      	ldr	r2, [r7, #32]
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e010      	b.n	8003322 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4013      	ands	r3, r2
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	429a      	cmp	r2, r3
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	429a      	cmp	r2, r3
 800331c:	f43f af4a 	beq.w	80031b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3770      	adds	r7, #112	; 0x70
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800333c:	2b84      	cmp	r3, #132	; 0x84
 800333e:	d005      	beq.n	800334c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003340:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	3303      	adds	r3, #3
 800334a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800334c:	68fb      	ldr	r3, [r7, #12]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800335e:	f001 f839 	bl	80043d4 <vTaskStartScheduler>
  
  return osOK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}

08003368 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af04      	add	r7, sp, #16
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <osThreadCreate+0x54>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01c      	beq.n	80033bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685c      	ldr	r4, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681d      	ldr	r5, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691e      	ldr	r6, [r3, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ffc8 	bl	800332a <makeFreeRtosPriority>
 800339a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033a4:	9202      	str	r2, [sp, #8]
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	9100      	str	r1, [sp, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	4632      	mov	r2, r6
 80033ae:	4629      	mov	r1, r5
 80033b0:	4620      	mov	r0, r4
 80033b2:	f000 fe65 	bl	8004080 <xTaskCreateStatic>
 80033b6:	4603      	mov	r3, r0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e01c      	b.n	80033f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685c      	ldr	r4, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80033c8:	b29e      	uxth	r6, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffaa 	bl	800332a <makeFreeRtosPriority>
 80033d6:	4602      	mov	r2, r0
 80033d8:	f107 030c 	add.w	r3, r7, #12
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	9200      	str	r2, [sp, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4632      	mov	r2, r6
 80033e4:	4629      	mov	r1, r5
 80033e6:	4620      	mov	r0, r4
 80033e8:	f000 fea7 	bl	800413a <xTaskCreate>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d001      	beq.n	80033f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e000      	b.n	80033f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003400 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af02      	add	r7, sp, #8
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10a      	bne.n	800342e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2203      	movs	r2, #3
 800341e:	9200      	str	r2, [sp, #0]
 8003420:	2200      	movs	r2, #0
 8003422:	2100      	movs	r1, #0
 8003424:	2001      	movs	r0, #1
 8003426:	f000 f947 	bl	80036b8 <xQueueGenericCreateStatic>
 800342a:	4603      	mov	r3, r0
 800342c:	e023      	b.n	8003476 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800342e:	6838      	ldr	r0, [r7, #0]
 8003430:	6839      	ldr	r1, [r7, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	f000 fa0f 	bl	800385a <xQueueCreateCountingSemaphoreStatic>
 800343c:	4603      	mov	r3, r0
 800343e:	e01a      	b.n	8003476 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d110      	bne.n	8003468 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8003446:	2203      	movs	r2, #3
 8003448:	2100      	movs	r1, #0
 800344a:	2001      	movs	r0, #1
 800344c:	f000 f9ac 	bl	80037a8 <xQueueGenericCreate>
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <osSemaphoreCreate+0x64>
 8003458:	2300      	movs	r3, #0
 800345a:	2200      	movs	r2, #0
 800345c:	2100      	movs	r1, #0
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fa66 	bl	8003930 <xQueueGenericSend>
      return sema;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	e006      	b.n	8003476 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa2a 	bl	80038c8 <xQueueCreateCountingSemaphore>
 8003474:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f103 0208 	add.w	r2, r3, #8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f04f 32ff 	mov.w	r2, #4294967295
 8003496:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f103 0208 	add.w	r2, r3, #8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f103 0208 	add.w	r2, r3, #8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	601a      	str	r2, [r3, #0]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d103      	bne.n	8003540 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e00c      	b.n	800355a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3308      	adds	r3, #8
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e002      	b.n	800354e <vListInsert+0x2e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	429a      	cmp	r2, r3
 8003558:	d2f6      	bcs.n	8003548 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6892      	ldr	r2, [r2, #8]
 80035a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6852      	ldr	r2, [r2, #4]
 80035b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d103      	bne.n	80035c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	1e5a      	subs	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003612:	f001 fd27 	bl	8005064 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	68f9      	ldr	r1, [r7, #12]
 8003620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	441a      	add	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	3b01      	subs	r3, #1
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	441a      	add	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	22ff      	movs	r2, #255	; 0xff
 8003656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	22ff      	movs	r2, #255	; 0xff
 800365e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d114      	bne.n	8003692 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01a      	beq.n	80036a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3310      	adds	r3, #16
 8003674:	4618      	mov	r0, r3
 8003676:	f001 f8ff 	bl	8004878 <xTaskRemoveFromEventList>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <xQueueGenericReset+0xcc>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	e009      	b.n	80036a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3310      	adds	r3, #16
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fef1 	bl	800347e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff feec 	bl	800347e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036a6:	f001 fd0d 	bl	80050c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	e000ed04 	.word	0xe000ed04

080036b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	; 0x38
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036de:	bf00      	nop
 80036e0:	e7fe      	b.n	80036e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <xQueueGenericCreateStatic+0x52>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <xQueueGenericCreateStatic+0x56>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <xQueueGenericCreateStatic+0x58>
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	623b      	str	r3, [r7, #32]
}
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <xQueueGenericCreateStatic+0x7e>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <xQueueGenericCreateStatic+0x82>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <xQueueGenericCreateStatic+0x84>
 800373a:	2300      	movs	r3, #0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61fb      	str	r3, [r7, #28]
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003756:	2348      	movs	r3, #72	; 0x48
 8003758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b48      	cmp	r3, #72	; 0x48
 800375e:	d00a      	beq.n	8003776 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	61bb      	str	r3, [r7, #24]
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003776:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800377c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800378a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	4613      	mov	r3, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f83f 	bl	800381c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3730      	adds	r7, #48	; 0x30
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	613b      	str	r3, [r7, #16]
}
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	3348      	adds	r3, #72	; 0x48
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 fd61 	bl	80052a8 <pvPortMalloc>
 80037e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d011      	beq.n	8003812 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	3348      	adds	r3, #72	; 0x48
 80037f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003800:	79fa      	ldrb	r2, [r7, #7]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f805 	bl	800381c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003812:	69bb      	ldr	r3, [r7, #24]
	}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e002      	b.n	800383e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800384a:	2101      	movs	r1, #1
 800384c:	69b8      	ldr	r0, [r7, #24]
 800384e:	f7ff fecb 	bl	80035e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800385a:	b580      	push	{r7, lr}
 800385c:	b08a      	sub	sp, #40	; 0x28
 800385e:	af02      	add	r7, sp, #8
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	61bb      	str	r3, [r7, #24]
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	429a      	cmp	r2, r3
 8003888:	d90a      	bls.n	80038a0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	617b      	str	r3, [r7, #20]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038a0:	2302      	movs	r3, #2
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7ff ff04 	bl	80036b8 <xQueueGenericCreateStatic>
 80038b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80038be:	69fb      	ldr	r3, [r7, #28]
	}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	613b      	str	r3, [r7, #16]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d90a      	bls.n	800390c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	60fb      	str	r3, [r7, #12]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800390c:	2202      	movs	r2, #2
 800390e:	2100      	movs	r1, #0
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff49 	bl	80037a8 <xQueueGenericCreate>
 8003916:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003924:	697b      	ldr	r3, [r7, #20]
	}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	; 0x38
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800393e:	2300      	movs	r3, #0
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10a      	bne.n	8003962 <xQueueGenericSend+0x32>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800395e:	bf00      	nop
 8003960:	e7fe      	b.n	8003960 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <xQueueGenericSend+0x40>
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <xQueueGenericSend+0x44>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <xQueueGenericSend+0x46>
 8003974:	2300      	movs	r3, #0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <xQueueGenericSend+0x60>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d103      	bne.n	800399e <xQueueGenericSend+0x6e>
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <xQueueGenericSend+0x72>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <xQueueGenericSend+0x74>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xQueueGenericSend+0x8e>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	623b      	str	r3, [r7, #32]
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039be:	f001 f91b 	bl	8004bf8 <xTaskGetSchedulerState>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <xQueueGenericSend+0x9e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <xQueueGenericSend+0xa2>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <xQueueGenericSend+0xa4>
 80039d2:	2300      	movs	r3, #0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xQueueGenericSend+0xbe>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	61fb      	str	r3, [r7, #28]
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ee:	f001 fb39 	bl	8005064 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <xQueueGenericSend+0xd4>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d129      	bne.n	8003a58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a0a:	f000 fa29 	bl	8003e60 <prvCopyDataToQueue>
 8003a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 ff2b 	bl	8004878 <xTaskRemoveFromEventList>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a28:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <xQueueGenericSend+0x1f8>)
 8003a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	e00a      	b.n	8003a50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a40:	4b39      	ldr	r3, [pc, #228]	; (8003b28 <xQueueGenericSend+0x1f8>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a50:	f001 fb38 	bl	80050c4 <vPortExitCritical>
				return pdPASS;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e063      	b.n	8003b20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d103      	bne.n	8003a66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a5e:	f001 fb31 	bl	80050c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e05c      	b.n	8003b20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 ff63 	bl	800493c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a76:	2301      	movs	r3, #1
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a7a:	f001 fb23 	bl	80050c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a7e:	f000 fd13 	bl	80044a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a82:	f001 faef 	bl	8005064 <vPortEnterCritical>
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a8c:	b25b      	sxtb	r3, r3
 8003a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a92:	d103      	bne.n	8003a9c <xQueueGenericSend+0x16c>
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d103      	bne.n	8003ab2 <xQueueGenericSend+0x182>
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ab2:	f001 fb07 	bl	80050c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ab6:	1d3a      	adds	r2, r7, #4
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 ff52 	bl	8004968 <xTaskCheckForTimeOut>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d124      	bne.n	8003b14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003acc:	f000 fac0 	bl	8004050 <prvIsQueueFull>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	3310      	adds	r3, #16
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fea6 	bl	8004830 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ae6:	f000 fa4b 	bl	8003f80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aea:	f000 fceb 	bl	80044c4 <xTaskResumeAll>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af7c 	bne.w	80039ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <xQueueGenericSend+0x1f8>)
 8003af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	e772      	b.n	80039ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0a:	f000 fa39 	bl	8003f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b0e:	f000 fcd9 	bl	80044c4 <xTaskResumeAll>
 8003b12:	e76c      	b.n	80039ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b16:	f000 fa33 	bl	8003f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b1a:	f000 fcd3 	bl	80044c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3738      	adds	r7, #56	; 0x38
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b090      	sub	sp, #64	; 0x40
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d103      	bne.n	8003b68 <xQueueGenericSendFromISR+0x3c>
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <xQueueGenericSendFromISR+0x40>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <xQueueGenericSendFromISR+0x42>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b84:	bf00      	nop
 8003b86:	e7fe      	b.n	8003b86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d103      	bne.n	8003b96 <xQueueGenericSendFromISR+0x6a>
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <xQueueGenericSendFromISR+0x6e>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <xQueueGenericSendFromISR+0x70>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	623b      	str	r3, [r7, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bb6:	f001 fb37 	bl	8005228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bba:	f3ef 8211 	mrs	r2, BASEPRI
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	61fa      	str	r2, [r7, #28]
 8003bd0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <xQueueGenericSendFromISR+0xbc>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d12f      	bne.n	8003c48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bfe:	f000 f92f 	bl	8003e60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d112      	bne.n	8003c32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d016      	beq.n	8003c42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	3324      	adds	r3, #36	; 0x24
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fe2d 	bl	8004878 <xTaskRemoveFromEventList>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e007      	b.n	8003c42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c36:	3301      	adds	r3, #1
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	b25a      	sxtb	r2, r3
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c42:	2301      	movs	r3, #1
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c46:	e001      	b.n	8003c4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3740      	adds	r7, #64	; 0x40
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08c      	sub	sp, #48	; 0x30
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <xQueueReceive+0x30>
	__asm volatile
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	623b      	str	r3, [r7, #32]
}
 8003c90:	bf00      	nop
 8003c92:	e7fe      	b.n	8003c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <xQueueReceive+0x3e>
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <xQueueReceive+0x42>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <xQueueReceive+0x44>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xQueueReceive+0x5e>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	61fb      	str	r3, [r7, #28]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cc2:	f000 ff99 	bl	8004bf8 <xTaskGetSchedulerState>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <xQueueReceive+0x6e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <xQueueReceive+0x72>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueReceive+0x74>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xQueueReceive+0x8e>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	61bb      	str	r3, [r7, #24]
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cf2:	f001 f9b7 	bl	8005064 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01f      	beq.n	8003d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d06:	f000 f915 	bl	8003f34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	1e5a      	subs	r2, r3, #1
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00f      	beq.n	8003d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	3310      	adds	r3, #16
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fdaa 	bl	8004878 <xTaskRemoveFromEventList>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <xQueueReceive+0x1bc>)
 8003d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d3a:	f001 f9c3 	bl	80050c4 <vPortExitCritical>
				return pdPASS;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e069      	b.n	8003e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d48:	f001 f9bc 	bl	80050c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e062      	b.n	8003e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d56:	f107 0310 	add.w	r3, r7, #16
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fdee 	bl	800493c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d64:	f001 f9ae 	bl	80050c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d68:	f000 fb9e 	bl	80044a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d6c:	f001 f97a 	bl	8005064 <vPortEnterCritical>
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d76:	b25b      	sxtb	r3, r3
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d103      	bne.n	8003d86 <xQueueReceive+0x122>
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d103      	bne.n	8003d9c <xQueueReceive+0x138>
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d9c:	f001 f992 	bl	80050c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003da0:	1d3a      	adds	r2, r7, #4
 8003da2:	f107 0310 	add.w	r3, r7, #16
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fddd 	bl	8004968 <xTaskCheckForTimeOut>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d123      	bne.n	8003dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003db6:	f000 f935 	bl	8004024 <prvIsQueueEmpty>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	3324      	adds	r3, #36	; 0x24
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fd31 	bl	8004830 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd0:	f000 f8d6 	bl	8003f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003dd4:	f000 fb76 	bl	80044c4 <xTaskResumeAll>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d189      	bne.n	8003cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <xQueueReceive+0x1bc>)
 8003de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	e780      	b.n	8003cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df2:	f000 f8c5 	bl	8003f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003df6:	f000 fb65 	bl	80044c4 <xTaskResumeAll>
 8003dfa:	e77a      	b.n	8003cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfe:	f000 f8bf 	bl	8003f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e02:	f000 fb5f 	bl	80044c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e08:	f000 f90c 	bl	8004024 <prvIsQueueEmpty>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f43f af6f 	beq.w	8003cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3730      	adds	r7, #48	; 0x30
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	e000ed04 	.word	0xe000ed04

08003e24 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	60fb      	str	r3, [r7, #12]
}
 8003e48:	bf00      	nop
 8003e4a:	e7fe      	b.n	8003e4a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8003e52:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003e54:	4618      	mov	r0, r3
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10d      	bne.n	8003e9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d14d      	bne.n	8003f22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fed2 	bl	8004c34 <xTaskPriorityDisinherit>
 8003e90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	e043      	b.n	8003f22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d119      	bne.n	8003ed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6858      	ldr	r0, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	f001 fc0c 	bl	80056c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	441a      	add	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d32b      	bcc.n	8003f22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	e026      	b.n	8003f22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68d8      	ldr	r0, [r3, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	461a      	mov	r2, r3
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	f001 fbf2 	bl	80056c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	425b      	negs	r3, r3
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d207      	bcs.n	8003f10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	425b      	negs	r3, r3
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d105      	bne.n	8003f22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f2a:	697b      	ldr	r3, [r7, #20]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	441a      	add	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d303      	bcc.n	8003f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68d9      	ldr	r1, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	461a      	mov	r2, r3
 8003f72:	6838      	ldr	r0, [r7, #0]
 8003f74:	f001 fba8 	bl	80056c8 <memcpy>
	}
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f88:	f001 f86c 	bl	8005064 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f94:	e011      	b.n	8003fba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d012      	beq.n	8003fc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3324      	adds	r3, #36	; 0x24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fc68 	bl	8004878 <xTaskRemoveFromEventList>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fae:	f000 fd3d 	bl	8004a2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	dce9      	bgt.n	8003f96 <prvUnlockQueue+0x16>
 8003fc2:	e000      	b.n	8003fc6 <prvUnlockQueue+0x46>
					break;
 8003fc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	22ff      	movs	r2, #255	; 0xff
 8003fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fce:	f001 f879 	bl	80050c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fd2:	f001 f847 	bl	8005064 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fde:	e011      	b.n	8004004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d012      	beq.n	800400e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3310      	adds	r3, #16
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fc43 	bl	8004878 <xTaskRemoveFromEventList>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ff8:	f000 fd18 	bl	8004a2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ffc:	7bbb      	ldrb	r3, [r7, #14]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004008:	2b00      	cmp	r3, #0
 800400a:	dce9      	bgt.n	8003fe0 <prvUnlockQueue+0x60>
 800400c:	e000      	b.n	8004010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800400e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	22ff      	movs	r2, #255	; 0xff
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004018:	f001 f854 	bl	80050c4 <vPortExitCritical>
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800402c:	f001 f81a 	bl	8005064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004038:	2301      	movs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e001      	b.n	8004042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004042:	f001 f83f 	bl	80050c4 <vPortExitCritical>

	return xReturn;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004058:	f001 f804 	bl	8005064 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	429a      	cmp	r2, r3
 8004066:	d102      	bne.n	800406e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e001      	b.n	8004072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004072:	f001 f827 	bl	80050c4 <vPortExitCritical>

	return xReturn;
 8004076:	68fb      	ldr	r3, [r7, #12]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	; 0x38
 8004084:	af04      	add	r7, sp, #16
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	623b      	str	r3, [r7, #32]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	61fb      	str	r3, [r7, #28]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040c6:	23b4      	movs	r3, #180	; 0xb4
 80040c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2bb4      	cmp	r3, #180	; 0xb4
 80040ce:	d00a      	beq.n	80040e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	61bb      	str	r3, [r7, #24]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01e      	beq.n	800412c <xTaskCreateStatic+0xac>
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01b      	beq.n	800412c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	2202      	movs	r2, #2
 8004102:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004106:	2300      	movs	r3, #0
 8004108:	9303      	str	r3, [sp, #12]
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	9302      	str	r3, [sp, #8]
 800410e:	f107 0314 	add.w	r3, r7, #20
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f850 	bl	80041c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004126:	f000 f8eb 	bl	8004300 <prvAddNewTaskToReadyList>
 800412a:	e001      	b.n	8004130 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004130:	697b      	ldr	r3, [r7, #20]
	}
 8004132:	4618      	mov	r0, r3
 8004134:	3728      	adds	r7, #40	; 0x28
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800413a:	b580      	push	{r7, lr}
 800413c:	b08c      	sub	sp, #48	; 0x30
 800413e:	af04      	add	r7, sp, #16
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4618      	mov	r0, r3
 8004150:	f001 f8aa 	bl	80052a8 <pvPortMalloc>
 8004154:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800415c:	20b4      	movs	r0, #180	; 0xb4
 800415e:	f001 f8a3 	bl	80052a8 <pvPortMalloc>
 8004162:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
 8004170:	e005      	b.n	800417e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f001 f964 	bl	8005440 <vPortFree>
 8004178:	e001      	b.n	800417e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800418c:	88fa      	ldrh	r2, [r7, #6]
 800418e:	2300      	movs	r3, #0
 8004190:	9303      	str	r3, [sp, #12]
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f80e 	bl	80041c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041a8:	69f8      	ldr	r0, [r7, #28]
 80041aa:	f000 f8a9 	bl	8004300 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041ae:	2301      	movs	r3, #1
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	e002      	b.n	80041ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
 80041b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041ba:	69bb      	ldr	r3, [r7, #24]
	}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041dc:	3b01      	subs	r3, #1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f023 0307 	bic.w	r3, r3, #7
 80041ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <prvInitialiseNewTask+0x48>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	617b      	str	r3, [r7, #20]
}
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d01f      	beq.n	8004252 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
 8004216:	e012      	b.n	800423e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	7819      	ldrb	r1, [r3, #0]
 8004220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	3334      	adds	r3, #52	; 0x34
 8004228:	460a      	mov	r2, r1
 800422a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d006      	beq.n	8004246 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3301      	adds	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2b0f      	cmp	r3, #15
 8004242:	d9e9      	bls.n	8004218 <prvInitialiseNewTask+0x54>
 8004244:	e000      	b.n	8004248 <prvInitialiseNewTask+0x84>
			{
				break;
 8004246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004250:	e003      	b.n	800425a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	2b06      	cmp	r3, #6
 800425e:	d901      	bls.n	8004264 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004260:	2306      	movs	r3, #6
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	2200      	movs	r2, #0
 8004274:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	3304      	adds	r3, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff f91f 	bl	80034be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	3318      	adds	r3, #24
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff f91a 	bl	80034be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	f1c3 0207 	rsb	r2, r3, #7
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	334c      	adds	r3, #76	; 0x4c
 80042b4:	2260      	movs	r2, #96	; 0x60
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 fa13 	bl	80056e4 <memset>
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	4a0c      	ldr	r2, [pc, #48]	; (80042f4 <prvInitialiseNewTask+0x130>)
 80042c2:	651a      	str	r2, [r3, #80]	; 0x50
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	4a0c      	ldr	r2, [pc, #48]	; (80042f8 <prvInitialiseNewTask+0x134>)
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	4a0b      	ldr	r2, [pc, #44]	; (80042fc <prvInitialiseNewTask+0x138>)
 80042ce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	69b8      	ldr	r0, [r7, #24]
 80042d6:	f000 fd99 	bl	8004e0c <pxPortInitialiseStack>
 80042da:	4602      	mov	r2, r0
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ec:	bf00      	nop
 80042ee:	3720      	adds	r7, #32
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	08005928 	.word	0x08005928
 80042f8:	08005948 	.word	0x08005948
 80042fc:	08005908 	.word	0x08005908

08004300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004308:	f000 feac 	bl	8005064 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <prvAddNewTaskToReadyList+0xb8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3301      	adds	r3, #1
 8004312:	4a29      	ldr	r2, [pc, #164]	; (80043b8 <prvAddNewTaskToReadyList+0xb8>)
 8004314:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004316:	4b29      	ldr	r3, [pc, #164]	; (80043bc <prvAddNewTaskToReadyList+0xbc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800431e:	4a27      	ldr	r2, [pc, #156]	; (80043bc <prvAddNewTaskToReadyList+0xbc>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <prvAddNewTaskToReadyList+0xb8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d110      	bne.n	800434e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800432c:	f000 fba2 	bl	8004a74 <prvInitialiseTaskLists>
 8004330:	e00d      	b.n	800434e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004332:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <prvAddNewTaskToReadyList+0xc0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <prvAddNewTaskToReadyList+0xbc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	429a      	cmp	r2, r3
 8004346:	d802      	bhi.n	800434e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004348:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <prvAddNewTaskToReadyList+0xbc>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <prvAddNewTaskToReadyList+0xc4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <prvAddNewTaskToReadyList+0xc4>)
 8004356:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2201      	movs	r2, #1
 800435e:	409a      	lsls	r2, r3
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <prvAddNewTaskToReadyList+0xc8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	4a18      	ldr	r2, [pc, #96]	; (80043c8 <prvAddNewTaskToReadyList+0xc8>)
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <prvAddNewTaskToReadyList+0xcc>)
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7ff f8a9 	bl	80034d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004386:	f000 fe9d 	bl	80050c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <prvAddNewTaskToReadyList+0xc0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00e      	beq.n	80043b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <prvAddNewTaskToReadyList+0xbc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	429a      	cmp	r2, r3
 800439e:	d207      	bcs.n	80043b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <prvAddNewTaskToReadyList+0xd0>)
 80043a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200006c4 	.word	0x200006c4
 80043bc:	200005c4 	.word	0x200005c4
 80043c0:	200006d0 	.word	0x200006d0
 80043c4:	200006e0 	.word	0x200006e0
 80043c8:	200006cc 	.word	0x200006cc
 80043cc:	200005c8 	.word	0x200005c8
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	; 0x28
 80043d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043e2:	463a      	mov	r2, r7
 80043e4:	1d39      	adds	r1, r7, #4
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc f872 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	9202      	str	r2, [sp, #8]
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	2300      	movs	r3, #0
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	2300      	movs	r3, #0
 8004400:	460a      	mov	r2, r1
 8004402:	4921      	ldr	r1, [pc, #132]	; (8004488 <vTaskStartScheduler+0xb4>)
 8004404:	4821      	ldr	r0, [pc, #132]	; (800448c <vTaskStartScheduler+0xb8>)
 8004406:	f7ff fe3b 	bl	8004080 <xTaskCreateStatic>
 800440a:	4603      	mov	r3, r0
 800440c:	4a20      	ldr	r2, [pc, #128]	; (8004490 <vTaskStartScheduler+0xbc>)
 800440e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004410:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <vTaskStartScheduler+0xbc>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004418:	2301      	movs	r3, #1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e001      	b.n	8004422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d11b      	bne.n	8004460 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	613b      	str	r3, [r7, #16]
}
 800443a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800443c:	4b15      	ldr	r3, [pc, #84]	; (8004494 <vTaskStartScheduler+0xc0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	334c      	adds	r3, #76	; 0x4c
 8004442:	4a15      	ldr	r2, [pc, #84]	; (8004498 <vTaskStartScheduler+0xc4>)
 8004444:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <vTaskStartScheduler+0xc8>)
 8004448:	f04f 32ff 	mov.w	r2, #4294967295
 800444c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <vTaskStartScheduler+0xcc>)
 8004450:	2201      	movs	r2, #1
 8004452:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004454:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <vTaskStartScheduler+0xd0>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800445a:	f000 fd61 	bl	8004f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800445e:	e00e      	b.n	800447e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d10a      	bne.n	800447e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
}
 800447a:	bf00      	nop
 800447c:	e7fe      	b.n	800447c <vTaskStartScheduler+0xa8>
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	080058b8 	.word	0x080058b8
 800448c:	08004a45 	.word	0x08004a45
 8004490:	200006e8 	.word	0x200006e8
 8004494:	200005c4 	.word	0x200005c4
 8004498:	20000010 	.word	0x20000010
 800449c:	200006e4 	.word	0x200006e4
 80044a0:	200006d0 	.word	0x200006d0
 80044a4:	200006c8 	.word	0x200006c8

080044a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <vTaskSuspendAll+0x18>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	4a03      	ldr	r2, [pc, #12]	; (80044c0 <vTaskSuspendAll+0x18>)
 80044b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80044b6:	bf00      	nop
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	200006ec 	.word	0x200006ec

080044c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044d2:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <xTaskResumeAll+0x114>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	603b      	str	r3, [r7, #0]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044f0:	f000 fdb8 	bl	8005064 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044f4:	4b38      	ldr	r3, [pc, #224]	; (80045d8 <xTaskResumeAll+0x114>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	4a37      	ldr	r2, [pc, #220]	; (80045d8 <xTaskResumeAll+0x114>)
 80044fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <xTaskResumeAll+0x114>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d161      	bne.n	80045ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004506:	4b35      	ldr	r3, [pc, #212]	; (80045dc <xTaskResumeAll+0x118>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d05d      	beq.n	80045ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800450e:	e02e      	b.n	800456e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004510:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <xTaskResumeAll+0x11c>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3318      	adds	r3, #24
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff f838 	bl	8003592 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff f833 	bl	8003592 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	2201      	movs	r2, #1
 8004532:	409a      	lsls	r2, r3
 8004534:	4b2b      	ldr	r3, [pc, #172]	; (80045e4 <xTaskResumeAll+0x120>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4313      	orrs	r3, r2
 800453a:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <xTaskResumeAll+0x120>)
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4613      	mov	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4a27      	ldr	r2, [pc, #156]	; (80045e8 <xTaskResumeAll+0x124>)
 800454c:	441a      	add	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3304      	adds	r3, #4
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fe ffbf 	bl	80034d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455e:	4b23      	ldr	r3, [pc, #140]	; (80045ec <xTaskResumeAll+0x128>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	429a      	cmp	r2, r3
 8004566:	d302      	bcc.n	800456e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004568:	4b21      	ldr	r3, [pc, #132]	; (80045f0 <xTaskResumeAll+0x12c>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <xTaskResumeAll+0x11c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1cc      	bne.n	8004510 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800457c:	f000 fb1c 	bl	8004bb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004580:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <xTaskResumeAll+0x130>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d010      	beq.n	80045ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800458c:	f000 f836 	bl	80045fc <xTaskIncrementTick>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004596:	4b16      	ldr	r3, [pc, #88]	; (80045f0 <xTaskResumeAll+0x12c>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3b01      	subs	r3, #1
 80045a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f1      	bne.n	800458c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80045a8:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <xTaskResumeAll+0x130>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045ae:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <xTaskResumeAll+0x12c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <xTaskResumeAll+0x134>)
 80045bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045ca:	f000 fd7b 	bl	80050c4 <vPortExitCritical>

	return xAlreadyYielded;
 80045ce:	68bb      	ldr	r3, [r7, #8]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	200006ec 	.word	0x200006ec
 80045dc:	200006c4 	.word	0x200006c4
 80045e0:	20000684 	.word	0x20000684
 80045e4:	200006cc 	.word	0x200006cc
 80045e8:	200005c8 	.word	0x200005c8
 80045ec:	200005c4 	.word	0x200005c4
 80045f0:	200006d8 	.word	0x200006d8
 80045f4:	200006d4 	.word	0x200006d4
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004606:	4b4e      	ldr	r3, [pc, #312]	; (8004740 <xTaskIncrementTick+0x144>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 808e 	bne.w	800472c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004610:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <xTaskIncrementTick+0x148>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004618:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <xTaskIncrementTick+0x148>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d120      	bne.n	8004666 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004624:	4b48      	ldr	r3, [pc, #288]	; (8004748 <xTaskIncrementTick+0x14c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <xTaskIncrementTick+0x48>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	603b      	str	r3, [r7, #0]
}
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <xTaskIncrementTick+0x46>
 8004644:	4b40      	ldr	r3, [pc, #256]	; (8004748 <xTaskIncrementTick+0x14c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	4b40      	ldr	r3, [pc, #256]	; (800474c <xTaskIncrementTick+0x150>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3e      	ldr	r2, [pc, #248]	; (8004748 <xTaskIncrementTick+0x14c>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4a3e      	ldr	r2, [pc, #248]	; (800474c <xTaskIncrementTick+0x150>)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <xTaskIncrementTick+0x154>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	4a3c      	ldr	r2, [pc, #240]	; (8004750 <xTaskIncrementTick+0x154>)
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	f000 faa9 	bl	8004bb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <xTaskIncrementTick+0x158>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	d348      	bcc.n	8004702 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004670:	4b35      	ldr	r3, [pc, #212]	; (8004748 <xTaskIncrementTick+0x14c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d104      	bne.n	8004684 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467a:	4b36      	ldr	r3, [pc, #216]	; (8004754 <xTaskIncrementTick+0x158>)
 800467c:	f04f 32ff 	mov.w	r2, #4294967295
 8004680:	601a      	str	r2, [r3, #0]
					break;
 8004682:	e03e      	b.n	8004702 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004684:	4b30      	ldr	r3, [pc, #192]	; (8004748 <xTaskIncrementTick+0x14c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d203      	bcs.n	80046a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800469c:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <xTaskIncrementTick+0x158>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046a2:	e02e      	b.n	8004702 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe ff72 	bl	8003592 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d004      	beq.n	80046c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3318      	adds	r3, #24
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fe ff69 	bl	8003592 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	2201      	movs	r2, #1
 80046c6:	409a      	lsls	r2, r3
 80046c8:	4b23      	ldr	r3, [pc, #140]	; (8004758 <xTaskIncrementTick+0x15c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	4a22      	ldr	r2, [pc, #136]	; (8004758 <xTaskIncrementTick+0x15c>)
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4a1f      	ldr	r2, [pc, #124]	; (800475c <xTaskIncrementTick+0x160>)
 80046e0:	441a      	add	r2, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f7fe fef5 	bl	80034d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <xTaskIncrementTick+0x164>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d3b9      	bcc.n	8004670 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046fc:	2301      	movs	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004700:	e7b6      	b.n	8004670 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <xTaskIncrementTick+0x164>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004708:	4914      	ldr	r1, [pc, #80]	; (800475c <xTaskIncrementTick+0x160>)
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d901      	bls.n	800471e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800471a:	2301      	movs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <xTaskIncrementTick+0x168>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004726:	2301      	movs	r3, #1
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	e004      	b.n	8004736 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800472c:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <xTaskIncrementTick+0x16c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <xTaskIncrementTick+0x16c>)
 8004734:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004736:	697b      	ldr	r3, [r7, #20]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200006ec 	.word	0x200006ec
 8004744:	200006c8 	.word	0x200006c8
 8004748:	2000067c 	.word	0x2000067c
 800474c:	20000680 	.word	0x20000680
 8004750:	200006dc 	.word	0x200006dc
 8004754:	200006e4 	.word	0x200006e4
 8004758:	200006cc 	.word	0x200006cc
 800475c:	200005c8 	.word	0x200005c8
 8004760:	200005c4 	.word	0x200005c4
 8004764:	200006d8 	.word	0x200006d8
 8004768:	200006d4 	.word	0x200006d4

0800476c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004772:	4b29      	ldr	r3, [pc, #164]	; (8004818 <vTaskSwitchContext+0xac>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800477a:	4b28      	ldr	r3, [pc, #160]	; (800481c <vTaskSwitchContext+0xb0>)
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004780:	e044      	b.n	800480c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004782:	4b26      	ldr	r3, [pc, #152]	; (800481c <vTaskSwitchContext+0xb0>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <vTaskSwitchContext+0xb4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	fab3 f383 	clz	r3, r3
 8004794:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004796:	7afb      	ldrb	r3, [r7, #11]
 8004798:	f1c3 031f 	rsb	r3, r3, #31
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	4921      	ldr	r1, [pc, #132]	; (8004824 <vTaskSwitchContext+0xb8>)
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	607b      	str	r3, [r7, #4]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <vTaskSwitchContext+0x5a>
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4a14      	ldr	r2, [pc, #80]	; (8004824 <vTaskSwitchContext+0xb8>)
 80047d4:	4413      	add	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3308      	adds	r3, #8
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d104      	bne.n	80047f8 <vTaskSwitchContext+0x8c>
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <vTaskSwitchContext+0xbc>)
 8004800:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <vTaskSwitchContext+0xbc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	334c      	adds	r3, #76	; 0x4c
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <vTaskSwitchContext+0xc0>)
 800480a:	6013      	str	r3, [r2, #0]
}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	200006ec 	.word	0x200006ec
 800481c:	200006d8 	.word	0x200006d8
 8004820:	200006cc 	.word	0x200006cc
 8004824:	200005c8 	.word	0x200005c8
 8004828:	200005c4 	.word	0x200005c4
 800482c:	20000010 	.word	0x20000010

08004830 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	60fb      	str	r3, [r7, #12]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004856:	4b07      	ldr	r3, [pc, #28]	; (8004874 <vTaskPlaceOnEventList+0x44>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3318      	adds	r3, #24
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe fe5e 	bl	8003520 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004864:	2101      	movs	r1, #1
 8004866:	6838      	ldr	r0, [r7, #0]
 8004868:	f000 fa6a 	bl	8004d40 <prvAddCurrentTaskToDelayedList>
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	200005c4 	.word	0x200005c4

08004878 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	60fb      	str	r3, [r7, #12]
}
 80048a0:	bf00      	nop
 80048a2:	e7fe      	b.n	80048a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	3318      	adds	r3, #24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe fe72 	bl	8003592 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <xTaskRemoveFromEventList+0xac>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11c      	bne.n	80048f0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fe69 	bl	8003592 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	2201      	movs	r2, #1
 80048c6:	409a      	lsls	r2, r3
 80048c8:	4b17      	ldr	r3, [pc, #92]	; (8004928 <xTaskRemoveFromEventList+0xb0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	4a16      	ldr	r2, [pc, #88]	; (8004928 <xTaskRemoveFromEventList+0xb0>)
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4a13      	ldr	r2, [pc, #76]	; (800492c <xTaskRemoveFromEventList+0xb4>)
 80048e0:	441a      	add	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7fe fdf5 	bl	80034d8 <vListInsertEnd>
 80048ee:	e005      	b.n	80048fc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3318      	adds	r3, #24
 80048f4:	4619      	mov	r1, r3
 80048f6:	480e      	ldr	r0, [pc, #56]	; (8004930 <xTaskRemoveFromEventList+0xb8>)
 80048f8:	f7fe fdee 	bl	80034d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <xTaskRemoveFromEventList+0xbc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	429a      	cmp	r2, r3
 8004908:	d905      	bls.n	8004916 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800490a:	2301      	movs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <xTaskRemoveFromEventList+0xc0>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e001      	b.n	800491a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800491a:	697b      	ldr	r3, [r7, #20]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	200006ec 	.word	0x200006ec
 8004928:	200006cc 	.word	0x200006cc
 800492c:	200005c8 	.word	0x200005c8
 8004930:	20000684 	.word	0x20000684
 8004934:	200005c4 	.word	0x200005c4
 8004938:	200006d8 	.word	0x200006d8

0800493c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <vTaskInternalSetTimeOutState+0x24>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <vTaskInternalSetTimeOutState+0x28>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	200006dc 	.word	0x200006dc
 8004964:	200006c8 	.word	0x200006c8

08004968 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10a      	bne.n	800498e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	613b      	str	r3, [r7, #16]
}
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	60fb      	str	r3, [r7, #12]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049aa:	f000 fb5b 	bl	8005064 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049ae:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <xTaskCheckForTimeOut+0xbc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d102      	bne.n	80049ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	e023      	b.n	8004a16 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <xTaskCheckForTimeOut+0xc0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d007      	beq.n	80049ea <xTaskCheckForTimeOut+0x82>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	e015      	b.n	8004a16 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d20b      	bcs.n	8004a0c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1ad2      	subs	r2, r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff9b 	bl	800493c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	e004      	b.n	8004a16 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a16:	f000 fb55 	bl	80050c4 <vPortExitCritical>

	return xReturn;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	200006c8 	.word	0x200006c8
 8004a28:	200006dc 	.word	0x200006dc

08004a2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <vTaskMissedYield+0x14>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	200006d8 	.word	0x200006d8

08004a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a4c:	f000 f852 	bl	8004af4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <prvIdleTask+0x28>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d9f9      	bls.n	8004a4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <prvIdleTask+0x2c>)
 8004a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a68:	e7f0      	b.n	8004a4c <prvIdleTask+0x8>
 8004a6a:	bf00      	nop
 8004a6c:	200005c8 	.word	0x200005c8
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	e00c      	b.n	8004a9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <prvInitialiseTaskLists+0x60>)
 8004a8c:	4413      	add	r3, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fcf5 	bl	800347e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3301      	adds	r3, #1
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b06      	cmp	r3, #6
 8004a9e:	d9ef      	bls.n	8004a80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004aa0:	480d      	ldr	r0, [pc, #52]	; (8004ad8 <prvInitialiseTaskLists+0x64>)
 8004aa2:	f7fe fcec 	bl	800347e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aa6:	480d      	ldr	r0, [pc, #52]	; (8004adc <prvInitialiseTaskLists+0x68>)
 8004aa8:	f7fe fce9 	bl	800347e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004aac:	480c      	ldr	r0, [pc, #48]	; (8004ae0 <prvInitialiseTaskLists+0x6c>)
 8004aae:	f7fe fce6 	bl	800347e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ab2:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <prvInitialiseTaskLists+0x70>)
 8004ab4:	f7fe fce3 	bl	800347e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ab8:	480b      	ldr	r0, [pc, #44]	; (8004ae8 <prvInitialiseTaskLists+0x74>)
 8004aba:	f7fe fce0 	bl	800347e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004abe:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <prvInitialiseTaskLists+0x78>)
 8004ac0:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <prvInitialiseTaskLists+0x64>)
 8004ac2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <prvInitialiseTaskLists+0x7c>)
 8004ac6:	4a05      	ldr	r2, [pc, #20]	; (8004adc <prvInitialiseTaskLists+0x68>)
 8004ac8:	601a      	str	r2, [r3, #0]
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200005c8 	.word	0x200005c8
 8004ad8:	20000654 	.word	0x20000654
 8004adc:	20000668 	.word	0x20000668
 8004ae0:	20000684 	.word	0x20000684
 8004ae4:	20000698 	.word	0x20000698
 8004ae8:	200006b0 	.word	0x200006b0
 8004aec:	2000067c 	.word	0x2000067c
 8004af0:	20000680 	.word	0x20000680

08004af4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004afa:	e019      	b.n	8004b30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004afc:	f000 fab2 	bl	8005064 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <prvCheckTasksWaitingTermination+0x50>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe fd40 	bl	8003592 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <prvCheckTasksWaitingTermination+0x54>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <prvCheckTasksWaitingTermination+0x54>)
 8004b1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <prvCheckTasksWaitingTermination+0x58>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <prvCheckTasksWaitingTermination+0x58>)
 8004b24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b26:	f000 facd 	bl	80050c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f810 	bl	8004b50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <prvCheckTasksWaitingTermination+0x58>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e1      	bne.n	8004afc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000698 	.word	0x20000698
 8004b48:	200006c4 	.word	0x200006c4
 8004b4c:	200006ac 	.word	0x200006ac

08004b50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	334c      	adds	r3, #76	; 0x4c
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fe23 	bl	80057a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d108      	bne.n	8004b7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fc65 	bl	8005440 <vPortFree>
				vPortFree( pxTCB );
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fc62 	bl	8005440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b7c:	e018      	b.n	8004bb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d103      	bne.n	8004b90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fc59 	bl	8005440 <vPortFree>
	}
 8004b8e:	e00f      	b.n	8004bb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d00a      	beq.n	8004bb0 <prvDeleteTCB+0x60>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	60fb      	str	r3, [r7, #12]
}
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <prvDeleteTCB+0x5e>
	}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <prvResetNextTaskUnblockTime+0x38>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8004bca:	f04f 32ff 	mov.w	r2, #4294967295
 8004bce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bd0:	e008      	b.n	8004be4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <prvResetNextTaskUnblockTime+0x38>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <prvResetNextTaskUnblockTime+0x3c>)
 8004be2:	6013      	str	r3, [r2, #0]
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	2000067c 	.word	0x2000067c
 8004bf4:	200006e4 	.word	0x200006e4

08004bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <xTaskGetSchedulerState+0x34>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c06:	2301      	movs	r3, #1
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	e008      	b.n	8004c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <xTaskGetSchedulerState+0x38>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c14:	2302      	movs	r3, #2
 8004c16:	607b      	str	r3, [r7, #4]
 8004c18:	e001      	b.n	8004c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c1e:	687b      	ldr	r3, [r7, #4]
	}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	200006d0 	.word	0x200006d0
 8004c30:	200006ec 	.word	0x200006ec

08004c34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d06e      	beq.n	8004d28 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c4a:	4b3a      	ldr	r3, [pc, #232]	; (8004d34 <xTaskPriorityDisinherit+0x100>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d00a      	beq.n	8004c6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	60fb      	str	r3, [r7, #12]
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	60bb      	str	r3, [r7, #8]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8c:	1e5a      	subs	r2, r3, #1
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d044      	beq.n	8004d28 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d140      	bne.n	8004d28 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fc71 	bl	8003592 <uxListRemove>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d115      	bne.n	8004ce2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	491f      	ldr	r1, [pc, #124]	; (8004d38 <xTaskPriorityDisinherit+0x104>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xTaskPriorityDisinherit+0xae>
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <xTaskPriorityDisinherit+0x108>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <xTaskPriorityDisinherit+0x108>)
 8004ce0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	f1c3 0207 	rsb	r2, r3, #7
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <xTaskPriorityDisinherit+0x108>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	4a0d      	ldr	r2, [pc, #52]	; (8004d3c <xTaskPriorityDisinherit+0x108>)
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <xTaskPriorityDisinherit+0x104>)
 8004d16:	441a      	add	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f7fe fbda 	bl	80034d8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d28:	697b      	ldr	r3, [r7, #20]
	}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	200005c4 	.word	0x200005c4
 8004d38:	200005c8 	.word	0x200005c8
 8004d3c:	200006cc 	.word	0x200006cc

08004d40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d4a:	4b29      	ldr	r3, [pc, #164]	; (8004df0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d50:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fc1b 	bl	8003592 <uxListRemove>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d62:	4b24      	ldr	r3, [pc, #144]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	2201      	movs	r2, #1
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43da      	mvns	r2, r3
 8004d70:	4b21      	ldr	r3, [pc, #132]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4013      	ands	r3, r2
 8004d76:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d10a      	bne.n	8004d98 <prvAddCurrentTaskToDelayedList+0x58>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d88:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	481a      	ldr	r0, [pc, #104]	; (8004dfc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d92:	f7fe fba1 	bl	80034d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d96:	e026      	b.n	8004de6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004da0:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d209      	bcs.n	8004dc4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f7fe fbaf 	bl	8003520 <vListInsert>
}
 8004dc2:	e010      	b.n	8004de6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	f7fe fba5 	bl	8003520 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d202      	bcs.n	8004de6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004de0:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6013      	str	r3, [r2, #0]
}
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	200006c8 	.word	0x200006c8
 8004df4:	200005c4 	.word	0x200005c4
 8004df8:	200006cc 	.word	0x200006cc
 8004dfc:	200006b0 	.word	0x200006b0
 8004e00:	20000680 	.word	0x20000680
 8004e04:	2000067c 	.word	0x2000067c
 8004e08:	200006e4 	.word	0x200006e4

08004e0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3b04      	subs	r3, #4
 8004e1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f023 0201 	bic.w	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b04      	subs	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e3c:	4a0c      	ldr	r2, [pc, #48]	; (8004e70 <pxPortInitialiseStack+0x64>)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3b14      	subs	r3, #20
 8004e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f06f 0202 	mvn.w	r2, #2
 8004e5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3b20      	subs	r3, #32
 8004e60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e62:	68fb      	ldr	r3, [r7, #12]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	08004e75 	.word	0x08004e75

08004e74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e7e:	4b12      	ldr	r3, [pc, #72]	; (8004ec8 <prvTaskExitError+0x54>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d00a      	beq.n	8004e9e <prvTaskExitError+0x2a>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	60fb      	str	r3, [r7, #12]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <prvTaskExitError+0x28>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	60bb      	str	r3, [r7, #8]
}
 8004eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004eb2:	bf00      	nop
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0fc      	beq.n	8004eb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004eba:	bf00      	nop
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	2000000c 	.word	0x2000000c
 8004ecc:	00000000 	.word	0x00000000

08004ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ed0:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <pxCurrentTCBConst2>)
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	6808      	ldr	r0, [r1, #0]
 8004ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eda:	f380 8809 	msr	PSP, r0
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8811 	msr	BASEPRI, r0
 8004eea:	4770      	bx	lr
 8004eec:	f3af 8000 	nop.w

08004ef0 <pxCurrentTCBConst2>:
 8004ef0:	200005c4 	.word	0x200005c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ef8:	4808      	ldr	r0, [pc, #32]	; (8004f1c <prvPortStartFirstTask+0x24>)
 8004efa:	6800      	ldr	r0, [r0, #0]
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f380 8808 	msr	MSP, r0
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8814 	msr	CONTROL, r0
 8004f0a:	b662      	cpsie	i
 8004f0c:	b661      	cpsie	f
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	df00      	svc	0
 8004f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f1a:	bf00      	nop
 8004f1c:	e000ed08 	.word	0xe000ed08

08004f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f26:	4b46      	ldr	r3, [pc, #280]	; (8005040 <xPortStartScheduler+0x120>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a46      	ldr	r2, [pc, #280]	; (8005044 <xPortStartScheduler+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10a      	bne.n	8004f46 <xPortStartScheduler+0x26>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	613b      	str	r3, [r7, #16]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f46:	4b3e      	ldr	r3, [pc, #248]	; (8005040 <xPortStartScheduler+0x120>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a3f      	ldr	r2, [pc, #252]	; (8005048 <xPortStartScheduler+0x128>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d10a      	bne.n	8004f66 <xPortStartScheduler+0x46>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <xPortStartScheduler+0x12c>)
 8004f68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	22ff      	movs	r2, #255	; 0xff
 8004f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	4b31      	ldr	r3, [pc, #196]	; (8005050 <xPortStartScheduler+0x130>)
 8004f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <xPortStartScheduler+0x134>)
 8004f90:	2207      	movs	r2, #7
 8004f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f94:	e009      	b.n	8004faa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f96:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <xPortStartScheduler+0x134>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <xPortStartScheduler+0x134>)
 8004f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d0ef      	beq.n	8004f96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <xPortStartScheduler+0x134>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1c3 0307 	rsb	r3, r3, #7
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d00a      	beq.n	8004fd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60bb      	str	r3, [r7, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fd8:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <xPortStartScheduler+0x134>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <xPortStartScheduler+0x134>)
 8004fe0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fe2:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <xPortStartScheduler+0x134>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fea:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <xPortStartScheduler+0x134>)
 8004fec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <xPortStartScheduler+0x138>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <xPortStartScheduler+0x138>)
 8004ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005002:	4b15      	ldr	r3, [pc, #84]	; (8005058 <xPortStartScheduler+0x138>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <xPortStartScheduler+0x138>)
 8005008:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800500c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800500e:	f000 f8dd 	bl	80051cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005012:	4b12      	ldr	r3, [pc, #72]	; (800505c <xPortStartScheduler+0x13c>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005018:	f000 f8fc 	bl	8005214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800501c:	4b10      	ldr	r3, [pc, #64]	; (8005060 <xPortStartScheduler+0x140>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <xPortStartScheduler+0x140>)
 8005022:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005026:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005028:	f7ff ff66 	bl	8004ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800502c:	f7ff fb9e 	bl	800476c <vTaskSwitchContext>
	prvTaskExitError();
 8005030:	f7ff ff20 	bl	8004e74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	e000ed00 	.word	0xe000ed00
 8005044:	410fc271 	.word	0x410fc271
 8005048:	410fc270 	.word	0x410fc270
 800504c:	e000e400 	.word	0xe000e400
 8005050:	200006f0 	.word	0x200006f0
 8005054:	200006f4 	.word	0x200006f4
 8005058:	e000ed20 	.word	0xe000ed20
 800505c:	2000000c 	.word	0x2000000c
 8005060:	e000ef34 	.word	0xe000ef34

08005064 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	607b      	str	r3, [r7, #4]
}
 800507c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <vPortEnterCritical+0x58>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	4a0d      	ldr	r2, [pc, #52]	; (80050bc <vPortEnterCritical+0x58>)
 8005086:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005088:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <vPortEnterCritical+0x58>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d10f      	bne.n	80050b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <vPortEnterCritical+0x5c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	603b      	str	r3, [r7, #0]
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <vPortEnterCritical+0x4a>
	}
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	2000000c 	.word	0x2000000c
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ca:	4b12      	ldr	r3, [pc, #72]	; (8005114 <vPortExitCritical+0x50>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <vPortExitCritical+0x24>
	__asm volatile
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	607b      	str	r3, [r7, #4]
}
 80050e4:	bf00      	nop
 80050e6:	e7fe      	b.n	80050e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <vPortExitCritical+0x50>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	4a09      	ldr	r2, [pc, #36]	; (8005114 <vPortExitCritical+0x50>)
 80050f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <vPortExitCritical+0x50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <vPortExitCritical+0x42>
 80050fa:	2300      	movs	r3, #0
 80050fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f383 8811 	msr	BASEPRI, r3
}
 8005104:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c
	...

08005120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005120:	f3ef 8009 	mrs	r0, PSP
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <pxCurrentTCBConst>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	f01e 0f10 	tst.w	lr, #16
 8005130:	bf08      	it	eq
 8005132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	6010      	str	r0, [r2, #0]
 800513c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005144:	f380 8811 	msr	BASEPRI, r0
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f7ff fb0c 	bl	800476c <vTaskSwitchContext>
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f380 8811 	msr	BASEPRI, r0
 800515c:	bc09      	pop	{r0, r3}
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	6808      	ldr	r0, [r1, #0]
 8005162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005166:	f01e 0f10 	tst.w	lr, #16
 800516a:	bf08      	it	eq
 800516c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005170:	f380 8809 	msr	PSP, r0
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst>:
 8005180:	200005c4 	.word	0x200005c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
}
 80051a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051a2:	f7ff fa2b 	bl	80045fc <xTaskIncrementTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <SysTick_Handler+0x40>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f383 8811 	msr	BASEPRI, r3
}
 80051be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <vPortSetupTimerInterrupt+0x34>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <vPortSetupTimerInterrupt+0x38>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <vPortSetupTimerInterrupt+0x3c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <vPortSetupTimerInterrupt+0x40>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <vPortSetupTimerInterrupt+0x44>)
 80051ea:	3b01      	subs	r3, #1
 80051ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <vPortSetupTimerInterrupt+0x34>)
 80051f0:	2207      	movs	r2, #7
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	e000e010 	.word	0xe000e010
 8005204:	e000e018 	.word	0xe000e018
 8005208:	20000000 	.word	0x20000000
 800520c:	10624dd3 	.word	0x10624dd3
 8005210:	e000e014 	.word	0xe000e014

08005214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005224 <vPortEnableVFP+0x10>
 8005218:	6801      	ldr	r1, [r0, #0]
 800521a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800521e:	6001      	str	r1, [r0, #0]
 8005220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005222:	bf00      	nop
 8005224:	e000ed88 	.word	0xe000ed88

08005228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800522e:	f3ef 8305 	mrs	r3, IPSR
 8005232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b0f      	cmp	r3, #15
 8005238:	d914      	bls.n	8005264 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <vPortValidateInterruptPriority+0x70>)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005244:	4b15      	ldr	r3, [pc, #84]	; (800529c <vPortValidateInterruptPriority+0x74>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	7afa      	ldrb	r2, [r7, #11]
 800524a:	429a      	cmp	r2, r3
 800524c:	d20a      	bcs.n	8005264 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <vPortValidateInterruptPriority+0x78>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <vPortValidateInterruptPriority+0x7c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d90a      	bls.n	800528a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	603b      	str	r3, [r7, #0]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <vPortValidateInterruptPriority+0x60>
	}
 800528a:	bf00      	nop
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	e000e3f0 	.word	0xe000e3f0
 800529c:	200006f0 	.word	0x200006f0
 80052a0:	e000ed0c 	.word	0xe000ed0c
 80052a4:	200006f4 	.word	0x200006f4

080052a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052b4:	f7ff f8f8 	bl	80044a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052b8:	4b5b      	ldr	r3, [pc, #364]	; (8005428 <pvPortMalloc+0x180>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052c0:	f000 f920 	bl	8005504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052c4:	4b59      	ldr	r3, [pc, #356]	; (800542c <pvPortMalloc+0x184>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 8093 	bne.w	80053f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01d      	beq.n	8005314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80052d8:	2208      	movs	r2, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d014      	beq.n	8005314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f023 0307 	bic.w	r3, r3, #7
 80052f0:	3308      	adds	r3, #8
 80052f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <pvPortMalloc+0x6c>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	617b      	str	r3, [r7, #20]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d06e      	beq.n	80053f8 <pvPortMalloc+0x150>
 800531a:	4b45      	ldr	r3, [pc, #276]	; (8005430 <pvPortMalloc+0x188>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d869      	bhi.n	80053f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005324:	4b43      	ldr	r3, [pc, #268]	; (8005434 <pvPortMalloc+0x18c>)
 8005326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005328:	4b42      	ldr	r3, [pc, #264]	; (8005434 <pvPortMalloc+0x18c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800532e:	e004      	b.n	800533a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d903      	bls.n	800534c <pvPortMalloc+0xa4>
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f1      	bne.n	8005330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800534c:	4b36      	ldr	r3, [pc, #216]	; (8005428 <pvPortMalloc+0x180>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005352:	429a      	cmp	r2, r3
 8005354:	d050      	beq.n	80053f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2208      	movs	r2, #8
 800535c:	4413      	add	r3, r2
 800535e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	2308      	movs	r3, #8
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	429a      	cmp	r2, r3
 8005376:	d91f      	bls.n	80053b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <pvPortMalloc+0xf8>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	613b      	str	r3, [r7, #16]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	1ad2      	subs	r2, r2, r3
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053b2:	69b8      	ldr	r0, [r7, #24]
 80053b4:	f000 f908 	bl	80055c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <pvPortMalloc+0x188>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	4a1b      	ldr	r2, [pc, #108]	; (8005430 <pvPortMalloc+0x188>)
 80053c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053c6:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <pvPortMalloc+0x188>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <pvPortMalloc+0x190>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d203      	bcs.n	80053da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <pvPortMalloc+0x188>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <pvPortMalloc+0x190>)
 80053d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <pvPortMalloc+0x184>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053ee:	4b13      	ldr	r3, [pc, #76]	; (800543c <pvPortMalloc+0x194>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3301      	adds	r3, #1
 80053f4:	4a11      	ldr	r2, [pc, #68]	; (800543c <pvPortMalloc+0x194>)
 80053f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053f8:	f7ff f864 	bl	80044c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <pvPortMalloc+0x174>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60fb      	str	r3, [r7, #12]
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <pvPortMalloc+0x172>
	return pvReturn;
 800541c:	69fb      	ldr	r3, [r7, #28]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20002e10 	.word	0x20002e10
 800542c:	20002e24 	.word	0x20002e24
 8005430:	20002e14 	.word	0x20002e14
 8005434:	20002e08 	.word	0x20002e08
 8005438:	20002e18 	.word	0x20002e18
 800543c:	20002e1c 	.word	0x20002e1c

08005440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d04d      	beq.n	80054ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005452:	2308      	movs	r3, #8
 8005454:	425b      	negs	r3, r3
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <vPortFree+0xb8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <vPortFree+0x44>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <vPortFree+0x62>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60bb      	str	r3, [r7, #8]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <vPortFree+0xb8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01e      	beq.n	80054ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d11a      	bne.n	80054ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <vPortFree+0xb8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	43db      	mvns	r3, r3
 80054c2:	401a      	ands	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054c8:	f7fe ffee 	bl	80044a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <vPortFree+0xbc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <vPortFree+0xbc>)
 80054d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054da:	6938      	ldr	r0, [r7, #16]
 80054dc:	f000 f874 	bl	80055c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <vPortFree+0xc0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	4a06      	ldr	r2, [pc, #24]	; (8005500 <vPortFree+0xc0>)
 80054e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054ea:	f7fe ffeb 	bl	80044c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ee:	bf00      	nop
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20002e24 	.word	0x20002e24
 80054fc:	20002e14 	.word	0x20002e14
 8005500:	20002e20 	.word	0x20002e20

08005504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800550a:	f242 7310 	movw	r3, #10000	; 0x2710
 800550e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <prvHeapInit+0xac>)
 8005512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3307      	adds	r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <prvHeapInit+0xac>)
 8005534:	4413      	add	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <prvHeapInit+0xb0>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <prvHeapInit+0xb0>)
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	4413      	add	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005550:	2208      	movs	r2, #8
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <prvHeapInit+0xb4>)
 8005564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <prvHeapInit+0xb4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <prvHeapInit+0xb4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <prvHeapInit+0xb4>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <prvHeapInit+0xb8>)
 8005592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <prvHeapInit+0xbc>)
 800559a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <prvHeapInit+0xc0>)
 800559e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	200006f8 	.word	0x200006f8
 80055b4:	20002e08 	.word	0x20002e08
 80055b8:	20002e10 	.word	0x20002e10
 80055bc:	20002e18 	.word	0x20002e18
 80055c0:	20002e14 	.word	0x20002e14
 80055c4:	20002e24 	.word	0x20002e24

080055c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055d0:	4b28      	ldr	r3, [pc, #160]	; (8005674 <prvInsertBlockIntoFreeList+0xac>)
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <prvInsertBlockIntoFreeList+0x14>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d8f7      	bhi.n	80055d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d108      	bne.n	800560a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	441a      	add	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d118      	bne.n	8005650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d00d      	beq.n	8005646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e008      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e003      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d002      	beq.n	8005666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20002e08 	.word	0x20002e08
 8005678:	20002e10 	.word	0x20002e10

0800567c <__libc_init_array>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	4d0d      	ldr	r5, [pc, #52]	; (80056b4 <__libc_init_array+0x38>)
 8005680:	4c0d      	ldr	r4, [pc, #52]	; (80056b8 <__libc_init_array+0x3c>)
 8005682:	1b64      	subs	r4, r4, r5
 8005684:	10a4      	asrs	r4, r4, #2
 8005686:	2600      	movs	r6, #0
 8005688:	42a6      	cmp	r6, r4
 800568a:	d109      	bne.n	80056a0 <__libc_init_array+0x24>
 800568c:	4d0b      	ldr	r5, [pc, #44]	; (80056bc <__libc_init_array+0x40>)
 800568e:	4c0c      	ldr	r4, [pc, #48]	; (80056c0 <__libc_init_array+0x44>)
 8005690:	f000 f8f2 	bl	8005878 <_init>
 8005694:	1b64      	subs	r4, r4, r5
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	2600      	movs	r6, #0
 800569a:	42a6      	cmp	r6, r4
 800569c:	d105      	bne.n	80056aa <__libc_init_array+0x2e>
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a4:	4798      	blx	r3
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7ee      	b.n	8005688 <__libc_init_array+0xc>
 80056aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ae:	4798      	blx	r3
 80056b0:	3601      	adds	r6, #1
 80056b2:	e7f2      	b.n	800569a <__libc_init_array+0x1e>
 80056b4:	08005970 	.word	0x08005970
 80056b8:	08005970 	.word	0x08005970
 80056bc:	08005970 	.word	0x08005970
 80056c0:	08005974 	.word	0x08005974

080056c4 <__retarget_lock_acquire_recursive>:
 80056c4:	4770      	bx	lr

080056c6 <__retarget_lock_release_recursive>:
 80056c6:	4770      	bx	lr

080056c8 <memcpy>:
 80056c8:	440a      	add	r2, r1
 80056ca:	4291      	cmp	r1, r2
 80056cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80056d0:	d100      	bne.n	80056d4 <memcpy+0xc>
 80056d2:	4770      	bx	lr
 80056d4:	b510      	push	{r4, lr}
 80056d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056de:	4291      	cmp	r1, r2
 80056e0:	d1f9      	bne.n	80056d6 <memcpy+0xe>
 80056e2:	bd10      	pop	{r4, pc}

080056e4 <memset>:
 80056e4:	4402      	add	r2, r0
 80056e6:	4603      	mov	r3, r0
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d100      	bne.n	80056ee <memset+0xa>
 80056ec:	4770      	bx	lr
 80056ee:	f803 1b01 	strb.w	r1, [r3], #1
 80056f2:	e7f9      	b.n	80056e8 <memset+0x4>

080056f4 <_free_r>:
 80056f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056f6:	2900      	cmp	r1, #0
 80056f8:	d044      	beq.n	8005784 <_free_r+0x90>
 80056fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056fe:	9001      	str	r0, [sp, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f1a1 0404 	sub.w	r4, r1, #4
 8005706:	bfb8      	it	lt
 8005708:	18e4      	addlt	r4, r4, r3
 800570a:	f000 f8a9 	bl	8005860 <__malloc_lock>
 800570e:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <_free_r+0x94>)
 8005710:	9801      	ldr	r0, [sp, #4]
 8005712:	6813      	ldr	r3, [r2, #0]
 8005714:	b933      	cbnz	r3, 8005724 <_free_r+0x30>
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	6014      	str	r4, [r2, #0]
 800571a:	b003      	add	sp, #12
 800571c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005720:	f000 b8a4 	b.w	800586c <__malloc_unlock>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d908      	bls.n	800573a <_free_r+0x46>
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	1961      	adds	r1, r4, r5
 800572c:	428b      	cmp	r3, r1
 800572e:	bf01      	itttt	eq
 8005730:	6819      	ldreq	r1, [r3, #0]
 8005732:	685b      	ldreq	r3, [r3, #4]
 8005734:	1949      	addeq	r1, r1, r5
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	e7ed      	b.n	8005716 <_free_r+0x22>
 800573a:	461a      	mov	r2, r3
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b10b      	cbz	r3, 8005744 <_free_r+0x50>
 8005740:	42a3      	cmp	r3, r4
 8005742:	d9fa      	bls.n	800573a <_free_r+0x46>
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	1855      	adds	r5, r2, r1
 8005748:	42a5      	cmp	r5, r4
 800574a:	d10b      	bne.n	8005764 <_free_r+0x70>
 800574c:	6824      	ldr	r4, [r4, #0]
 800574e:	4421      	add	r1, r4
 8005750:	1854      	adds	r4, r2, r1
 8005752:	42a3      	cmp	r3, r4
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	d1e0      	bne.n	800571a <_free_r+0x26>
 8005758:	681c      	ldr	r4, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	6053      	str	r3, [r2, #4]
 800575e:	4421      	add	r1, r4
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	e7da      	b.n	800571a <_free_r+0x26>
 8005764:	d902      	bls.n	800576c <_free_r+0x78>
 8005766:	230c      	movs	r3, #12
 8005768:	6003      	str	r3, [r0, #0]
 800576a:	e7d6      	b.n	800571a <_free_r+0x26>
 800576c:	6825      	ldr	r5, [r4, #0]
 800576e:	1961      	adds	r1, r4, r5
 8005770:	428b      	cmp	r3, r1
 8005772:	bf04      	itt	eq
 8005774:	6819      	ldreq	r1, [r3, #0]
 8005776:	685b      	ldreq	r3, [r3, #4]
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	bf04      	itt	eq
 800577c:	1949      	addeq	r1, r1, r5
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	6054      	str	r4, [r2, #4]
 8005782:	e7ca      	b.n	800571a <_free_r+0x26>
 8005784:	b003      	add	sp, #12
 8005786:	bd30      	pop	{r4, r5, pc}
 8005788:	20002e2c 	.word	0x20002e2c

0800578c <cleanup_glue>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	460c      	mov	r4, r1
 8005790:	6809      	ldr	r1, [r1, #0]
 8005792:	4605      	mov	r5, r0
 8005794:	b109      	cbz	r1, 800579a <cleanup_glue+0xe>
 8005796:	f7ff fff9 	bl	800578c <cleanup_glue>
 800579a:	4621      	mov	r1, r4
 800579c:	4628      	mov	r0, r5
 800579e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a2:	f7ff bfa7 	b.w	80056f4 <_free_r>
	...

080057a8 <_reclaim_reent>:
 80057a8:	4b2c      	ldr	r3, [pc, #176]	; (800585c <_reclaim_reent+0xb4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4283      	cmp	r3, r0
 80057ae:	b570      	push	{r4, r5, r6, lr}
 80057b0:	4604      	mov	r4, r0
 80057b2:	d051      	beq.n	8005858 <_reclaim_reent+0xb0>
 80057b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057b6:	b143      	cbz	r3, 80057ca <_reclaim_reent+0x22>
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d14a      	bne.n	8005854 <_reclaim_reent+0xac>
 80057be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	b111      	cbz	r1, 80057ca <_reclaim_reent+0x22>
 80057c4:	4620      	mov	r0, r4
 80057c6:	f7ff ff95 	bl	80056f4 <_free_r>
 80057ca:	6961      	ldr	r1, [r4, #20]
 80057cc:	b111      	cbz	r1, 80057d4 <_reclaim_reent+0x2c>
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff ff90 	bl	80056f4 <_free_r>
 80057d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057d6:	b111      	cbz	r1, 80057de <_reclaim_reent+0x36>
 80057d8:	4620      	mov	r0, r4
 80057da:	f7ff ff8b 	bl	80056f4 <_free_r>
 80057de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057e0:	b111      	cbz	r1, 80057e8 <_reclaim_reent+0x40>
 80057e2:	4620      	mov	r0, r4
 80057e4:	f7ff ff86 	bl	80056f4 <_free_r>
 80057e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80057ea:	b111      	cbz	r1, 80057f2 <_reclaim_reent+0x4a>
 80057ec:	4620      	mov	r0, r4
 80057ee:	f7ff ff81 	bl	80056f4 <_free_r>
 80057f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80057f4:	b111      	cbz	r1, 80057fc <_reclaim_reent+0x54>
 80057f6:	4620      	mov	r0, r4
 80057f8:	f7ff ff7c 	bl	80056f4 <_free_r>
 80057fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80057fe:	b111      	cbz	r1, 8005806 <_reclaim_reent+0x5e>
 8005800:	4620      	mov	r0, r4
 8005802:	f7ff ff77 	bl	80056f4 <_free_r>
 8005806:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005808:	b111      	cbz	r1, 8005810 <_reclaim_reent+0x68>
 800580a:	4620      	mov	r0, r4
 800580c:	f7ff ff72 	bl	80056f4 <_free_r>
 8005810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005812:	b111      	cbz	r1, 800581a <_reclaim_reent+0x72>
 8005814:	4620      	mov	r0, r4
 8005816:	f7ff ff6d 	bl	80056f4 <_free_r>
 800581a:	69a3      	ldr	r3, [r4, #24]
 800581c:	b1e3      	cbz	r3, 8005858 <_reclaim_reent+0xb0>
 800581e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005820:	4620      	mov	r0, r4
 8005822:	4798      	blx	r3
 8005824:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005826:	b1b9      	cbz	r1, 8005858 <_reclaim_reent+0xb0>
 8005828:	4620      	mov	r0, r4
 800582a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800582e:	f7ff bfad 	b.w	800578c <cleanup_glue>
 8005832:	5949      	ldr	r1, [r1, r5]
 8005834:	b941      	cbnz	r1, 8005848 <_reclaim_reent+0xa0>
 8005836:	3504      	adds	r5, #4
 8005838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800583a:	2d80      	cmp	r5, #128	; 0x80
 800583c:	68d9      	ldr	r1, [r3, #12]
 800583e:	d1f8      	bne.n	8005832 <_reclaim_reent+0x8a>
 8005840:	4620      	mov	r0, r4
 8005842:	f7ff ff57 	bl	80056f4 <_free_r>
 8005846:	e7ba      	b.n	80057be <_reclaim_reent+0x16>
 8005848:	680e      	ldr	r6, [r1, #0]
 800584a:	4620      	mov	r0, r4
 800584c:	f7ff ff52 	bl	80056f4 <_free_r>
 8005850:	4631      	mov	r1, r6
 8005852:	e7ef      	b.n	8005834 <_reclaim_reent+0x8c>
 8005854:	2500      	movs	r5, #0
 8005856:	e7ef      	b.n	8005838 <_reclaim_reent+0x90>
 8005858:	bd70      	pop	{r4, r5, r6, pc}
 800585a:	bf00      	nop
 800585c:	20000010 	.word	0x20000010

08005860 <__malloc_lock>:
 8005860:	4801      	ldr	r0, [pc, #4]	; (8005868 <__malloc_lock+0x8>)
 8005862:	f7ff bf2f 	b.w	80056c4 <__retarget_lock_acquire_recursive>
 8005866:	bf00      	nop
 8005868:	20002e28 	.word	0x20002e28

0800586c <__malloc_unlock>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__malloc_unlock+0x8>)
 800586e:	f7ff bf2a 	b.w	80056c6 <__retarget_lock_release_recursive>
 8005872:	bf00      	nop
 8005874:	20002e28 	.word	0x20002e28

08005878 <_init>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr

08005884 <_fini>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr
