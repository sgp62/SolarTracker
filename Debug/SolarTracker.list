
SolarTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f64  08005f64  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f6c  08005f6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dc8  20000074  08005fe8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e3c  08005fe8  00022e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad9b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003431  00000000  00000000  0003ae3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  0003f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f6e  00000000  00000000  00040d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018827  00000000  00000000  00044c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e3c  00000000  00000000  0005d4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001342e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb0  00000000  00000000  0013433c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e48 	.word	0x08005e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005e48 	.word	0x08005e48

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <vApplicationGetIdleTaskMemory+0x30>)
 80004fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000090 	.word	0x20000090
 8000518:	20000144 	.word	0x20000144

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b5b0      	push	{r4, r5, r7, lr}
 800051e:	b092      	sub	sp, #72	; 0x48
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fbc8 	bl	8000cb6 <HAL_Init>
  /* USER CODE BEGIN Init */
//  BSP_LED_Init(LED3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f86d 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f91f 	bl	800076c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800052e:	f000 f8ed 	bl	800070c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000532:	f000 f8ad 	bl	8000690 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 7, 6);
 8000536:	2206      	movs	r2, #6
 8000538:	2107      	movs	r1, #7
 800053a:	2025      	movs	r0, #37	; 0x25
 800053c:	f000 fcac 	bl	8000e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 8000540:	2025      	movs	r0, #37	; 0x25
 8000542:	f000 fcc5 	bl	8000ed0 <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 8000546:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <main+0xc8>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <main+0xc8>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SPI_sem */
  osSemaphoreDef(SPI_sem);
 8000552:	2300      	movs	r3, #0
 8000554:	643b      	str	r3, [r7, #64]	; 0x40
 8000556:	2300      	movs	r3, #0
 8000558:	647b      	str	r3, [r7, #68]	; 0x44
  SPI_semHandle = osSemaphoreCreate(osSemaphore(SPI_sem), 1);
 800055a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800055e:	2101      	movs	r1, #1
 8000560:	4618      	mov	r0, r3
 8000562:	f002 ffc5 	bl	80034f0 <osSemaphoreCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a1f      	ldr	r2, [pc, #124]	; (80005e8 <main+0xcc>)
 800056a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_sem */
  osSemaphoreDef(UART_sem);
 800056c:	2300      	movs	r3, #0
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000570:	2300      	movs	r3, #0
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  UART_semHandle = osSemaphoreCreate(osSemaphore(UART_sem), 1);
 8000574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f002 ffb8 	bl	80034f0 <osSemaphoreCreate>
 8000580:	4603      	mov	r3, r0
 8000582:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <main+0xd0>)
 8000584:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 8000586:	2200      	movs	r2, #0
 8000588:	2164      	movs	r1, #100	; 0x64
 800058a:	2002      	movs	r0, #2
 800058c:	f003 f984 	bl	8003898 <xQueueGenericCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <main+0xd4>)
 8000594:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, uartTaskFunc, osPriorityNormal, 0, 512);
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <main+0xd8>)
 8000598:	f107 041c 	add.w	r4, r7, #28
 800059c:	461d      	mov	r5, r3
 800059e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 ff3d 	bl	8003430 <osThreadCreate>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0f      	ldr	r2, [pc, #60]	; (80005f8 <main+0xdc>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiTask */
  osThreadDef(spiTask, spiTaskFunc, osPriorityNormal, 0, 512);
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <main+0xe0>)
 80005be:	463c      	mov	r4, r7
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spiTaskHandle = osThreadCreate(osThread(spiTask), NULL);
 80005ce:	463b      	mov	r3, r7
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 ff2c 	bl	8003430 <osThreadCreate>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <main+0xe4>)
 80005dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005de:	f002 ff20 	bl	8003422 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0xc6>
 80005e4:	40013800 	.word	0x40013800
 80005e8:	20000440 	.word	0x20000440
 80005ec:	20000444 	.word	0x20000444
 80005f0:	200004ac 	.word	0x200004ac
 80005f4:	08005e74 	.word	0x08005e74
 80005f8:	20000438 	.word	0x20000438
 80005fc:	08005e90 	.word	0x08005e90
 8000600:	2000043c 	.word	0x2000043c

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2244      	movs	r2, #68	; 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fb4e 	bl	8005cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000626:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062a:	f000 fdef 	bl	800120c <HAL_PWREx_ControlVoltageScaling>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000634:	f000 f9c6 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000638:	2310      	movs	r3, #16
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fe31 	bl	80012b8 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800065c:	f000 f9b2 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	463b      	mov	r3, r7
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fa31 	bl	8001ae0 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000684:	f000 f99e 	bl	80009c4 <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3758      	adds	r7, #88	; 0x58
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_SPI1_Init+0x74>)
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <MX_SPI1_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_SPI1_Init+0x74>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_SPI1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_SPI1_Init+0x74>)
 80006aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_SPI1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_SPI1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_SPI1_Init+0x74>)
 80006be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_SPI1_Init+0x74>)
 80006c6:	2228      	movs	r2, #40	; 0x28
 80006c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_SPI1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_SPI1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_SPI1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_SPI1_Init+0x74>)
 80006de:	2207      	movs	r2, #7
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_SPI1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_SPI1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_SPI1_Init+0x74>)
 80006f0:	f001 ff34 	bl	800255c <HAL_SPI_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 f963 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000350 	.word	0x20000350
 8000708:	40013000 	.word	0x40013000

0800070c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART1_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000718:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART1_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART1_UART_Init+0x58>)
 8000750:	f002 fa26 	bl	8002ba0 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 f933 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200003b4 	.word	0x200003b4
 8000768:	40013800 	.word	0x40013800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_GPIO_Init+0x5c>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000784:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <MX_GPIO_Init+0x5c>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_GPIO_Init+0x5c>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f000 fd0e 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a4:	2310      	movs	r3, #16
 80007a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f000 fb96 	bl	8000eec <HAL_GPIO_Init>

}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000

080007cc <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <USART1_IRQHandler+0xc4>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <USART1_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <USART1_IRQHandler+0xc4>)
 80007e4:	2208      	movs	r2, #8
 80007e6:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <USART1_IRQHandler+0xc4>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <USART1_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <USART1_IRQHandler+0xc4>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <USART1_IRQHandler+0xc4>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <USART1_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <USART1_IRQHandler+0xc4>)
 8000808:	2202      	movs	r2, #2
 800080a:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <USART1_IRQHandler+0xc4>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f003 0320 	and.w	r3, r3, #32
 8000814:	2b00      	cmp	r3, #0
 8000816:	d036      	beq.n	8000886 <USART1_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <USART1_IRQHandler+0xc4>)
 800081a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800081c:	b29b      	uxth	r3, r3
 800081e:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	2b0d      	cmp	r3, #13
 8000824:	d002      	beq.n	800082c <USART1_IRQHandler+0x60>
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b0a      	cmp	r3, #10
 800082a:	d119      	bne.n	8000860 <USART1_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <USART1_IRQHandler+0xc8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d028      	beq.n	8000886 <USART1_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <USART1_IRQHandler+0xc8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1c5a      	adds	r2, r3, #1
 800083a:	4916      	ldr	r1, [pc, #88]	; (8000894 <USART1_IRQHandler+0xc8>)
 800083c:	600a      	str	r2, [r1, #0]
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <USART1_IRQHandler+0xcc>)
 8000840:	2100      	movs	r1, #0
 8000842:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <USART1_IRQHandler+0xd0>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	463a      	mov	r2, r7
 800084a:	2300      	movs	r3, #0
 800084c:	4912      	ldr	r1, [pc, #72]	; (8000898 <USART1_IRQHandler+0xcc>)
 800084e:	f003 f9e5 	bl	8003c1c <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <USART1_IRQHandler+0xc8>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <USART1_IRQHandler+0xd4>)
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 800085e:	e012      	b.n	8000886 <USART1_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b24      	cmp	r3, #36	; 0x24
 8000864:	d003      	beq.n	800086e <USART1_IRQHandler+0xa2>
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <USART1_IRQHandler+0xc8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2bc8      	cmp	r3, #200	; 0xc8
 800086c:	d102      	bne.n	8000874 <USART1_IRQHandler+0xa8>
				rx_index = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <USART1_IRQHandler+0xc8>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <USART1_IRQHandler+0xc8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	4906      	ldr	r1, [pc, #24]	; (8000894 <USART1_IRQHandler+0xc8>)
 800087c:	600a      	str	r2, [r1, #0]
 800087e:	4906      	ldr	r1, [pc, #24]	; (8000898 <USART1_IRQHandler+0xcc>)
 8000880:	79fa      	ldrb	r2, [r7, #7]
 8000882:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8000884:	e7ff      	b.n	8000886 <USART1_IRQHandler+0xba>
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40013800 	.word	0x40013800
 8000894:	200004b0 	.word	0x200004b0
 8000898:	200004b4 	.word	0x200004b4
 800089c:	200004ac 	.word	0x200004ac
 80008a0:	20000344 	.word	0x20000344

080008a4 <uartTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_uartTaskFunc */
void uartTaskFunc(void const * argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	static uint8_t valid_count = 0;

  /* Infinite loop */
  for(;;)
  {
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <uartTaskFunc+0xa8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fc3b 	bl	800412c <uxQueueMessagesWaitingFromISR>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0f7      	beq.n	80008ac <uartTaskFunc+0x8>
	  {
		  if(valid_count == 0) {
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <uartTaskFunc+0xac>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d106      	bne.n	80008d2 <uartTaskFunc+0x2e>
			  //osSemaphoreAcquire(UART_semHandle, osWaitForever); //Grab semaphore for new message
			  xSemaphoreTake(UART_semHandle, portMAX_DELAY);
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <uartTaskFunc+0xb0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f04f 31ff 	mov.w	r1, #4294967295
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fb21 	bl	8003f14 <xQueueSemaphoreTake>
		  }

	      xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <uartTaskFunc+0xa8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2201      	movs	r2, #1
 80008d8:	491f      	ldr	r1, [pc, #124]	; (8000958 <uartTaskFunc+0xb4>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fa3a 	bl	8003d54 <xQueueReceive>
	      valid_count++;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <uartTaskFunc+0xac>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <uartTaskFunc+0xac>)
 80008ea:	701a      	strb	r2, [r3, #0]
	      //Fill and check header
	      for(int c = 0; c < 6; c++){
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	e00b      	b.n	800090a <uartTaskFunc+0x66>
	    	  nmea_header[c] = SerialBufferReceived.Buffer[c];
 80008f2:	4a19      	ldr	r2, [pc, #100]	; (8000958 <uartTaskFunc+0xb4>)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4413      	add	r3, r2
 80008f8:	7819      	ldrb	r1, [r3, #0]
 80008fa:	4a18      	ldr	r2, [pc, #96]	; (800095c <uartTaskFunc+0xb8>)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	460a      	mov	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
	      for(int c = 0; c < 6; c++){
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	3301      	adds	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2b05      	cmp	r3, #5
 800090e:	ddf0      	ble.n	80008f2 <uartTaskFunc+0x4e>
	      }
	      if(!strcmp(nmea_header, "$GPRMC")){
 8000910:	4913      	ldr	r1, [pc, #76]	; (8000960 <uartTaskFunc+0xbc>)
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <uartTaskFunc+0xb8>)
 8000914:	f7ff fc5c 	bl	80001d0 <strcmp>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d111      	bne.n	8000942 <uartTaskFunc+0x9e>
		      if(SerialBufferReceived.Buffer[18] == 'A'){
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <uartTaskFunc+0xb4>)
 8000920:	7c9b      	ldrb	r3, [r3, #18]
 8000922:	2b41      	cmp	r3, #65	; 0x41
 8000924:	d10d      	bne.n	8000942 <uartTaskFunc+0x9e>
		    	  //Got a fix0000
		    	  if(valid_count >= 47){ //Length of NMEA message
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <uartTaskFunc+0xac>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b2e      	cmp	r3, #46	; 0x2e
 800092c:	d909      	bls.n	8000942 <uartTaskFunc+0x9e>
			    	  valid_count = 0;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <uartTaskFunc+0xac>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
			    	  //Post SPI write semaphore when received full valid message
			    	  //osSemaphoreRelease(SPI_semHandle);
			    	  xSemaphoreGive(SPI_semHandle);
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <uartTaskFunc+0xc0>)
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	2300      	movs	r3, #0
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	f003 f86f 	bl	8003a20 <xQueueGenericSend>
		    	  }
		      }
	      }
	      got_nmea=0;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <uartTaskFunc+0xc4>)
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8000948:	e7b0      	b.n	80008ac <uartTaskFunc+0x8>
 800094a:	bf00      	nop
 800094c:	200004ac 	.word	0x200004ac
 8000950:	2000057d 	.word	0x2000057d
 8000954:	20000444 	.word	0x20000444
 8000958:	20000448 	.word	0x20000448
 800095c:	20000348 	.word	0x20000348
 8000960:	08005eac 	.word	0x08005eac
 8000964:	20000440 	.word	0x20000440
 8000968:	20000344 	.word	0x20000344

0800096c <spiTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spiTaskFunc */
void spiTaskFunc(void const * argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spiTaskFunc */
  /* Infinite loop */
  for(;;)
  {
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
	  xSemaphoreTake(SPI_semHandle, portMAX_DELAY);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <spiTaskFunc+0x2c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	4618      	mov	r0, r3
 800097e:	f003 fac9 	bl	8003f14 <xQueueSemaphoreTake>
	  osDelay(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f002 fda0 	bl	80034c8 <osDelay>
	  //Send over SPI to FRAM

	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data
	  xSemaphoreGive(UART_semHandle);
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <spiTaskFunc+0x30>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	f003 f845 	bl	8003a20 <xQueueGenericSend>
	  xSemaphoreTake(SPI_semHandle, portMAX_DELAY);
 8000996:	e7ed      	b.n	8000974 <spiTaskFunc+0x8>
 8000998:	20000440 	.word	0x20000440
 800099c:	20000444 	.word	0x20000444

080009a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b2:	f000 f999 	bl	8000ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40012c00 	.word	0x40012c00

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_MspInit+0x4c>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	; 0x60
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	210f      	movs	r1, #15
 8000a0a:	f06f 0001 	mvn.w	r0, #1
 8000a0e:	f000 fa43 	bl	8000e98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_SPI_MspInit+0x7c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d128      	bne.n	8000a94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a42:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <HAL_SPI_MspInit+0x80>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	4a16      	ldr	r2, [pc, #88]	; (8000aa0 <HAL_SPI_MspInit+0x80>)
 8000a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <HAL_SPI_MspInit+0x80>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_SPI_MspInit+0x80>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <HAL_SPI_MspInit+0x80>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_SPI_MspInit+0x80>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a72:	23c2      	movs	r3, #194	; 0xc2
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a82:	2305      	movs	r3, #5
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a90:	f000 fa2c 	bl	8000eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013000 	.word	0x40013000
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09e      	sub	sp, #120	; 0x78
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2254      	movs	r2, #84	; 0x54
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 f8f5 	bl	8005cb4 <memset>
  if(huart->Instance==USART1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <HAL_UART_MspInit+0xa8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d137      	bne.n	8000b44 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fa53 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aec:	f7ff ff6a 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af4:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6613      	str	r3, [r2, #96]	; 0x60
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b24:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b32:	2307      	movs	r3, #7
 8000b34:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f000 f9d4 	bl	8000eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3778      	adds	r7, #120	; 0x78
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08c      	sub	sp, #48	; 0x30
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2019      	movs	r0, #25
 8000b6a:	f000 f995 	bl	8000e98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b6e:	2019      	movs	r0, #25
 8000b70:	f000 f9ae 	bl	8000ed0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_InitTick+0x9c>)
 8000b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_InitTick+0x9c>)
 8000b7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b7e:	6613      	str	r3, [r2, #96]	; 0x60
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_InitTick+0x9c>)
 8000b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 f966 	bl	8001e68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b9c:	f001 f94e 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8000ba0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba4:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_InitTick+0xa0>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	0c9b      	lsrs	r3, r3, #18
 8000bac:	3b01      	subs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_InitTick+0xa8>)
 8000bb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bd0:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bd2:	f001 fd66 	bl	80026a2 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d104      	bne.n	8000be6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bdc:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_InitTick+0xa4>)
 8000bde:	f001 fdc1 	bl	8002764 <HAL_TIM_Base_Start_IT>
 8000be2:	4603      	mov	r3, r0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	20000580 	.word	0x20000580
 8000bfc:	40012c00 	.word	0x40012c00

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c32:	f001 fdeb 	bl	800280c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000580 	.word	0x20000580

08000c40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c68:	f7ff ffea 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c92:	f004 ffdb 	bl	8005c4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c96:	f7ff fc41 	bl	800051c <main>

08000c9a <LoopForever>:

LoopForever:
    b LoopForever
 8000c9a:	e7fe      	b.n	8000c9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ca8:	08005f74 	.word	0x08005f74
  ldr r2, =_sbss
 8000cac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cb0:	20002e3c 	.word	0x20002e3c

08000cb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_IRQHandler>

08000cb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8de 	bl	8000e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f7ff ff44 	bl	8000b54 <HAL_InitTick>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	e001      	b.n	8000cdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd8:	f7ff fe7a 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200005cc 	.word	0x200005cc

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200005cc 	.word	0x200005cc

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff4c 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eaa:	f7ff ff61 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	6978      	ldr	r0, [r7, #20]
 8000eb6:	f7ff ffb1 	bl	8000e1c <NVIC_EncodePriority>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff80 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff54 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	e148      	b.n	800118e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	2101      	movs	r1, #1
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 813a 	beq.w	8001188 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d005      	beq.n	8000f2c <HAL_GPIO_Init+0x40>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d130      	bne.n	8000f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	f003 0201 	and.w	r2, r3, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d017      	beq.n	8000fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d123      	bne.n	800101e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	6939      	ldr	r1, [r7, #16]
 800101a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0203 	and.w	r2, r3, #3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 8094 	beq.w	8001188 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	4b52      	ldr	r3, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6613      	str	r3, [r2, #96]	; 0x60
 800106c:	4b4f      	ldr	r3, [pc, #316]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001078:	4a4d      	ldr	r2, [pc, #308]	; (80011b0 <HAL_GPIO_Init+0x2c4>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010a2:	d00d      	beq.n	80010c0 <HAL_GPIO_Init+0x1d4>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a43      	ldr	r2, [pc, #268]	; (80011b4 <HAL_GPIO_Init+0x2c8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0x1d0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a42      	ldr	r2, [pc, #264]	; (80011b8 <HAL_GPIO_Init+0x2cc>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d101      	bne.n	80010b8 <HAL_GPIO_Init+0x1cc>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e004      	b.n	80010c2 <HAL_GPIO_Init+0x1d6>
 80010b8:	2307      	movs	r3, #7
 80010ba:	e002      	b.n	80010c2 <HAL_GPIO_Init+0x1d6>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <HAL_GPIO_Init+0x1d6>
 80010c0:	2300      	movs	r3, #0
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	f002 0203 	and.w	r2, r2, #3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4093      	lsls	r3, r2
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010d2:	4937      	ldr	r1, [pc, #220]	; (80011b0 <HAL_GPIO_Init+0x2c4>)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001104:	4a2d      	ldr	r2, [pc, #180]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800112e:	4a23      	ldr	r2, [pc, #140]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001158:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_GPIO_Init+0x2d0>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	f47f aeaf 	bne.w	8000efc <HAL_GPIO_Init+0x10>
  }
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	371c      	adds	r7, #28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	48000400 	.word	0x48000400
 80011b8:	48000800 	.word	0x48000800
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40007000 	.word	0x40007000

0800120c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800121a:	d130      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001228:	d038      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2232      	movs	r2, #50	; 0x32
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001250:	e002      	b.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001264:	d102      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f2      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001278:	d110      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e00f      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	d007      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000
 80012b0:	20000000 	.word	0x20000000
 80012b4:	431bde83 	.word	0x431bde83

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f000 bc02 	b.w	8001ad0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012cc:	4b96      	ldr	r3, [pc, #600]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d6:	4b94      	ldr	r3, [pc, #592]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80e4 	beq.w	80014b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_RCC_OscConfig+0x4c>
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b0c      	cmp	r3, #12
 80012f8:	f040 808b 	bne.w	8001412 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	f040 8087 	bne.w	8001412 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001304:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_OscConfig+0x64>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e3d9      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_RCC_OscConfig+0x7e>
 800132c:	4b7e      	ldr	r3, [pc, #504]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001334:	e005      	b.n	8001342 <HAL_RCC_OscConfig+0x8a>
 8001336:	4b7c      	ldr	r3, [pc, #496]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001342:	4293      	cmp	r3, r2
 8001344:	d223      	bcs.n	800138e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fdbe 	bl	8001ecc <RCC_SetFlashLatencyFromMSIRange>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e3ba      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800135a:	4b73      	ldr	r3, [pc, #460]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a72      	ldr	r2, [pc, #456]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	496d      	ldr	r1, [pc, #436]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001378:	4b6b      	ldr	r3, [pc, #428]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	4968      	ldr	r1, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
 800138c:	e025      	b.n	80013da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138e:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4960      	ldr	r1, [pc, #384]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ac:	4b5e      	ldr	r3, [pc, #376]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	495b      	ldr	r1, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fd7e 	bl	8001ecc <RCC_SetFlashLatencyFromMSIRange>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e37a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013da:	f000 fc81 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 80013de:	4602      	mov	r2, r0
 80013e0:	4b51      	ldr	r3, [pc, #324]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4950      	ldr	r1, [pc, #320]	; (800152c <HAL_RCC_OscConfig+0x274>)
 80013ec:	5ccb      	ldrb	r3, [r1, r3]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	fa22 f303 	lsr.w	r3, r2, r3
 80013f6:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_RCC_OscConfig+0x278>)
 80013f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013fa:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fba8 	bl	8000b54 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d052      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	e35e      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d032      	beq.n	8001480 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800141a:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a42      	ldr	r2, [pc, #264]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001426:	f7ff fc73 	bl	8000d10 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142e:	f7ff fc6f 	bl	8000d10 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e347      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a35      	ldr	r2, [pc, #212]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4930      	ldr	r1, [pc, #192]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800146a:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	492b      	ldr	r1, [pc, #172]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e01a      	b.n	80014b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a28      	ldr	r2, [pc, #160]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148c:	f7ff fc40 	bl	8000d10 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001494:	f7ff fc3c 	bl	8000d10 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e314      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x1dc>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d073      	beq.n	80015aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_OscConfig+0x21c>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0c      	cmp	r3, #12
 80014cc:	d10e      	bne.n	80014ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d10b      	bne.n	80014ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d063      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d15f      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e2f1      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x24c>
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e025      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150c:	d114      	bne.n	8001538 <HAL_RCC_OscConfig+0x280>
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a02      	ldr	r2, [pc, #8]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e013      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001528:	40021000 	.word	0x40021000
 800152c:	08005ebc 	.word	0x08005ebc
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
 8001538:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a9f      	ldr	r2, [pc, #636]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b9d      	ldr	r3, [pc, #628]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a9c      	ldr	r2, [pc, #624]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fbda 	bl	8000d10 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fbd6 	bl	8000d10 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e2ae      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4b92      	ldr	r3, [pc, #584]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2a8>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fbc6 	bl	8000d10 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fbc2 	bl	8000d10 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e29a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4b88      	ldr	r3, [pc, #544]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d060      	beq.n	8001678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x310>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d116      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	4b7c      	ldr	r3, [pc, #496]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x328>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e277      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b76      	ldr	r3, [pc, #472]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	4973      	ldr	r1, [pc, #460]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	e040      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fb81 	bl	8000d10 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fb7d 	bl	8000d10 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e255      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	4b65      	ldr	r3, [pc, #404]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	495f      	ldr	r1, [pc, #380]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a5c      	ldr	r2, [pc, #368]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800164c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fb5d 	bl	8000d10 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fb59 	bl	8000d10 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e231      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03c      	beq.n	80016fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168c:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001692:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fb38 	bl	8000d10 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fb34 	bl	8000d10 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e20c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3ec>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b3d      	ldr	r3, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016cc:	4a3b      	ldr	r2, [pc, #236]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb1b 	bl	8000d10 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fb17 	bl	8000d10 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1ef      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001710:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	; 0x58
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d118      	bne.n	8001776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001750:	f7ff fade 	bl	8000d10 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff fada 	bl	8000d10 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1b2      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_RCC_OscConfig+0x508>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x4d8>
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178e:	e029      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_OscConfig+0x50c>
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_RCC_OscConfig+0x504>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	4b9a      	ldr	r3, [pc, #616]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a99      	ldr	r2, [pc, #612]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d4:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a95      	ldr	r2, [pc, #596]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d016      	beq.n	800181a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff fa90 	bl	8000d10 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fa8c 	bl	8000d10 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e162      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	4b89      	ldr	r3, [pc, #548]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ed      	beq.n	80017f4 <HAL_RCC_OscConfig+0x53c>
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fa79 	bl	8000d10 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff fa75 	bl	8000d10 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e14b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	4b7d      	ldr	r3, [pc, #500]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ed      	bne.n	8001822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a77      	ldr	r2, [pc, #476]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d03c      	beq.n	80018de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800186c:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 800186e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001872:	4a6f      	ldr	r2, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fa48 	bl	8000d10 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001884:	f7ff fa44 	bl	8000d10 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e11c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001896:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 8001898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ef      	beq.n	8001884 <HAL_RCC_OscConfig+0x5cc>
 80018a4:	e01b      	b.n	80018de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018a6:	4b62      	ldr	r3, [pc, #392]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80018a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ac:	4a60      	ldr	r2, [pc, #384]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b6:	f7ff fa2b 	bl	8000d10 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018be:	f7ff fa27 	bl	8000d10 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0ff      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d0:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80018d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1ef      	bne.n	80018be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80f3 	beq.w	8001ace <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	f040 80c9 	bne.w	8001a84 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018f2:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0203 	and.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	429a      	cmp	r2, r3
 8001904:	d12c      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	3b01      	subs	r3, #1
 8001912:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d123      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001922:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d11b      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d113      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d109      	bne.n	8001960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d06b      	beq.n	8001a38 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d062      	beq.n	8001a2c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0ac      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a2d      	ldr	r2, [pc, #180]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 800197c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001980:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001982:	f7ff f9c5 	bl	8000d10 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff f9c1 	bl	8000d10 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e099      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199c:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_RCC_OscConfig+0x77c>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019b8:	3a01      	subs	r2, #1
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	4311      	orrs	r1, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019c2:	0212      	lsls	r2, r2, #8
 80019c4:	4311      	orrs	r1, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ca:	0852      	lsrs	r2, r2, #1
 80019cc:	3a01      	subs	r2, #1
 80019ce:	0552      	lsls	r2, r2, #21
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019d6:	0852      	lsrs	r2, r2, #1
 80019d8:	3a01      	subs	r2, #1
 80019da:	0652      	lsls	r2, r2, #25
 80019dc:	4311      	orrs	r1, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019e2:	06d2      	lsls	r2, r2, #27
 80019e4:	430a      	orrs	r2, r1
 80019e6:	4912      	ldr	r1, [pc, #72]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 80019fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a04:	f7ff f984 	bl	8000d10 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0c:	f7ff f980 	bl	8000d10 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e058      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <HAL_RCC_OscConfig+0x778>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2a:	e050      	b.n	8001ace <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e04f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
 8001a30:	40021000 	.word	0x40021000
 8001a34:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d144      	bne.n	8001ace <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a5c:	f7ff f958 	bl	8000d10 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f954 	bl	8000d10 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e02c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x7ac>
 8001a82:	e024      	b.n	8001ace <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d01f      	beq.n	8001aca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f93b 	bl	8000d10 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f937 	bl	8000d10 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e00f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	4905      	ldr	r1, [pc, #20]	; (8001ad8 <HAL_RCC_OscConfig+0x820>)
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_RCC_OscConfig+0x824>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
 8001ac8:	e001      	b.n	8001ace <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3720      	adds	r7, #32
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	feeefffc 	.word	0xfeeefffc

08001ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0e7      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_ClockConfig+0x1ec>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <HAL_RCC_ClockConfig+0x1ec>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	4970      	ldr	r1, [pc, #448]	; (8001ccc <HAL_RCC_ClockConfig+0x1ec>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <HAL_RCC_ClockConfig+0x1ec>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0cf      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d908      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4960      	ldr	r1, [pc, #384]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d04c      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b5a      	ldr	r3, [pc, #360]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d121      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0a6      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7e:	4b54      	ldr	r3, [pc, #336]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e09a      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b96:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e08e      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e086      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 0203 	bic.w	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4943      	ldr	r1, [pc, #268]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc8:	f7ff f8a2 	bl	8000d10 <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7ff f89e 	bl	8000d10 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e06e      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 020c 	and.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1eb      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d010      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d208      	bcs.n	8001c26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c14:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	492b      	ldr	r1, [pc, #172]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c26:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_RCC_ClockConfig+0x1ec>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d210      	bcs.n	8001c56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_RCC_ClockConfig+0x1ec>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 0207 	bic.w	r2, r3, #7
 8001c3c:	4923      	ldr	r1, [pc, #140]	; (8001ccc <HAL_RCC_ClockConfig+0x1ec>)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_ClockConfig+0x1ec>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e036      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d008      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	4918      	ldr	r1, [pc, #96]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4910      	ldr	r1, [pc, #64]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c94:	f000 f824 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	490b      	ldr	r1, [pc, #44]	; (8001cd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb0:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1fc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe ff4b 	bl	8000b54 <HAL_InitTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08005ebc 	.word	0x08005ebc
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cee:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x34>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d121      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d11e      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e005      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d3c:	4a2b      	ldr	r2, [pc, #172]	; (8001dec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10d      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d102      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	e004      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d134      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d003      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0xac>
 8001d84:	e005      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d88:	617b      	str	r3, [r7, #20]
      break;
 8001d8a:	e005      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d8e:	617b      	str	r3, [r7, #20]
      break;
 8001d90:	e002      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	617b      	str	r3, [r7, #20]
      break;
 8001d96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	3301      	adds	r3, #1
 8001da4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	0a1b      	lsrs	r3, r3, #8
 8001dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	fb03 f202 	mul.w	r2, r3, r2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	0e5b      	lsrs	r3, r3, #25
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08005ed4 	.word	0x08005ed4
 8001df0:	00f42400 	.word	0x00f42400
 8001df4:	007a1200 	.word	0x007a1200

08001df8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000

08001e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e14:	f7ff fff0 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	4904      	ldr	r1, [pc, #16]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08005ecc 	.word	0x08005ecc

08001e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e40:	f7ff ffda 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0adb      	lsrs	r3, r3, #11
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4904      	ldr	r1, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08005ecc 	.word	0x08005ecc

08001e68 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	220f      	movs	r2, #15
 8001e76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_RCC_GetClockConfig+0x60>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0207 	and.w	r2, r3, #7
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	601a      	str	r2, [r3, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40022000 	.word	0x40022000

08001ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ee4:	f7ff f984 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001ee8:	6178      	str	r0, [r7, #20]
 8001eea:	e014      	b.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f04:	f7ff f974 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001f08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f1c:	d10b      	bne.n	8001f36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d919      	bls.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2ba0      	cmp	r3, #160	; 0xa0
 8001f28:	d902      	bls.n	8001f30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e013      	b.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	e010      	b.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d902      	bls.n	8001f42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	e00a      	b.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b80      	cmp	r3, #128	; 0x80
 8001f46:	d102      	bne.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f48:	2302      	movs	r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	e004      	b.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b70      	cmp	r3, #112	; 0x70
 8001f52:	d101      	bne.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0207 	bic.w	r2, r3, #7
 8001f60:	4909      	ldr	r1, [pc, #36]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40022000 	.word	0x40022000

08001f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f94:	2300      	movs	r3, #0
 8001f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f98:	2300      	movs	r3, #0
 8001f9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d031      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fb0:	d01a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001fb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fb6:	d814      	bhi.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4a5c      	ldr	r2, [pc, #368]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fce:	e00c      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f9ce 	bl	8002378 <RCCEx_PLLSAI1_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fe0:	e003      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fe6:	e000      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10b      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff0:	4b51      	ldr	r3, [pc, #324]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	494e      	ldr	r1, [pc, #312]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002006:	e001      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 809e 	beq.w	8002156 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800201e:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00d      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002034:	4b40      	ldr	r3, [pc, #256]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	4a3f      	ldr	r2, [pc, #252]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203e:	6593      	str	r3, [r2, #88]	; 0x58
 8002040:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204c:	2301      	movs	r3, #1
 800204e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002050:	4b3a      	ldr	r3, [pc, #232]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a39      	ldr	r2, [pc, #228]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800205c:	f7fe fe58 	bl	8000d10 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002062:	e009      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7fe fe54 	bl	8000d10 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d902      	bls.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	74fb      	strb	r3, [r7, #19]
        break;
 8002076:	e005      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002078:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ef      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d15a      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002094:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01e      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d019      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020a6:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	4a1b      	ldr	r2, [pc, #108]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d016      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe fe14 	bl	8000d10 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ea:	e00b      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe fe10 	bl	8000d10 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d902      	bls.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	74fb      	strb	r3, [r7, #19]
            break;
 8002102:	e006      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ec      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002126:	4904      	ldr	r1, [pc, #16]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800212e:	e009      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
 8002134:	e006      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002144:	7c7b      	ldrb	r3, [r7, #17]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b8a      	ldr	r3, [pc, #552]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	4a89      	ldr	r2, [pc, #548]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002162:	4b84      	ldr	r3, [pc, #528]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002168:	f023 0203 	bic.w	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4980      	ldr	r1, [pc, #512]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002184:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f023 020c 	bic.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	4978      	ldr	r1, [pc, #480]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	496f      	ldr	r1, [pc, #444]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	4967      	ldr	r1, [pc, #412]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021ea:	4b62      	ldr	r3, [pc, #392]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	495e      	ldr	r1, [pc, #376]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002212:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	4956      	ldr	r1, [pc, #344]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800222e:	4b51      	ldr	r3, [pc, #324]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	494d      	ldr	r1, [pc, #308]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d028      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002250:	4b48      	ldr	r3, [pc, #288]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4945      	ldr	r1, [pc, #276]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800226e:	d106      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002270:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227a:	60d3      	str	r3, [r2, #12]
 800227c:	e011      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002286:	d10c      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f872 	bl	8002378 <RCCEx_PLLSAI1_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d028      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	492d      	ldr	r1, [pc, #180]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022cc:	d106      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4a28      	ldr	r2, [pc, #160]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d8:	60d3      	str	r3, [r2, #12]
 80022da:	e011      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2101      	movs	r1, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f843 	bl	8002378 <RCCEx_PLLSAI1_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01c      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	4916      	ldr	r1, [pc, #88]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800232a:	d10c      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	2102      	movs	r1, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f820 	bl	8002378 <RCCEx_PLLSAI1_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002360:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002368:	7cbb      	ldrb	r3, [r7, #18]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000

08002378 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002386:	4b74      	ldr	r3, [pc, #464]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d018      	beq.n	80023c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002392:	4b71      	ldr	r3, [pc, #452]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0203 	and.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d10d      	bne.n	80023be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
       ||
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023aa:	4b6b      	ldr	r3, [pc, #428]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
       ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d047      	beq.n	800244e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	e044      	b.n	800244e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d018      	beq.n	80023fe <RCCEx_PLLSAI1_Config+0x86>
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d825      	bhi.n	800241c <RCCEx_PLLSAI1_Config+0xa4>
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d002      	beq.n	80023da <RCCEx_PLLSAI1_Config+0x62>
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d009      	beq.n	80023ec <RCCEx_PLLSAI1_Config+0x74>
 80023d8:	e020      	b.n	800241c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11d      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ea:	e01a      	b.n	8002422 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023ec:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d116      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023fc:	e013      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10f      	bne.n	800242a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800240a:	4b53      	ldr	r3, [pc, #332]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800241a:	e006      	b.n	800242a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      break;
 8002420:	e004      	b.n	800242c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002422:	bf00      	nop
 8002424:	e002      	b.n	800242c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242a:	bf00      	nop
    }

    if(status == HAL_OK)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002432:	4b49      	ldr	r3, [pc, #292]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	430b      	orrs	r3, r1
 8002448:	4943      	ldr	r1, [pc, #268]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d17c      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a3f      	ldr	r2, [pc, #252]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800245e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fc56 	bl	8000d10 <HAL_GetTick>
 8002464:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002466:	e009      	b.n	800247c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002468:	f7fe fc52 	bl	8000d10 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d902      	bls.n	800247c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	73fb      	strb	r3, [r7, #15]
        break;
 800247a:	e005      	b.n	8002488 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ef      	bne.n	8002468 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d15f      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d110      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800249c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6892      	ldr	r2, [r2, #8]
 80024a4:	0211      	lsls	r1, r2, #8
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	06d2      	lsls	r2, r2, #27
 80024ac:	430a      	orrs	r2, r1
 80024ae:	492a      	ldr	r1, [pc, #168]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	610b      	str	r3, [r1, #16]
 80024b4:	e027      	b.n	8002506 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d112      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6892      	ldr	r2, [r2, #8]
 80024cc:	0211      	lsls	r1, r2, #8
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6912      	ldr	r2, [r2, #16]
 80024d2:	0852      	lsrs	r2, r2, #1
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0552      	lsls	r2, r2, #21
 80024d8:	430a      	orrs	r2, r1
 80024da:	491f      	ldr	r1, [pc, #124]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	610b      	str	r3, [r1, #16]
 80024e0:	e011      	b.n	8002506 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6892      	ldr	r2, [r2, #8]
 80024f2:	0211      	lsls	r1, r2, #8
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6952      	ldr	r2, [r2, #20]
 80024f8:	0852      	lsrs	r2, r2, #1
 80024fa:	3a01      	subs	r2, #1
 80024fc:	0652      	lsls	r2, r2, #25
 80024fe:	430a      	orrs	r2, r1
 8002500:	4915      	ldr	r1, [pc, #84]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002510:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7fe fbfd 	bl	8000d10 <HAL_GetTick>
 8002516:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002518:	e009      	b.n	800252e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800251a:	f7fe fbf9 	bl	8000d10 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d902      	bls.n	800252e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	73fb      	strb	r3, [r7, #15]
          break;
 800252c:	e005      	b.n	800253a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0ef      	beq.n	800251a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4903      	ldr	r1, [pc, #12]	; (8002558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254a:	4313      	orrs	r3, r2
 800254c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e095      	b.n	800269a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	2b00      	cmp	r3, #0
 8002574:	d108      	bne.n	8002588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800257e:	d009      	beq.n	8002594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
 8002586:	e005      	b.n	8002594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fa36 	bl	8000a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025d4:	d902      	bls.n	80025dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e002      	b.n	80025e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80025ea:	d007      	beq.n	80025fc <HAL_SPI_Init+0xa0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025f4:	d002      	beq.n	80025fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	ea42 0103 	orr.w	r1, r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	f003 0204 	and.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002678:	ea42 0103 	orr.w	r1, r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e049      	b.n	8002748 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f841 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 f9db 	bl	8002a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d001      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e03b      	b.n	80027f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_TIM_Base_Start_IT+0x9c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_TIM_Base_Start_IT+0x4e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d004      	beq.n	80027b2 <HAL_TIM_Base_Start_IT+0x4e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_TIM_Base_Start_IT+0xa0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d115      	bne.n	80027de <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_TIM_Base_Start_IT+0xa4>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d015      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x8c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ca:	d011      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	e008      	b.n	80027f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e000      	b.n	80027f2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40014000 	.word	0x40014000
 8002808:	00010007 	.word	0x00010007

0800280c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b02      	cmp	r3, #2
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0202 	mvn.w	r2, #2
 8002838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f905 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8f7 	bl	8002a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f908 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d122      	bne.n	80028bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11b      	bne.n	80028bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0204 	mvn.w	r2, #4
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2202      	movs	r2, #2
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8db 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f8cd 	bl	8002a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8de 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d122      	bne.n	8002910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d11b      	bne.n	8002910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0208 	mvn.w	r2, #8
 80028e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f8b1 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f8a3 	bl	8002a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f8b4 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b10      	cmp	r3, #16
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b10      	cmp	r3, #16
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0210 	mvn.w	r2, #16
 8002934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2208      	movs	r2, #8
 800293a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f887 	bl	8002a5e <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f879 	bl	8002a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f88a 	bl	8002a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d107      	bne.n	8002990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0201 	mvn.w	r2, #1
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe f808 	bl	80009a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	2b80      	cmp	r3, #128	; 0x80
 800299c:	d10e      	bne.n	80029bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a8:	2b80      	cmp	r3, #128	; 0x80
 80029aa:	d107      	bne.n	80029bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8de 	bl	8002b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ca:	d10e      	bne.n	80029ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d107      	bne.n	80029ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f8d1 	bl	8002b8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d10e      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	d107      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f838 	bl	8002a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d10e      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d107      	bne.n	8002a42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f06f 0220 	mvn.w	r2, #32
 8002a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f891 	bl	8002b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <TIM_Base_SetConfig+0xbc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0x20>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d108      	bne.n	8002ace <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <TIM_Base_SetConfig+0xbc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <TIM_Base_SetConfig+0x52>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d007      	beq.n	8002aee <TIM_Base_SetConfig+0x52>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <TIM_Base_SetConfig+0xc0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_Base_SetConfig+0x52>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <TIM_Base_SetConfig+0xc4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d108      	bne.n	8002b00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <TIM_Base_SetConfig+0xbc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <TIM_Base_SetConfig+0xa0>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	; (8002b5c <TIM_Base_SetConfig+0xc0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0xa0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <TIM_Base_SetConfig+0xc4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d103      	bne.n	8002b44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	615a      	str	r2, [r3, #20]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40014000 	.word	0x40014000
 8002b60:	40014400 	.word	0x40014400

08002b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e040      	b.n	8002c34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fd ff6e 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2224      	movs	r2, #36	; 0x24
 8002bcc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f82c 	bl	8002c3c <UART_SetConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e022      	b.n	8002c34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa4c 	bl	8003094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fad3 	bl	80031d8 <UART_CheckIdleState>
 8002c32:	4603      	mov	r3, r0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c40:	b08a      	sub	sp, #40	; 0x28
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4bb4      	ldr	r3, [pc, #720]	; (8002f3c <UART_SetConfig+0x300>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4aa9      	ldr	r2, [pc, #676]	; (8002f40 <UART_SetConfig+0x304>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4aa0      	ldr	r2, [pc, #640]	; (8002f44 <UART_SetConfig+0x308>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d126      	bne.n	8002d14 <UART_SetConfig+0xd8>
 8002cc6:	4ba0      	ldr	r3, [pc, #640]	; (8002f48 <UART_SetConfig+0x30c>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d81b      	bhi.n	8002d0c <UART_SetConfig+0xd0>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <UART_SetConfig+0xa0>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cfd 	.word	0x08002cfd
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d05 	.word	0x08002d05
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cf2:	e080      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfa:	e07c      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d02:	e078      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002d04:	2308      	movs	r3, #8
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0a:	e074      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002d0c:	2310      	movs	r3, #16
 8002d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d12:	e070      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a8c      	ldr	r2, [pc, #560]	; (8002f4c <UART_SetConfig+0x310>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d138      	bne.n	8002d90 <UART_SetConfig+0x154>
 8002d1e:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <UART_SetConfig+0x30c>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d82d      	bhi.n	8002d88 <UART_SetConfig+0x14c>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <UART_SetConfig+0xf8>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08002d89 	.word	0x08002d89
 8002d3c:	08002d89 	.word	0x08002d89
 8002d40:	08002d89 	.word	0x08002d89
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002d89 	.word	0x08002d89
 8002d4c:	08002d89 	.word	0x08002d89
 8002d50:	08002d89 	.word	0x08002d89
 8002d54:	08002d71 	.word	0x08002d71
 8002d58:	08002d89 	.word	0x08002d89
 8002d5c:	08002d89 	.word	0x08002d89
 8002d60:	08002d89 	.word	0x08002d89
 8002d64:	08002d81 	.word	0x08002d81
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6e:	e042      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002d70:	2302      	movs	r3, #2
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	e03e      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002d78:	2304      	movs	r3, #4
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7e:	e03a      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002d80:	2308      	movs	r3, #8
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d86:	e036      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002d88:	2310      	movs	r3, #16
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8e:	e032      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a6a      	ldr	r2, [pc, #424]	; (8002f40 <UART_SetConfig+0x304>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d12a      	bne.n	8002df0 <UART_SetConfig+0x1b4>
 8002d9a:	4b6b      	ldr	r3, [pc, #428]	; (8002f48 <UART_SetConfig+0x30c>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002da8:	d01a      	beq.n	8002de0 <UART_SetConfig+0x1a4>
 8002daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dae:	d81b      	bhi.n	8002de8 <UART_SetConfig+0x1ac>
 8002db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db4:	d00c      	beq.n	8002dd0 <UART_SetConfig+0x194>
 8002db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dba:	d815      	bhi.n	8002de8 <UART_SetConfig+0x1ac>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <UART_SetConfig+0x18c>
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc4:	d008      	beq.n	8002dd8 <UART_SetConfig+0x19c>
 8002dc6:	e00f      	b.n	8002de8 <UART_SetConfig+0x1ac>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dce:	e012      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e00e      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dde:	e00a      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002de0:	2308      	movs	r3, #8
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002de6:	e006      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002de8:	2310      	movs	r3, #16
 8002dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dee:	e002      	b.n	8002df6 <UART_SetConfig+0x1ba>
 8002df0:	2310      	movs	r3, #16
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a51      	ldr	r2, [pc, #324]	; (8002f40 <UART_SetConfig+0x304>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d17a      	bne.n	8002ef6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d824      	bhi.n	8002e52 <UART_SetConfig+0x216>
 8002e08:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <UART_SetConfig+0x1d4>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e53 	.word	0x08002e53
 8002e18:	08002e3d 	.word	0x08002e3d
 8002e1c:	08002e53 	.word	0x08002e53
 8002e20:	08002e43 	.word	0x08002e43
 8002e24:	08002e53 	.word	0x08002e53
 8002e28:	08002e53 	.word	0x08002e53
 8002e2c:	08002e53 	.word	0x08002e53
 8002e30:	08002e4b 	.word	0x08002e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7fe ffec 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 8002e38:	61f8      	str	r0, [r7, #28]
        break;
 8002e3a:	e010      	b.n	8002e5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e3c:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <UART_SetConfig+0x314>)
 8002e3e:	61fb      	str	r3, [r7, #28]
        break;
 8002e40:	e00d      	b.n	8002e5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e42:	f7fe ff4d 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8002e46:	61f8      	str	r0, [r7, #28]
        break;
 8002e48:	e009      	b.n	8002e5e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e4e:	61fb      	str	r3, [r7, #28]
        break;
 8002e50:	e005      	b.n	8002e5e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8107 	beq.w	8003074 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d305      	bcc.n	8002e82 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d903      	bls.n	8002e8a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e88:	e0f4      	b.n	8003074 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	461c      	mov	r4, r3
 8002e90:	4615      	mov	r5, r2
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	022b      	lsls	r3, r5, #8
 8002e9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ea0:	0222      	lsls	r2, r4, #8
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	6849      	ldr	r1, [r1, #4]
 8002ea6:	0849      	lsrs	r1, r1, #1
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	4688      	mov	r8, r1
 8002eac:	4681      	mov	r9, r0
 8002eae:	eb12 0a08 	adds.w	sl, r2, r8
 8002eb2:	eb43 0b09 	adc.w	fp, r3, r9
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ec4:	4650      	mov	r0, sl
 8002ec6:	4659      	mov	r1, fp
 8002ec8:	f7fd f98c 	bl	80001e4 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eda:	d308      	bcc.n	8002eee <UART_SetConfig+0x2b2>
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee2:	d204      	bcs.n	8002eee <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	e0c2      	b.n	8003074 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002ef4:	e0be      	b.n	8003074 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d16a      	bne.n	8002fd6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d834      	bhi.n	8002f72 <UART_SetConfig+0x336>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <UART_SetConfig+0x2d4>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f35 	.word	0x08002f35
 8002f14:	08002f55 	.word	0x08002f55
 8002f18:	08002f5d 	.word	0x08002f5d
 8002f1c:	08002f73 	.word	0x08002f73
 8002f20:	08002f63 	.word	0x08002f63
 8002f24:	08002f73 	.word	0x08002f73
 8002f28:	08002f73 	.word	0x08002f73
 8002f2c:	08002f73 	.word	0x08002f73
 8002f30:	08002f6b 	.word	0x08002f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f34:	f7fe ff6c 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 8002f38:	61f8      	str	r0, [r7, #28]
        break;
 8002f3a:	e020      	b.n	8002f7e <UART_SetConfig+0x342>
 8002f3c:	efff69f3 	.word	0xefff69f3
 8002f40:	40008000 	.word	0x40008000
 8002f44:	40013800 	.word	0x40013800
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40004400 	.word	0x40004400
 8002f50:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f54:	f7fe ff72 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002f58:	61f8      	str	r0, [r7, #28]
        break;
 8002f5a:	e010      	b.n	8002f7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f5c:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <UART_SetConfig+0x454>)
 8002f5e:	61fb      	str	r3, [r7, #28]
        break;
 8002f60:	e00d      	b.n	8002f7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f62:	f7fe febd 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8002f66:	61f8      	str	r0, [r7, #28]
        break;
 8002f68:	e009      	b.n	8002f7e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f6e:	61fb      	str	r3, [r7, #28]
        break;
 8002f70:	e005      	b.n	8002f7e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d077      	beq.n	8003074 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005a      	lsls	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	441a      	add	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b0f      	cmp	r3, #15
 8002f9e:	d916      	bls.n	8002fce <UART_SetConfig+0x392>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa6:	d212      	bcs.n	8002fce <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f023 030f 	bic.w	r3, r3, #15
 8002fb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	8afb      	ldrh	r3, [r7, #22]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	8afa      	ldrh	r2, [r7, #22]
 8002fca:	60da      	str	r2, [r3, #12]
 8002fcc:	e052      	b.n	8003074 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fd4:	e04e      	b.n	8003074 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d827      	bhi.n	800302e <UART_SetConfig+0x3f2>
 8002fde:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <UART_SetConfig+0x3a8>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	08003011 	.word	0x08003011
 8002fec:	08003019 	.word	0x08003019
 8002ff0:	0800302f 	.word	0x0800302f
 8002ff4:	0800301f 	.word	0x0800301f
 8002ff8:	0800302f 	.word	0x0800302f
 8002ffc:	0800302f 	.word	0x0800302f
 8003000:	0800302f 	.word	0x0800302f
 8003004:	08003027 	.word	0x08003027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003008:	f7fe ff02 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 800300c:	61f8      	str	r0, [r7, #28]
        break;
 800300e:	e014      	b.n	800303a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003010:	f7fe ff14 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8003014:	61f8      	str	r0, [r7, #28]
        break;
 8003016:	e010      	b.n	800303a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <UART_SetConfig+0x454>)
 800301a:	61fb      	str	r3, [r7, #28]
        break;
 800301c:	e00d      	b.n	800303a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301e:	f7fe fe5f 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8003022:	61f8      	str	r0, [r7, #28]
        break;
 8003024:	e009      	b.n	800303a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302a:	61fb      	str	r3, [r7, #28]
        break;
 800302c:	e005      	b.n	800303a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003038:	bf00      	nop
    }

    if (pclk != 0U)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d019      	beq.n	8003074 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	085a      	lsrs	r2, r3, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	441a      	add	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	d909      	bls.n	800306e <UART_SetConfig+0x432>
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003060:	d205      	bcs.n	800306e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60da      	str	r2, [r3, #12]
 800306c:	e002      	b.n	8003074 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003080:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003084:	4618      	mov	r0, r3
 8003086:	3728      	adds	r7, #40	; 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308e:	bf00      	nop
 8003090:	00f42400 	.word	0x00f42400

08003094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01a      	beq.n	80031aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003192:	d10a      	bne.n	80031aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	605a      	str	r2, [r3, #4]
  }
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031e8:	f7fd fd92 	bl	8000d10 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d10e      	bne.n	800321a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f82d 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e023      	b.n	8003262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d10e      	bne.n	8003246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f817 	bl	800326a <UART_WaitOnFlagUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e00d      	b.n	8003262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b09c      	sub	sp, #112	; 0x70
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	e0a5      	b.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	f000 80a1 	beq.w	80033c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003286:	f7fd fd43 	bl	8000d10 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003292:	429a      	cmp	r2, r3
 8003294:	d302      	bcc.n	800329c <UART_WaitOnFlagUntilTimeout+0x32>
 8003296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003298:	2b00      	cmp	r3, #0
 800329a:	d13e      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032b0:	667b      	str	r3, [r7, #100]	; 0x64
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1e6      	bne.n	800329c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3308      	adds	r3, #8
 80032d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	663b      	str	r3, [r7, #96]	; 0x60
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3308      	adds	r3, #8
 80032ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e5      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2220      	movs	r2, #32
 8003306:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e067      	b.n	80033ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04f      	beq.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003336:	d147      	bne.n	80033c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003340:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	e853 3f00 	ldrex	r3, [r3]
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
 8003362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e6      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3308      	adds	r3, #8
 800337a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	e853 3f00 	ldrex	r3, [r3]
 8003382:	613b      	str	r3, [r7, #16]
   return(result);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	66bb      	str	r3, [r7, #104]	; 0x68
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3308      	adds	r3, #8
 8003392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003394:	623a      	str	r2, [r7, #32]
 8003396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003398:	69f9      	ldr	r1, [r7, #28]
 800339a:	6a3a      	ldr	r2, [r7, #32]
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e5      	bne.n	8003374 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e010      	b.n	80033ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	f43f af4a 	beq.w	800327c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3770      	adds	r7, #112	; 0x70
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003404:	2b84      	cmp	r3, #132	; 0x84
 8003406:	d005      	beq.n	8003414 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003408:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	3303      	adds	r3, #3
 8003412:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003414:	68fb      	ldr	r3, [r7, #12]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003426:	f001 f9a5 	bl	8004774 <vTaskStartScheduler>
  
  return osOK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}

08003430 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af04      	add	r7, sp, #16
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d020      	beq.n	8003484 <osThreadCreate+0x54>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01c      	beq.n	8003484 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685c      	ldr	r4, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681d      	ldr	r5, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691e      	ldr	r6, [r3, #16]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff ffc8 	bl	80033f2 <makeFreeRtosPriority>
 8003462:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800346c:	9202      	str	r2, [sp, #8]
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	9100      	str	r1, [sp, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	4632      	mov	r2, r6
 8003476:	4629      	mov	r1, r5
 8003478:	4620      	mov	r0, r4
 800347a:	f000 ff9d 	bl	80043b8 <xTaskCreateStatic>
 800347e:	4603      	mov	r3, r0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e01c      	b.n	80034be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685c      	ldr	r4, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003490:	b29e      	uxth	r6, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ffaa 	bl	80033f2 <makeFreeRtosPriority>
 800349e:	4602      	mov	r2, r0
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	9200      	str	r2, [sp, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4632      	mov	r2, r6
 80034ac:	4629      	mov	r1, r5
 80034ae:	4620      	mov	r0, r4
 80034b0:	f000 ffdf 	bl	8004472 <xTaskCreate>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e000      	b.n	80034c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <osDelay+0x16>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	e000      	b.n	80034e0 <osDelay+0x18>
 80034de:	2301      	movs	r3, #1
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 f913 	bl	800470c <vTaskDelay>
  
  return osOK;
 80034e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d016      	beq.n	8003530 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d10a      	bne.n	800351e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2203      	movs	r2, #3
 800350e:	9200      	str	r2, [sp, #0]
 8003510:	2200      	movs	r2, #0
 8003512:	2100      	movs	r1, #0
 8003514:	2001      	movs	r0, #1
 8003516:	f000 f947 	bl	80037a8 <xQueueGenericCreateStatic>
 800351a:	4603      	mov	r3, r0
 800351c:	e023      	b.n	8003566 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	6839      	ldr	r1, [r7, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	f000 fa0f 	bl	800394a <xQueueCreateCountingSemaphoreStatic>
 800352c:	4603      	mov	r3, r0
 800352e:	e01a      	b.n	8003566 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d110      	bne.n	8003558 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8003536:	2203      	movs	r2, #3
 8003538:	2100      	movs	r1, #0
 800353a:	2001      	movs	r0, #1
 800353c:	f000 f9ac 	bl	8003898 <xQueueGenericCreate>
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <osSemaphoreCreate+0x64>
 8003548:	2300      	movs	r3, #0
 800354a:	2200      	movs	r2, #0
 800354c:	2100      	movs	r1, #0
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fa66 	bl	8003a20 <xQueueGenericSend>
      return sema;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	e006      	b.n	8003566 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4611      	mov	r1, r2
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fa2a 	bl	80039b8 <xQueueCreateCountingSemaphore>
 8003564:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f103 0208 	add.w	r2, r3, #8
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f04f 32ff 	mov.w	r2, #4294967295
 8003586:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f103 0208 	add.w	r2, r3, #8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f103 0208 	add.w	r2, r3, #8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003626:	d103      	bne.n	8003630 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	e00c      	b.n	800364a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3308      	adds	r3, #8
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e002      	b.n	800363e <vListInsert+0x2e>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	d2f6      	bcs.n	8003638 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	601a      	str	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6892      	ldr	r2, [r2, #8]
 8003698:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6852      	ldr	r2, [r2, #4]
 80036a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d103      	bne.n	80036b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036fe:	bf00      	nop
 8003700:	e7fe      	b.n	8003700 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003702:	f001 ff97 	bl	8005634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	68f9      	ldr	r1, [r7, #12]
 8003710:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	441a      	add	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003732:	3b01      	subs	r3, #1
 8003734:	68f9      	ldr	r1, [r7, #12]
 8003736:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	441a      	add	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d114      	bne.n	8003782 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01a      	beq.n	8003796 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3310      	adds	r3, #16
 8003764:	4618      	mov	r0, r3
 8003766:	f001 fa57 	bl	8004c18 <xTaskRemoveFromEventList>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d012      	beq.n	8003796 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <xQueueGenericReset+0xcc>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	e009      	b.n	8003796 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3310      	adds	r3, #16
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fef1 	bl	800356e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3324      	adds	r3, #36	; 0x24
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff feec 	bl	800356e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003796:	f001 ff7d 	bl	8005694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800379a:	2301      	movs	r3, #1
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	e000ed04 	.word	0xe000ed04

080037a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	; 0x38
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <xQueueGenericCreateStatic+0x52>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <xQueueGenericCreateStatic+0x56>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueGenericCreateStatic+0x58>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	623b      	str	r3, [r7, #32]
}
 8003816:	bf00      	nop
 8003818:	e7fe      	b.n	8003818 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <xQueueGenericCreateStatic+0x7e>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <xQueueGenericCreateStatic+0x82>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <xQueueGenericCreateStatic+0x84>
 800382a:	2300      	movs	r3, #0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	61fb      	str	r3, [r7, #28]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003846:	2348      	movs	r3, #72	; 0x48
 8003848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b48      	cmp	r3, #72	; 0x48
 800384e:	d00a      	beq.n	8003866 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	61bb      	str	r3, [r7, #24]
}
 8003862:	bf00      	nop
 8003864:	e7fe      	b.n	8003864 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003866:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800387a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f83f 	bl	800390c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800388e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003890:	4618      	mov	r0, r3
 8003892:	3730      	adds	r7, #48	; 0x30
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	613b      	str	r3, [r7, #16]
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3348      	adds	r3, #72	; 0x48
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 ffd1 	bl	8005878 <pvPortMalloc>
 80038d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d011      	beq.n	8003902 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	3348      	adds	r3, #72	; 0x48
 80038e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038f0:	79fa      	ldrb	r2, [r7, #7]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f805 	bl	800390c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003902:	69bb      	ldr	r3, [r7, #24]
	}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e002      	b.n	800392e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800393a:	2101      	movs	r1, #1
 800393c:	69b8      	ldr	r0, [r7, #24]
 800393e:	f7ff fecb 	bl	80036d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800394a:	b580      	push	{r7, lr}
 800394c:	b08a      	sub	sp, #40	; 0x28
 800394e:	af02      	add	r7, sp, #8
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	61bb      	str	r3, [r7, #24]
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	429a      	cmp	r2, r3
 8003978:	d90a      	bls.n	8003990 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	617b      	str	r3, [r7, #20]
}
 800398c:	bf00      	nop
 800398e:	e7fe      	b.n	800398e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003990:	2302      	movs	r3, #2
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff ff04 	bl	80037a8 <xQueueGenericCreateStatic>
 80039a0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80039ae:	69fb      	ldr	r3, [r7, #28]
	}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	613b      	str	r3, [r7, #16]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d90a      	bls.n	80039fc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	60fb      	str	r3, [r7, #12]
}
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80039fc:	2202      	movs	r2, #2
 80039fe:	2100      	movs	r1, #0
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff49 	bl	8003898 <xQueueGenericCreate>
 8003a06:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003a14:	697b      	ldr	r3, [r7, #20]
	}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08e      	sub	sp, #56	; 0x38
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <xQueueGenericSend+0x32>
	__asm volatile
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a4e:	bf00      	nop
 8003a50:	e7fe      	b.n	8003a50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <xQueueGenericSend+0x40>
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <xQueueGenericSend+0x44>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <xQueueGenericSend+0x46>
 8003a64:	2300      	movs	r3, #0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <xQueueGenericSend+0x60>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d103      	bne.n	8003a8e <xQueueGenericSend+0x6e>
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <xQueueGenericSend+0x72>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueGenericSend+0x74>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <xQueueGenericSend+0x8e>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	623b      	str	r3, [r7, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aae:	f001 fa73 	bl	8004f98 <xTaskGetSchedulerState>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <xQueueGenericSend+0x9e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <xQueueGenericSend+0xa2>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <xQueueGenericSend+0xa4>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xQueueGenericSend+0xbe>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	61fb      	str	r3, [r7, #28]
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ade:	f001 fda9 	bl	8005634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <xQueueGenericSend+0xd4>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d129      	bne.n	8003b48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003afa:	f000 fb4d 	bl	8004198 <prvCopyDataToQueue>
 8003afe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	3324      	adds	r3, #36	; 0x24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 f883 	bl	8004c18 <xTaskRemoveFromEventList>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b18:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <xQueueGenericSend+0x1f8>)
 8003b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	e00a      	b.n	8003b40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <xQueueGenericSend+0x1f8>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b40:	f001 fda8 	bl	8005694 <vPortExitCritical>
				return pdPASS;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e063      	b.n	8003c10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b4e:	f001 fda1 	bl	8005694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e05c      	b.n	8003c10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 f8bb 	bl	8004cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b6a:	f001 fd93 	bl	8005694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b6e:	f000 fe6b 	bl	8004848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b72:	f001 fd5f 	bl	8005634 <vPortEnterCritical>
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b7c:	b25b      	sxtb	r3, r3
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d103      	bne.n	8003b8c <xQueueGenericSend+0x16c>
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d103      	bne.n	8003ba2 <xQueueGenericSend+0x182>
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ba2:	f001 fd77 	bl	8005694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ba6:	1d3a      	adds	r2, r7, #4
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f8aa 	bl	8004d08 <xTaskCheckForTimeOut>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d124      	bne.n	8003c04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bbc:	f000 fbe4 	bl	8004388 <prvIsQueueFull>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	3310      	adds	r3, #16
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fffe 	bl	8004bd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd6:	f000 fb6f 	bl	80042b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bda:	f000 fe43 	bl	8004864 <xTaskResumeAll>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f47f af7c 	bne.w	8003ade <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <xQueueGenericSend+0x1f8>)
 8003be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	e772      	b.n	8003ade <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfa:	f000 fb5d 	bl	80042b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bfe:	f000 fe31 	bl	8004864 <xTaskResumeAll>
 8003c02:	e76c      	b.n	8003ade <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c06:	f000 fb57 	bl	80042b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c0a:	f000 fe2b 	bl	8004864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3738      	adds	r7, #56	; 0x38
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b090      	sub	sp, #64	; 0x40
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <xQueueGenericSendFromISR+0x3c>
 8003c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <xQueueGenericSendFromISR+0x40>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <xQueueGenericSendFromISR+0x42>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c74:	bf00      	nop
 8003c76:	e7fe      	b.n	8003c76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSendFromISR+0x6a>
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <xQueueGenericSendFromISR+0x6e>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueGenericSendFromISR+0x70>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	623b      	str	r3, [r7, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ca6:	f001 fda7 	bl	80057f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003caa:	f3ef 8211 	mrs	r2, BASEPRI
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	61fa      	str	r2, [r7, #28]
 8003cc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <xQueueGenericSendFromISR+0xbc>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d12f      	bne.n	8003d38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	68b9      	ldr	r1, [r7, #8]
 8003cec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cee:	f000 fa53 	bl	8004198 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cf2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfa:	d112      	bne.n	8003d22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	3324      	adds	r3, #36	; 0x24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 ff85 	bl	8004c18 <xTaskRemoveFromEventList>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d26:	3301      	adds	r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b25a      	sxtb	r2, r3
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d32:	2301      	movs	r3, #1
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003d36:	e001      	b.n	8003d3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3740      	adds	r7, #64	; 0x40
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	; 0x30
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <xQueueReceive+0x30>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	623b      	str	r3, [r7, #32]
}
 8003d80:	bf00      	nop
 8003d82:	e7fe      	b.n	8003d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <xQueueReceive+0x3e>
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <xQueueReceive+0x42>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <xQueueReceive+0x44>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xQueueReceive+0x5e>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	61fb      	str	r3, [r7, #28]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003db2:	f001 f8f1 	bl	8004f98 <xTaskGetSchedulerState>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <xQueueReceive+0x6e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <xQueueReceive+0x72>
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <xQueueReceive+0x74>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xQueueReceive+0x8e>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	61bb      	str	r3, [r7, #24]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003de2:	f001 fc27 	bl	8005634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01f      	beq.n	8003e32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003df6:	f000 fa39 	bl	800426c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	1e5a      	subs	r2, r3, #1
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00f      	beq.n	8003e2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	3310      	adds	r3, #16
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 ff02 	bl	8004c18 <xTaskRemoveFromEventList>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d007      	beq.n	8003e2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <xQueueReceive+0x1bc>)
 8003e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e2a:	f001 fc33 	bl	8005694 <vPortExitCritical>
				return pdPASS;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e069      	b.n	8003f06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e38:	f001 fc2c 	bl	8005694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e062      	b.n	8003f06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e46:	f107 0310 	add.w	r3, r7, #16
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 ff46 	bl	8004cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e54:	f001 fc1e 	bl	8005694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e58:	f000 fcf6 	bl	8004848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e5c:	f001 fbea 	bl	8005634 <vPortEnterCritical>
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d103      	bne.n	8003e76 <xQueueReceive+0x122>
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d103      	bne.n	8003e8c <xQueueReceive+0x138>
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e8c:	f001 fc02 	bl	8005694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e90:	1d3a      	adds	r2, r7, #4
 8003e92:	f107 0310 	add.w	r3, r7, #16
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 ff35 	bl	8004d08 <xTaskCheckForTimeOut>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d123      	bne.n	8003eec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea6:	f000 fa59 	bl	800435c <prvIsQueueEmpty>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d017      	beq.n	8003ee0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	3324      	adds	r3, #36	; 0x24
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fe89 	bl	8004bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec0:	f000 f9fa 	bl	80042b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ec4:	f000 fcce 	bl	8004864 <xTaskResumeAll>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d189      	bne.n	8003de2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <xQueueReceive+0x1bc>)
 8003ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	e780      	b.n	8003de2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee2:	f000 f9e9 	bl	80042b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ee6:	f000 fcbd 	bl	8004864 <xTaskResumeAll>
 8003eea:	e77a      	b.n	8003de2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eee:	f000 f9e3 	bl	80042b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ef2:	f000 fcb7 	bl	8004864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef8:	f000 fa30 	bl	800435c <prvIsQueueEmpty>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f43f af6f 	beq.w	8003de2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3730      	adds	r7, #48	; 0x30
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	623b      	str	r3, [r7, #32]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	61fb      	str	r3, [r7, #28]
}
 8003f60:	bf00      	nop
 8003f62:	e7fe      	b.n	8003f62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f64:	f001 f818 	bl	8004f98 <xTaskGetSchedulerState>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <xQueueSemaphoreTake+0x60>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <xQueueSemaphoreTake+0x64>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <xQueueSemaphoreTake+0x66>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	61bb      	str	r3, [r7, #24]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f94:	f001 fb4e 	bl	8005634 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d024      	beq.n	8003fee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003fb4:	f001 f998 	bl	80052e8 <pvTaskIncrementMutexHeldCount>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00f      	beq.n	8003fe6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	3310      	adds	r3, #16
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fe24 	bl	8004c18 <xTaskRemoveFromEventList>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003fd6:	4b54      	ldr	r3, [pc, #336]	; (8004128 <xQueueSemaphoreTake+0x214>)
 8003fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003fe6:	f001 fb55 	bl	8005694 <vPortExitCritical>
				return pdPASS;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e097      	b.n	800411e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d111      	bne.n	8004018 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	617b      	str	r3, [r7, #20]
}
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004010:	f001 fb40 	bl	8005694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004014:	2300      	movs	r3, #0
 8004016:	e082      	b.n	800411e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800401e:	f107 030c 	add.w	r3, r7, #12
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fe5a 	bl	8004cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004028:	2301      	movs	r3, #1
 800402a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800402c:	f001 fb32 	bl	8005694 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004030:	f000 fc0a 	bl	8004848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004034:	f001 fafe 	bl	8005634 <vPortEnterCritical>
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800403e:	b25b      	sxtb	r3, r3
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d103      	bne.n	800404e <xQueueSemaphoreTake+0x13a>
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004054:	b25b      	sxtb	r3, r3
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d103      	bne.n	8004064 <xQueueSemaphoreTake+0x150>
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004064:	f001 fb16 	bl	8005694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004068:	463a      	mov	r2, r7
 800406a:	f107 030c 	add.w	r3, r7, #12
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fe49 	bl	8004d08 <xTaskCheckForTimeOut>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d132      	bne.n	80040e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800407c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800407e:	f000 f96d 	bl	800435c <prvIsQueueEmpty>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d026      	beq.n	80040d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d109      	bne.n	80040a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004090:	f001 fad0 	bl	8005634 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 ff9b 	bl	8004fd4 <xTaskPriorityInherit>
 800409e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80040a0:	f001 faf8 	bl	8005694 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	3324      	adds	r3, #36	; 0x24
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	4611      	mov	r1, r2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fd8f 	bl	8004bd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040b4:	f000 f900 	bl	80042b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040b8:	f000 fbd4 	bl	8004864 <xTaskResumeAll>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f47f af68 	bne.w	8003f94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <xQueueSemaphoreTake+0x214>)
 80040c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	e75e      	b.n	8003f94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80040d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040d8:	f000 f8ee 	bl	80042b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040dc:	f000 fbc2 	bl	8004864 <xTaskResumeAll>
 80040e0:	e758      	b.n	8003f94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80040e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040e4:	f000 f8e8 	bl	80042b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040e8:	f000 fbbc 	bl	8004864 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80040ee:	f000 f935 	bl	800435c <prvIsQueueEmpty>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f43f af4d 	beq.w	8003f94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004100:	f001 fa98 	bl	8005634 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004106:	f000 f82f 	bl	8004168 <prvGetDisinheritPriorityAfterTimeout>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004112:	4618      	mov	r0, r3
 8004114:	f001 f85a 	bl	80051cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004118:	f001 fabc 	bl	8005694 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800411c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800411e:	4618      	mov	r0, r3
 8004120:	3738      	adds	r7, #56	; 0x38
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	60fb      	str	r3, [r7, #12]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800415a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800415c:	4618      	mov	r0, r3
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1c3 0307 	rsb	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e001      	b.n	800418a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800418a:	68fb      	ldr	r3, [r7, #12]
	}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d14d      	bne.n	800425a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 ff7c 	bl	80050c0 <xTaskPriorityDisinherit>
 80041c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e043      	b.n	800425a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d119      	bne.n	800420c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6858      	ldr	r0, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	461a      	mov	r2, r3
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	f001 fd58 	bl	8005c98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	441a      	add	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d32b      	bcc.n	800425a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	e026      	b.n	800425a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68d8      	ldr	r0, [r3, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	461a      	mov	r2, r3
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	f001 fd3e 	bl	8005c98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	425b      	negs	r3, r3
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d207      	bcs.n	8004248 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	425b      	negs	r3, r3
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d105      	bne.n	800425a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3b01      	subs	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d018      	beq.n	80042b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d303      	bcc.n	80042a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68d9      	ldr	r1, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	461a      	mov	r2, r3
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	f001 fcf4 	bl	8005c98 <memcpy>
	}
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042c0:	f001 f9b8 	bl	8005634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042cc:	e011      	b.n	80042f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3324      	adds	r3, #36	; 0x24
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fc9c 	bl	8004c18 <xTaskRemoveFromEventList>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042e6:	f000 fd71 	bl	8004dcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	dce9      	bgt.n	80042ce <prvUnlockQueue+0x16>
 80042fa:	e000      	b.n	80042fe <prvUnlockQueue+0x46>
					break;
 80042fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004306:	f001 f9c5 	bl	8005694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800430a:	f001 f993 	bl	8005634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004314:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004316:	e011      	b.n	800433c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d012      	beq.n	8004346 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3310      	adds	r3, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fc77 	bl	8004c18 <xTaskRemoveFromEventList>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004330:	f000 fd4c 	bl	8004dcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004334:	7bbb      	ldrb	r3, [r7, #14]
 8004336:	3b01      	subs	r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800433c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004340:	2b00      	cmp	r3, #0
 8004342:	dce9      	bgt.n	8004318 <prvUnlockQueue+0x60>
 8004344:	e000      	b.n	8004348 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004346:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	22ff      	movs	r2, #255	; 0xff
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004350:	f001 f9a0 	bl	8005694 <vPortExitCritical>
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004364:	f001 f966 	bl	8005634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e001      	b.n	800437a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800437a:	f001 f98b 	bl	8005694 <vPortExitCritical>

	return xReturn;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004390:	f001 f950 	bl	8005634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	429a      	cmp	r2, r3
 800439e:	d102      	bne.n	80043a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043a0:	2301      	movs	r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e001      	b.n	80043aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043aa:	f001 f973 	bl	8005694 <vPortExitCritical>

	return xReturn;
 80043ae:	68fb      	ldr	r3, [r7, #12]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	; 0x38
 80043bc:	af04      	add	r7, sp, #16
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	623b      	str	r3, [r7, #32]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xTaskCreateStatic+0x46>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61fb      	str	r3, [r7, #28]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043fe:	23b4      	movs	r3, #180	; 0xb4
 8004400:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	2bb4      	cmp	r3, #180	; 0xb4
 8004406:	d00a      	beq.n	800441e <xTaskCreateStatic+0x66>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	61bb      	str	r3, [r7, #24]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800441e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01e      	beq.n	8004464 <xTaskCreateStatic+0xac>
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004434:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	2202      	movs	r2, #2
 800443a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800443e:	2300      	movs	r3, #0
 8004440:	9303      	str	r3, [sp, #12]
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	9302      	str	r3, [sp, #8]
 8004446:	f107 0314 	add.w	r3, r7, #20
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f850 	bl	80044fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800445c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800445e:	f000 f8eb 	bl	8004638 <prvAddNewTaskToReadyList>
 8004462:	e001      	b.n	8004468 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004468:	697b      	ldr	r3, [r7, #20]
	}
 800446a:	4618      	mov	r0, r3
 800446c:	3728      	adds	r7, #40	; 0x28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08c      	sub	sp, #48	; 0x30
 8004476:	af04      	add	r7, sp, #16
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4618      	mov	r0, r3
 8004488:	f001 f9f6 	bl	8005878 <pvPortMalloc>
 800448c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00e      	beq.n	80044b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004494:	20b4      	movs	r0, #180	; 0xb4
 8004496:	f001 f9ef 	bl	8005878 <pvPortMalloc>
 800449a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
 80044a8:	e005      	b.n	80044b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044aa:	6978      	ldr	r0, [r7, #20]
 80044ac:	f001 fab0 	bl	8005a10 <vPortFree>
 80044b0:	e001      	b.n	80044b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d017      	beq.n	80044ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044c4:	88fa      	ldrh	r2, [r7, #6]
 80044c6:	2300      	movs	r3, #0
 80044c8:	9303      	str	r3, [sp, #12]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	9302      	str	r3, [sp, #8]
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68b9      	ldr	r1, [r7, #8]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f80e 	bl	80044fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044e0:	69f8      	ldr	r0, [r7, #28]
 80044e2:	f000 f8a9 	bl	8004638 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e002      	b.n	80044f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044ec:	f04f 33ff 	mov.w	r3, #4294967295
 80044f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044f2:	69bb      	ldr	r3, [r7, #24]
	}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004514:	3b01      	subs	r3, #1
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	f023 0307 	bic.w	r3, r3, #7
 8004522:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <prvInitialiseNewTask+0x48>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	617b      	str	r3, [r7, #20]
}
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01f      	beq.n	800458a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	e012      	b.n	8004576 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	7819      	ldrb	r1, [r3, #0]
 8004558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	3334      	adds	r3, #52	; 0x34
 8004560:	460a      	mov	r2, r1
 8004562:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	4413      	add	r3, r2
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d006      	beq.n	800457e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	3301      	adds	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	2b0f      	cmp	r3, #15
 800457a:	d9e9      	bls.n	8004550 <prvInitialiseNewTask+0x54>
 800457c:	e000      	b.n	8004580 <prvInitialiseNewTask+0x84>
			{
				break;
 800457e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004588:	e003      	b.n	8004592 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2b06      	cmp	r3, #6
 8004596:	d901      	bls.n	800459c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004598:	2306      	movs	r3, #6
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	2200      	movs	r2, #0
 80045ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	3304      	adds	r3, #4
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fffb 	bl	80035ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	3318      	adds	r3, #24
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fff6 	bl	80035ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	f1c3 0207 	rsb	r2, r3, #7
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	334c      	adds	r3, #76	; 0x4c
 80045ec:	2260      	movs	r2, #96	; 0x60
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 fb5f 	bl	8005cb4 <memset>
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	4a0c      	ldr	r2, [pc, #48]	; (800462c <prvInitialiseNewTask+0x130>)
 80045fa:	651a      	str	r2, [r3, #80]	; 0x50
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <prvInitialiseNewTask+0x134>)
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <prvInitialiseNewTask+0x138>)
 8004606:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	69b8      	ldr	r0, [r7, #24]
 800460e:	f000 fee5 	bl	80053dc <pxPortInitialiseStack>
 8004612:	4602      	mov	r2, r0
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004622:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004624:	bf00      	nop
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	08005f24 	.word	0x08005f24
 8004630:	08005f44 	.word	0x08005f44
 8004634:	08005f04 	.word	0x08005f04

08004638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004640:	f000 fff8 	bl	8005634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004644:	4b2a      	ldr	r3, [pc, #168]	; (80046f0 <prvAddNewTaskToReadyList+0xb8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3301      	adds	r3, #1
 800464a:	4a29      	ldr	r2, [pc, #164]	; (80046f0 <prvAddNewTaskToReadyList+0xb8>)
 800464c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800464e:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <prvAddNewTaskToReadyList+0xbc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004656:	4a27      	ldr	r2, [pc, #156]	; (80046f4 <prvAddNewTaskToReadyList+0xbc>)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800465c:	4b24      	ldr	r3, [pc, #144]	; (80046f0 <prvAddNewTaskToReadyList+0xb8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d110      	bne.n	8004686 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004664:	f000 fbd6 	bl	8004e14 <prvInitialiseTaskLists>
 8004668:	e00d      	b.n	8004686 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800466a:	4b23      	ldr	r3, [pc, #140]	; (80046f8 <prvAddNewTaskToReadyList+0xc0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <prvAddNewTaskToReadyList+0xbc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	429a      	cmp	r2, r3
 800467e:	d802      	bhi.n	8004686 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <prvAddNewTaskToReadyList+0xbc>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004686:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <prvAddNewTaskToReadyList+0xc4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3301      	adds	r3, #1
 800468c:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <prvAddNewTaskToReadyList+0xc4>)
 800468e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	2201      	movs	r2, #1
 8004696:	409a      	lsls	r2, r3
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4313      	orrs	r3, r2
 800469e:	4a18      	ldr	r2, [pc, #96]	; (8004700 <prvAddNewTaskToReadyList+0xc8>)
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4a15      	ldr	r2, [pc, #84]	; (8004704 <prvAddNewTaskToReadyList+0xcc>)
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f7fe ff85 	bl	80035c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046be:	f000 ffe9 	bl	8005694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <prvAddNewTaskToReadyList+0xc0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046ca:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <prvAddNewTaskToReadyList+0xbc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d207      	bcs.n	80046e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <prvAddNewTaskToReadyList+0xd0>)
 80046da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	200006d0 	.word	0x200006d0
 80046f4:	200005d0 	.word	0x200005d0
 80046f8:	200006dc 	.word	0x200006dc
 80046fc:	200006ec 	.word	0x200006ec
 8004700:	200006d8 	.word	0x200006d8
 8004704:	200005d4 	.word	0x200005d4
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800471e:	4b13      	ldr	r3, [pc, #76]	; (800476c <vTaskDelay+0x60>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <vTaskDelay+0x30>
	__asm volatile
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	60bb      	str	r3, [r7, #8]
}
 8004738:	bf00      	nop
 800473a:	e7fe      	b.n	800473a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800473c:	f000 f884 	bl	8004848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004740:	2100      	movs	r1, #0
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fde4 	bl	8005310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004748:	f000 f88c 	bl	8004864 <xTaskResumeAll>
 800474c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <vTaskDelay+0x64>)
 8004756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	200006f8 	.word	0x200006f8
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004782:	463a      	mov	r2, r7
 8004784:	1d39      	adds	r1, r7, #4
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4618      	mov	r0, r3
 800478c:	f7fb feac 	bl	80004e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	9202      	str	r2, [sp, #8]
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	2300      	movs	r3, #0
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	2300      	movs	r3, #0
 80047a0:	460a      	mov	r2, r1
 80047a2:	4921      	ldr	r1, [pc, #132]	; (8004828 <vTaskStartScheduler+0xb4>)
 80047a4:	4821      	ldr	r0, [pc, #132]	; (800482c <vTaskStartScheduler+0xb8>)
 80047a6:	f7ff fe07 	bl	80043b8 <xTaskCreateStatic>
 80047aa:	4603      	mov	r3, r0
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <vTaskStartScheduler+0xbc>)
 80047ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80047b0:	4b1f      	ldr	r3, [pc, #124]	; (8004830 <vTaskStartScheduler+0xbc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80047b8:	2301      	movs	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e001      	b.n	80047c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d11b      	bne.n	8004800 <vTaskStartScheduler+0x8c>
	__asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	613b      	str	r3, [r7, #16]
}
 80047da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047dc:	4b15      	ldr	r3, [pc, #84]	; (8004834 <vTaskStartScheduler+0xc0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	334c      	adds	r3, #76	; 0x4c
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <vTaskStartScheduler+0xc4>)
 80047e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <vTaskStartScheduler+0xc8>)
 80047e8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047ee:	4b14      	ldr	r3, [pc, #80]	; (8004840 <vTaskStartScheduler+0xcc>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047f4:	4b13      	ldr	r3, [pc, #76]	; (8004844 <vTaskStartScheduler+0xd0>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047fa:	f000 fe79 	bl	80054f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047fe:	e00e      	b.n	800481e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d10a      	bne.n	800481e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	60fb      	str	r3, [r7, #12]
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <vTaskStartScheduler+0xa8>
}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	08005eb4 	.word	0x08005eb4
 800482c:	08004de5 	.word	0x08004de5
 8004830:	200006f4 	.word	0x200006f4
 8004834:	200005d0 	.word	0x200005d0
 8004838:	20000010 	.word	0x20000010
 800483c:	200006f0 	.word	0x200006f0
 8004840:	200006dc 	.word	0x200006dc
 8004844:	200006d4 	.word	0x200006d4

08004848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <vTaskSuspendAll+0x18>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	4a03      	ldr	r2, [pc, #12]	; (8004860 <vTaskSuspendAll+0x18>)
 8004854:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	200006f8 	.word	0x200006f8

08004864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004872:	4b41      	ldr	r3, [pc, #260]	; (8004978 <xTaskResumeAll+0x114>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <xTaskResumeAll+0x2c>
	__asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	603b      	str	r3, [r7, #0]
}
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004890:	f000 fed0 	bl	8005634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004894:	4b38      	ldr	r3, [pc, #224]	; (8004978 <xTaskResumeAll+0x114>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	4a37      	ldr	r2, [pc, #220]	; (8004978 <xTaskResumeAll+0x114>)
 800489c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <xTaskResumeAll+0x114>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d161      	bne.n	800496a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048a6:	4b35      	ldr	r3, [pc, #212]	; (800497c <xTaskResumeAll+0x118>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d05d      	beq.n	800496a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ae:	e02e      	b.n	800490e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048b0:	4b33      	ldr	r3, [pc, #204]	; (8004980 <xTaskResumeAll+0x11c>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3318      	adds	r3, #24
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fee0 	bl	8003682 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fedb 	bl	8003682 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	2201      	movs	r2, #1
 80048d2:	409a      	lsls	r2, r3
 80048d4:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <xTaskResumeAll+0x120>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4313      	orrs	r3, r2
 80048da:	4a2a      	ldr	r2, [pc, #168]	; (8004984 <xTaskResumeAll+0x120>)
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4a27      	ldr	r2, [pc, #156]	; (8004988 <xTaskResumeAll+0x124>)
 80048ec:	441a      	add	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe fe67 	bl	80035c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <xTaskResumeAll+0x128>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004908:	4b21      	ldr	r3, [pc, #132]	; (8004990 <xTaskResumeAll+0x12c>)
 800490a:	2201      	movs	r2, #1
 800490c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <xTaskResumeAll+0x11c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1cc      	bne.n	80048b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800491c:	f000 fb1c 	bl	8004f58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004920:	4b1c      	ldr	r3, [pc, #112]	; (8004994 <xTaskResumeAll+0x130>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d010      	beq.n	800494e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800492c:	f000 f836 	bl	800499c <xTaskIncrementTick>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <xTaskResumeAll+0x12c>)
 8004938:	2201      	movs	r2, #1
 800493a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f1      	bne.n	800492c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004948:	4b12      	ldr	r3, [pc, #72]	; (8004994 <xTaskResumeAll+0x130>)
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <xTaskResumeAll+0x12c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d009      	beq.n	800496a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004956:	2301      	movs	r3, #1
 8004958:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <xTaskResumeAll+0x134>)
 800495c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800496a:	f000 fe93 	bl	8005694 <vPortExitCritical>

	return xAlreadyYielded;
 800496e:	68bb      	ldr	r3, [r7, #8]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	200006f8 	.word	0x200006f8
 800497c:	200006d0 	.word	0x200006d0
 8004980:	20000690 	.word	0x20000690
 8004984:	200006d8 	.word	0x200006d8
 8004988:	200005d4 	.word	0x200005d4
 800498c:	200005d0 	.word	0x200005d0
 8004990:	200006e4 	.word	0x200006e4
 8004994:	200006e0 	.word	0x200006e0
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a6:	4b4e      	ldr	r3, [pc, #312]	; (8004ae0 <xTaskIncrementTick+0x144>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f040 808e 	bne.w	8004acc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049b0:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <xTaskIncrementTick+0x148>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049b8:	4a4a      	ldr	r2, [pc, #296]	; (8004ae4 <xTaskIncrementTick+0x148>)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d120      	bne.n	8004a06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049c4:	4b48      	ldr	r3, [pc, #288]	; (8004ae8 <xTaskIncrementTick+0x14c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	603b      	str	r3, [r7, #0]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <xTaskIncrementTick+0x46>
 80049e4:	4b40      	ldr	r3, [pc, #256]	; (8004ae8 <xTaskIncrementTick+0x14c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	4b40      	ldr	r3, [pc, #256]	; (8004aec <xTaskIncrementTick+0x150>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a3e      	ldr	r2, [pc, #248]	; (8004ae8 <xTaskIncrementTick+0x14c>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4a3e      	ldr	r2, [pc, #248]	; (8004aec <xTaskIncrementTick+0x150>)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <xTaskIncrementTick+0x154>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3301      	adds	r3, #1
 80049fe:	4a3c      	ldr	r2, [pc, #240]	; (8004af0 <xTaskIncrementTick+0x154>)
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	f000 faa9 	bl	8004f58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a06:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <xTaskIncrementTick+0x158>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d348      	bcc.n	8004aa2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a10:	4b35      	ldr	r3, [pc, #212]	; (8004ae8 <xTaskIncrementTick+0x14c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1a:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <xTaskIncrementTick+0x158>)
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	601a      	str	r2, [r3, #0]
					break;
 8004a22:	e03e      	b.n	8004aa2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a24:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <xTaskIncrementTick+0x14c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d203      	bcs.n	8004a44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a3c:	4a2d      	ldr	r2, [pc, #180]	; (8004af4 <xTaskIncrementTick+0x158>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a42:	e02e      	b.n	8004aa2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fe1a 	bl	8003682 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	3318      	adds	r3, #24
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fe11 	bl	8003682 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <xTaskIncrementTick+0x15c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <xTaskIncrementTick+0x15c>)
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4a1f      	ldr	r2, [pc, #124]	; (8004afc <xTaskIncrementTick+0x160>)
 8004a80:	441a      	add	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7fe fd9d 	bl	80035c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a92:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <xTaskIncrementTick+0x164>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d3b9      	bcc.n	8004a10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa0:	e7b6      	b.n	8004a10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <xTaskIncrementTick+0x164>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	4914      	ldr	r1, [pc, #80]	; (8004afc <xTaskIncrementTick+0x160>)
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d901      	bls.n	8004abe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004abe:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <xTaskIncrementTick+0x168>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	e004      	b.n	8004ad6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004acc:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <xTaskIncrementTick+0x16c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	4a0d      	ldr	r2, [pc, #52]	; (8004b08 <xTaskIncrementTick+0x16c>)
 8004ad4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ad6:	697b      	ldr	r3, [r7, #20]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	200006f8 	.word	0x200006f8
 8004ae4:	200006d4 	.word	0x200006d4
 8004ae8:	20000688 	.word	0x20000688
 8004aec:	2000068c 	.word	0x2000068c
 8004af0:	200006e8 	.word	0x200006e8
 8004af4:	200006f0 	.word	0x200006f0
 8004af8:	200006d8 	.word	0x200006d8
 8004afc:	200005d4 	.word	0x200005d4
 8004b00:	200005d0 	.word	0x200005d0
 8004b04:	200006e4 	.word	0x200006e4
 8004b08:	200006e0 	.word	0x200006e0

08004b0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <vTaskSwitchContext+0xac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b1a:	4b28      	ldr	r3, [pc, #160]	; (8004bbc <vTaskSwitchContext+0xb0>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b20:	e044      	b.n	8004bac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004b22:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <vTaskSwitchContext+0xb0>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <vTaskSwitchContext+0xb4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	fab3 f383 	clz	r3, r3
 8004b34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	f1c3 031f 	rsb	r3, r3, #31
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	4921      	ldr	r1, [pc, #132]	; (8004bc4 <vTaskSwitchContext+0xb8>)
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	607b      	str	r3, [r7, #4]
}
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <vTaskSwitchContext+0x5a>
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <vTaskSwitchContext+0xb8>)
 8004b74:	4413      	add	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3308      	adds	r3, #8
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d104      	bne.n	8004b98 <vTaskSwitchContext+0x8c>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	605a      	str	r2, [r3, #4]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <vTaskSwitchContext+0xbc>)
 8004ba0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <vTaskSwitchContext+0xbc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	334c      	adds	r3, #76	; 0x4c
 8004ba8:	4a08      	ldr	r2, [pc, #32]	; (8004bcc <vTaskSwitchContext+0xc0>)
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	200006f8 	.word	0x200006f8
 8004bbc:	200006e4 	.word	0x200006e4
 8004bc0:	200006d8 	.word	0x200006d8
 8004bc4:	200005d4 	.word	0x200005d4
 8004bc8:	200005d0 	.word	0x200005d0
 8004bcc:	20000010 	.word	0x20000010

08004bd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <vTaskPlaceOnEventList+0x44>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3318      	adds	r3, #24
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fe fd06 	bl	8003610 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c04:	2101      	movs	r1, #1
 8004c06:	6838      	ldr	r0, [r7, #0]
 8004c08:	f000 fb82 	bl	8005310 <prvAddCurrentTaskToDelayedList>
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	200005d0 	.word	0x200005d0

08004c18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	60fb      	str	r3, [r7, #12]
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	3318      	adds	r3, #24
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fe fd1a 	bl	8003682 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c4e:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <xTaskRemoveFromEventList+0xac>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11c      	bne.n	8004c90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe fd11 	bl	8003682 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	2201      	movs	r2, #1
 8004c66:	409a      	lsls	r2, r3
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <xTaskRemoveFromEventList+0xb0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <xTaskRemoveFromEventList+0xb0>)
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4a13      	ldr	r2, [pc, #76]	; (8004ccc <xTaskRemoveFromEventList+0xb4>)
 8004c80:	441a      	add	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7fe fc9d 	bl	80035c8 <vListInsertEnd>
 8004c8e:	e005      	b.n	8004c9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3318      	adds	r3, #24
 8004c94:	4619      	mov	r1, r3
 8004c96:	480e      	ldr	r0, [pc, #56]	; (8004cd0 <xTaskRemoveFromEventList+0xb8>)
 8004c98:	f7fe fc96 	bl	80035c8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <xTaskRemoveFromEventList+0xbc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d905      	bls.n	8004cb6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004caa:	2301      	movs	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <xTaskRemoveFromEventList+0xc0>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	e001      	b.n	8004cba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cba:	697b      	ldr	r3, [r7, #20]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200006f8 	.word	0x200006f8
 8004cc8:	200006d8 	.word	0x200006d8
 8004ccc:	200005d4 	.word	0x200005d4
 8004cd0:	20000690 	.word	0x20000690
 8004cd4:	200005d0 	.word	0x200005d0
 8004cd8:	200006e4 	.word	0x200006e4

08004cdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <vTaskInternalSetTimeOutState+0x24>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <vTaskInternalSetTimeOutState+0x28>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	605a      	str	r2, [r3, #4]
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	200006e8 	.word	0x200006e8
 8004d04:	200006d4 	.word	0x200006d4

08004d08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	613b      	str	r3, [r7, #16]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	60fb      	str	r3, [r7, #12]
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d4a:	f000 fc73 	bl	8005634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d4e:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <xTaskCheckForTimeOut+0xbc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d102      	bne.n	8004d6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	e023      	b.n	8004db6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <xTaskCheckForTimeOut+0xc0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d007      	beq.n	8004d8a <xTaskCheckForTimeOut+0x82>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d302      	bcc.n	8004d8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d84:	2301      	movs	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e015      	b.n	8004db6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d20b      	bcs.n	8004dac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	1ad2      	subs	r2, r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff ff9b 	bl	8004cdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e004      	b.n	8004db6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004db2:	2301      	movs	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004db6:	f000 fc6d 	bl	8005694 <vPortExitCritical>

	return xReturn;
 8004dba:	69fb      	ldr	r3, [r7, #28]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200006d4 	.word	0x200006d4
 8004dc8:	200006e8 	.word	0x200006e8

08004dcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dd0:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <vTaskMissedYield+0x14>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	200006e4 	.word	0x200006e4

08004de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dec:	f000 f852 	bl	8004e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <prvIdleTask+0x28>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d9f9      	bls.n	8004dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <prvIdleTask+0x2c>)
 8004dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e08:	e7f0      	b.n	8004dec <prvIdleTask+0x8>
 8004e0a:	bf00      	nop
 8004e0c:	200005d4 	.word	0x200005d4
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	e00c      	b.n	8004e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <prvInitialiseTaskLists+0x60>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fe fb9d 	bl	800356e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3301      	adds	r3, #1
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d9ef      	bls.n	8004e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e40:	480d      	ldr	r0, [pc, #52]	; (8004e78 <prvInitialiseTaskLists+0x64>)
 8004e42:	f7fe fb94 	bl	800356e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e46:	480d      	ldr	r0, [pc, #52]	; (8004e7c <prvInitialiseTaskLists+0x68>)
 8004e48:	f7fe fb91 	bl	800356e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e4c:	480c      	ldr	r0, [pc, #48]	; (8004e80 <prvInitialiseTaskLists+0x6c>)
 8004e4e:	f7fe fb8e 	bl	800356e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e52:	480c      	ldr	r0, [pc, #48]	; (8004e84 <prvInitialiseTaskLists+0x70>)
 8004e54:	f7fe fb8b 	bl	800356e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e58:	480b      	ldr	r0, [pc, #44]	; (8004e88 <prvInitialiseTaskLists+0x74>)
 8004e5a:	f7fe fb88 	bl	800356e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <prvInitialiseTaskLists+0x78>)
 8004e60:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <prvInitialiseTaskLists+0x64>)
 8004e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <prvInitialiseTaskLists+0x7c>)
 8004e66:	4a05      	ldr	r2, [pc, #20]	; (8004e7c <prvInitialiseTaskLists+0x68>)
 8004e68:	601a      	str	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	200005d4 	.word	0x200005d4
 8004e78:	20000660 	.word	0x20000660
 8004e7c:	20000674 	.word	0x20000674
 8004e80:	20000690 	.word	0x20000690
 8004e84:	200006a4 	.word	0x200006a4
 8004e88:	200006bc 	.word	0x200006bc
 8004e8c:	20000688 	.word	0x20000688
 8004e90:	2000068c 	.word	0x2000068c

08004e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e9a:	e019      	b.n	8004ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e9c:	f000 fbca 	bl	8005634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea0:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <prvCheckTasksWaitingTermination+0x50>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe fbe8 	bl	8003682 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <prvCheckTasksWaitingTermination+0x54>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ee8 <prvCheckTasksWaitingTermination+0x54>)
 8004eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <prvCheckTasksWaitingTermination+0x58>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <prvCheckTasksWaitingTermination+0x58>)
 8004ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ec6:	f000 fbe5 	bl	8005694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f810 	bl	8004ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <prvCheckTasksWaitingTermination+0x58>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e1      	bne.n	8004e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200006a4 	.word	0x200006a4
 8004ee8:	200006d0 	.word	0x200006d0
 8004eec:	200006b8 	.word	0x200006b8

08004ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	334c      	adds	r3, #76	; 0x4c
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 ff3b 	bl	8005d78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d108      	bne.n	8004f1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fd7d 	bl	8005a10 <vPortFree>
				vPortFree( pxTCB );
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fd7a 	bl	8005a10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f1c:	e018      	b.n	8004f50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d103      	bne.n	8004f30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fd71 	bl	8005a10 <vPortFree>
	}
 8004f2e:	e00f      	b.n	8004f50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d00a      	beq.n	8004f50 <prvDeleteTCB+0x60>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60fb      	str	r3, [r7, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <prvDeleteTCB+0x5e>
	}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <prvResetNextTaskUnblockTime+0x38>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d104      	bne.n	8004f72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f68:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <prvResetNextTaskUnblockTime+0x3c>)
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f70:	e008      	b.n	8004f84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <prvResetNextTaskUnblockTime+0x38>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <prvResetNextTaskUnblockTime+0x3c>)
 8004f82:	6013      	str	r3, [r2, #0]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	20000688 	.word	0x20000688
 8004f94:	200006f0 	.word	0x200006f0

08004f98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <xTaskGetSchedulerState+0x34>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d102      	bne.n	8004fac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	e008      	b.n	8004fbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <xTaskGetSchedulerState+0x38>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	e001      	b.n	8004fbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fbe:	687b      	ldr	r3, [r7, #4]
	}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	200006dc 	.word	0x200006dc
 8004fd0:	200006f8 	.word	0x200006f8

08004fd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d05e      	beq.n	80050a8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fee:	4b31      	ldr	r3, [pc, #196]	; (80050b4 <xTaskPriorityInherit+0xe0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d24e      	bcs.n	8005096 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	db06      	blt.n	800500e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005000:	4b2c      	ldr	r3, [pc, #176]	; (80050b4 <xTaskPriorityInherit+0xe0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	f1c3 0207 	rsb	r2, r3, #7
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6959      	ldr	r1, [r3, #20]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <xTaskPriorityInherit+0xe4>)
 8005020:	4413      	add	r3, r2
 8005022:	4299      	cmp	r1, r3
 8005024:	d12f      	bne.n	8005086 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fb29 	bl	8003682 <uxListRemove>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	2201      	movs	r2, #1
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43da      	mvns	r2, r3
 8005042:	4b1e      	ldr	r3, [pc, #120]	; (80050bc <xTaskPriorityInherit+0xe8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4013      	ands	r3, r2
 8005048:	4a1c      	ldr	r2, [pc, #112]	; (80050bc <xTaskPriorityInherit+0xe8>)
 800504a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800504c:	4b19      	ldr	r3, [pc, #100]	; (80050b4 <xTaskPriorityInherit+0xe0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	2201      	movs	r2, #1
 800505c:	409a      	lsls	r2, r3
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <xTaskPriorityInherit+0xe8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4313      	orrs	r3, r2
 8005064:	4a15      	ldr	r2, [pc, #84]	; (80050bc <xTaskPriorityInherit+0xe8>)
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <xTaskPriorityInherit+0xe4>)
 8005076:	441a      	add	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7fe faa2 	bl	80035c8 <vListInsertEnd>
 8005084:	e004      	b.n	8005090 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <xTaskPriorityInherit+0xe0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e008      	b.n	80050a8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <xTaskPriorityInherit+0xe0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d201      	bcs.n	80050a8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80050a4:	2301      	movs	r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050a8:	68fb      	ldr	r3, [r7, #12]
	}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200005d0 	.word	0x200005d0
 80050b8:	200005d4 	.word	0x200005d4
 80050bc:	200006d8 	.word	0x200006d8

080050c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d06e      	beq.n	80051b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050d6:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <xTaskPriorityDisinherit+0x100>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d00a      	beq.n	80050f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60fb      	str	r3, [r7, #12]
}
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	60bb      	str	r3, [r7, #8]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005118:	1e5a      	subs	r2, r3, #1
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	429a      	cmp	r2, r3
 8005128:	d044      	beq.n	80051b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800512e:	2b00      	cmp	r3, #0
 8005130:	d140      	bne.n	80051b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3304      	adds	r3, #4
 8005136:	4618      	mov	r0, r3
 8005138:	f7fe faa3 	bl	8003682 <uxListRemove>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d115      	bne.n	800516e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	491f      	ldr	r1, [pc, #124]	; (80051c4 <xTaskPriorityDisinherit+0x104>)
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xTaskPriorityDisinherit+0xae>
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	2201      	movs	r2, #1
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43da      	mvns	r2, r3
 8005164:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <xTaskPriorityDisinherit+0x108>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4013      	ands	r3, r2
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <xTaskPriorityDisinherit+0x108>)
 800516c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	f1c3 0207 	rsb	r2, r3, #7
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	2201      	movs	r2, #1
 8005188:	409a      	lsls	r2, r3
 800518a:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <xTaskPriorityDisinherit+0x108>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4313      	orrs	r3, r2
 8005190:	4a0d      	ldr	r2, [pc, #52]	; (80051c8 <xTaskPriorityDisinherit+0x108>)
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <xTaskPriorityDisinherit+0x104>)
 80051a2:	441a      	add	r2, r3
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f7fe fa0c 	bl	80035c8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051b4:	697b      	ldr	r3, [r7, #20]
	}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	200005d0 	.word	0x200005d0
 80051c4:	200005d4 	.word	0x200005d4
 80051c8:	200006d8 	.word	0x200006d8

080051cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d077      	beq.n	80052d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	60fb      	str	r3, [r7, #12]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d902      	bls.n	8005212 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e002      	b.n	8005218 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	429a      	cmp	r2, r3
 8005220:	d058      	beq.n	80052d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	429a      	cmp	r2, r3
 800522a:	d153      	bne.n	80052d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800522c:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	429a      	cmp	r2, r3
 8005234:	d10a      	bne.n	800524c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	60bb      	str	r3, [r7, #8]
}
 8005248:	bf00      	nop
 800524a:	e7fe      	b.n	800524a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	db04      	blt.n	800526a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f1c3 0207 	rsb	r2, r3, #7
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	6959      	ldr	r1, [r3, #20]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800527a:	4413      	add	r3, r2
 800527c:	4299      	cmp	r1, r3
 800527e:	d129      	bne.n	80052d4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe f9fc 	bl	8003682 <uxListRemove>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	2201      	movs	r2, #1
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	43da      	mvns	r2, r3
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4013      	ands	r3, r2
 80052a2:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	2201      	movs	r2, #1
 80052ac:	409a      	lsls	r2, r3
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052bc:	4613      	mov	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4a06      	ldr	r2, [pc, #24]	; (80052e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80052c6:	441a      	add	r2, r3
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f7fe f97a 	bl	80035c8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052d4:	bf00      	nop
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	200005d0 	.word	0x200005d0
 80052e0:	200005d4 	.word	0x200005d4
 80052e4:	200006d8 	.word	0x200006d8

080052e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <pvTaskIncrementMutexHeldCount+0x24>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <pvTaskIncrementMutexHeldCount+0x24>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052fa:	3201      	adds	r2, #1
 80052fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80052fe:	4b03      	ldr	r3, [pc, #12]	; (800530c <pvTaskIncrementMutexHeldCount+0x24>)
 8005300:	681b      	ldr	r3, [r3, #0]
	}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	200005d0 	.word	0x200005d0

08005310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800531a:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005320:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3304      	adds	r3, #4
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe f9ab 	bl	8003682 <uxListRemove>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10b      	bne.n	800534a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005332:	4b24      	ldr	r3, [pc, #144]	; (80053c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	2201      	movs	r2, #1
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43da      	mvns	r2, r3
 8005340:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4013      	ands	r3, r2
 8005346:	4a20      	ldr	r2, [pc, #128]	; (80053c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005348:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005350:	d10a      	bne.n	8005368 <prvAddCurrentTaskToDelayedList+0x58>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d007      	beq.n	8005368 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3304      	adds	r3, #4
 800535e:	4619      	mov	r1, r3
 8005360:	481a      	ldr	r0, [pc, #104]	; (80053cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005362:	f7fe f931 	bl	80035c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005366:	e026      	b.n	80053b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005370:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d209      	bcs.n	8005394 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f7fe f93f 	bl	8003610 <vListInsert>
}
 8005392:	e010      	b.n	80053b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f7fe f935 	bl	8003610 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d202      	bcs.n	80053b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80053b0:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6013      	str	r3, [r2, #0]
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200006d4 	.word	0x200006d4
 80053c4:	200005d0 	.word	0x200005d0
 80053c8:	200006d8 	.word	0x200006d8
 80053cc:	200006bc 	.word	0x200006bc
 80053d0:	2000068c 	.word	0x2000068c
 80053d4:	20000688 	.word	0x20000688
 80053d8:	200006f0 	.word	0x200006f0

080053dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3b04      	subs	r3, #4
 80053ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3b04      	subs	r3, #4
 80053fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f023 0201 	bic.w	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3b04      	subs	r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800540c:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <pxPortInitialiseStack+0x64>)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3b14      	subs	r3, #20
 8005416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3b04      	subs	r3, #4
 8005422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f06f 0202 	mvn.w	r2, #2
 800542a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3b20      	subs	r3, #32
 8005430:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	08005445 	.word	0x08005445

08005444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvTaskExitError+0x54>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d00a      	beq.n	800546e <prvTaskExitError+0x2a>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	60fb      	str	r3, [r7, #12]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <prvTaskExitError+0x28>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60bb      	str	r3, [r7, #8]
}
 8005480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005482:	bf00      	nop
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0fc      	beq.n	8005484 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	2000000c 	.word	0x2000000c
 800549c:	00000000 	.word	0x00000000

080054a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <pxCurrentTCBConst2>)
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	6808      	ldr	r0, [r1, #0]
 80054a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054aa:	f380 8809 	msr	PSP, r0
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8811 	msr	BASEPRI, r0
 80054ba:	4770      	bx	lr
 80054bc:	f3af 8000 	nop.w

080054c0 <pxCurrentTCBConst2>:
 80054c0:	200005d0 	.word	0x200005d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop

080054c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054c8:	4808      	ldr	r0, [pc, #32]	; (80054ec <prvPortStartFirstTask+0x24>)
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	6800      	ldr	r0, [r0, #0]
 80054ce:	f380 8808 	msr	MSP, r0
 80054d2:	f04f 0000 	mov.w	r0, #0
 80054d6:	f380 8814 	msr	CONTROL, r0
 80054da:	b662      	cpsie	i
 80054dc:	b661      	cpsie	f
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	df00      	svc	0
 80054e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054ea:	bf00      	nop
 80054ec:	e000ed08 	.word	0xe000ed08

080054f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054f6:	4b46      	ldr	r3, [pc, #280]	; (8005610 <xPortStartScheduler+0x120>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a46      	ldr	r2, [pc, #280]	; (8005614 <xPortStartScheduler+0x124>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10a      	bne.n	8005516 <xPortStartScheduler+0x26>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	613b      	str	r3, [r7, #16]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005516:	4b3e      	ldr	r3, [pc, #248]	; (8005610 <xPortStartScheduler+0x120>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a3f      	ldr	r2, [pc, #252]	; (8005618 <xPortStartScheduler+0x128>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10a      	bne.n	8005536 <xPortStartScheduler+0x46>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60fb      	str	r3, [r7, #12]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <xPortStartScheduler+0x12c>)
 8005538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	22ff      	movs	r2, #255	; 0xff
 8005546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4b31      	ldr	r3, [pc, #196]	; (8005620 <xPortStartScheduler+0x130>)
 800555c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800555e:	4b31      	ldr	r3, [pc, #196]	; (8005624 <xPortStartScheduler+0x134>)
 8005560:	2207      	movs	r2, #7
 8005562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005564:	e009      	b.n	800557a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005566:	4b2f      	ldr	r3, [pc, #188]	; (8005624 <xPortStartScheduler+0x134>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3b01      	subs	r3, #1
 800556c:	4a2d      	ldr	r2, [pc, #180]	; (8005624 <xPortStartScheduler+0x134>)
 800556e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	b2db      	uxtb	r3, r3
 8005578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b80      	cmp	r3, #128	; 0x80
 8005584:	d0ef      	beq.n	8005566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005586:	4b27      	ldr	r3, [pc, #156]	; (8005624 <xPortStartScheduler+0x134>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f1c3 0307 	rsb	r3, r3, #7
 800558e:	2b04      	cmp	r3, #4
 8005590:	d00a      	beq.n	80055a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	60bb      	str	r3, [r7, #8]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055a8:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <xPortStartScheduler+0x134>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <xPortStartScheduler+0x134>)
 80055b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <xPortStartScheduler+0x134>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055ba:	4a1a      	ldr	r2, [pc, #104]	; (8005624 <xPortStartScheduler+0x134>)
 80055bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055c6:	4b18      	ldr	r3, [pc, #96]	; (8005628 <xPortStartScheduler+0x138>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <xPortStartScheduler+0x138>)
 80055cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <xPortStartScheduler+0x138>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a14      	ldr	r2, [pc, #80]	; (8005628 <xPortStartScheduler+0x138>)
 80055d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055de:	f000 f8dd 	bl	800579c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055e2:	4b12      	ldr	r3, [pc, #72]	; (800562c <xPortStartScheduler+0x13c>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055e8:	f000 f8fc 	bl	80057e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <xPortStartScheduler+0x140>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <xPortStartScheduler+0x140>)
 80055f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055f8:	f7ff ff66 	bl	80054c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055fc:	f7ff fa86 	bl	8004b0c <vTaskSwitchContext>
	prvTaskExitError();
 8005600:	f7ff ff20 	bl	8005444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	e000ed00 	.word	0xe000ed00
 8005614:	410fc271 	.word	0x410fc271
 8005618:	410fc270 	.word	0x410fc270
 800561c:	e000e400 	.word	0xe000e400
 8005620:	200006fc 	.word	0x200006fc
 8005624:	20000700 	.word	0x20000700
 8005628:	e000ed20 	.word	0xe000ed20
 800562c:	2000000c 	.word	0x2000000c
 8005630:	e000ef34 	.word	0xe000ef34

08005634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	607b      	str	r3, [r7, #4]
}
 800564c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800564e:	4b0f      	ldr	r3, [pc, #60]	; (800568c <vPortEnterCritical+0x58>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3301      	adds	r3, #1
 8005654:	4a0d      	ldr	r2, [pc, #52]	; (800568c <vPortEnterCritical+0x58>)
 8005656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005658:	4b0c      	ldr	r3, [pc, #48]	; (800568c <vPortEnterCritical+0x58>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d10f      	bne.n	8005680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <vPortEnterCritical+0x5c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <vPortEnterCritical+0x4c>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	603b      	str	r3, [r7, #0]
}
 800567c:	bf00      	nop
 800567e:	e7fe      	b.n	800567e <vPortEnterCritical+0x4a>
	}
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <vPortExitCritical+0x50>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <vPortExitCritical+0x24>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	607b      	str	r3, [r7, #4]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80056b8:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <vPortExitCritical+0x50>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3b01      	subs	r3, #1
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <vPortExitCritical+0x50>)
 80056c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056c2:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <vPortExitCritical+0x50>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <vPortExitCritical+0x42>
 80056ca:	2300      	movs	r3, #0
 80056cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	f383 8811 	msr	BASEPRI, r3
}
 80056d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	2000000c 	.word	0x2000000c
	...

080056f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056f0:	f3ef 8009 	mrs	r0, PSP
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <pxCurrentTCBConst>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	f01e 0f10 	tst.w	lr, #16
 8005700:	bf08      	it	eq
 8005702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570a:	6010      	str	r0, [r2, #0]
 800570c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005714:	f380 8811 	msr	BASEPRI, r0
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f7ff f9f4 	bl	8004b0c <vTaskSwitchContext>
 8005724:	f04f 0000 	mov.w	r0, #0
 8005728:	f380 8811 	msr	BASEPRI, r0
 800572c:	bc09      	pop	{r0, r3}
 800572e:	6819      	ldr	r1, [r3, #0]
 8005730:	6808      	ldr	r0, [r1, #0]
 8005732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005736:	f01e 0f10 	tst.w	lr, #16
 800573a:	bf08      	it	eq
 800573c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005740:	f380 8809 	msr	PSP, r0
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	f3af 8000 	nop.w

08005750 <pxCurrentTCBConst>:
 8005750:	200005d0 	.word	0x200005d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop

08005758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
}
 8005770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005772:	f7ff f913 	bl	800499c <xTaskIncrementTick>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <SysTick_Handler+0x40>)
 800577e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	2300      	movs	r3, #0
 8005786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	f383 8811 	msr	BASEPRI, r3
}
 800578e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005790:	bf00      	nop
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <vPortSetupTimerInterrupt+0x34>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057a6:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <vPortSetupTimerInterrupt+0x38>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <vPortSetupTimerInterrupt+0x3c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <vPortSetupTimerInterrupt+0x40>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <vPortSetupTimerInterrupt+0x44>)
 80057ba:	3b01      	subs	r3, #1
 80057bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <vPortSetupTimerInterrupt+0x34>)
 80057c0:	2207      	movs	r2, #7
 80057c2:	601a      	str	r2, [r3, #0]
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000e010 	.word	0xe000e010
 80057d4:	e000e018 	.word	0xe000e018
 80057d8:	20000000 	.word	0x20000000
 80057dc:	10624dd3 	.word	0x10624dd3
 80057e0:	e000e014 	.word	0xe000e014

080057e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80057f4 <vPortEnableVFP+0x10>
 80057e8:	6801      	ldr	r1, [r0, #0]
 80057ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80057ee:	6001      	str	r1, [r0, #0]
 80057f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057f2:	bf00      	nop
 80057f4:	e000ed88 	.word	0xe000ed88

080057f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057fe:	f3ef 8305 	mrs	r3, IPSR
 8005802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b0f      	cmp	r3, #15
 8005808:	d914      	bls.n	8005834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800580a:	4a17      	ldr	r2, [pc, #92]	; (8005868 <vPortValidateInterruptPriority+0x70>)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005814:	4b15      	ldr	r3, [pc, #84]	; (800586c <vPortValidateInterruptPriority+0x74>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	7afa      	ldrb	r2, [r7, #11]
 800581a:	429a      	cmp	r2, r3
 800581c:	d20a      	bcs.n	8005834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	607b      	str	r3, [r7, #4]
}
 8005830:	bf00      	nop
 8005832:	e7fe      	b.n	8005832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005834:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <vPortValidateInterruptPriority+0x78>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800583c:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <vPortValidateInterruptPriority+0x7c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d90a      	bls.n	800585a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	603b      	str	r3, [r7, #0]
}
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <vPortValidateInterruptPriority+0x60>
	}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	e000e3f0 	.word	0xe000e3f0
 800586c:	200006fc 	.word	0x200006fc
 8005870:	e000ed0c 	.word	0xe000ed0c
 8005874:	20000700 	.word	0x20000700

08005878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08a      	sub	sp, #40	; 0x28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005884:	f7fe ffe0 	bl	8004848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005888:	4b5b      	ldr	r3, [pc, #364]	; (80059f8 <pvPortMalloc+0x180>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005890:	f000 f920 	bl	8005ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005894:	4b59      	ldr	r3, [pc, #356]	; (80059fc <pvPortMalloc+0x184>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	f040 8093 	bne.w	80059c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01d      	beq.n	80058e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80058a8:	2208      	movs	r2, #8
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4413      	add	r3, r2
 80058ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d014      	beq.n	80058e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f023 0307 	bic.w	r3, r3, #7
 80058c0:	3308      	adds	r3, #8
 80058c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <pvPortMalloc+0x6c>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	617b      	str	r3, [r7, #20]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d06e      	beq.n	80059c8 <pvPortMalloc+0x150>
 80058ea:	4b45      	ldr	r3, [pc, #276]	; (8005a00 <pvPortMalloc+0x188>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d869      	bhi.n	80059c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058f4:	4b43      	ldr	r3, [pc, #268]	; (8005a04 <pvPortMalloc+0x18c>)
 80058f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058f8:	4b42      	ldr	r3, [pc, #264]	; (8005a04 <pvPortMalloc+0x18c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058fe:	e004      	b.n	800590a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	d903      	bls.n	800591c <pvPortMalloc+0xa4>
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f1      	bne.n	8005900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800591c:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <pvPortMalloc+0x180>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005922:	429a      	cmp	r2, r3
 8005924:	d050      	beq.n	80059c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2208      	movs	r2, #8
 800592c:	4413      	add	r3, r2
 800592e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	2308      	movs	r3, #8
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	429a      	cmp	r2, r3
 8005946:	d91f      	bls.n	8005988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4413      	add	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <pvPortMalloc+0xf8>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	613b      	str	r3, [r7, #16]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	1ad2      	subs	r2, r2, r3
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005982:	69b8      	ldr	r0, [r7, #24]
 8005984:	f000 f908 	bl	8005b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005988:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <pvPortMalloc+0x188>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <pvPortMalloc+0x188>)
 8005994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005996:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <pvPortMalloc+0x188>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <pvPortMalloc+0x190>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d203      	bcs.n	80059aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059a2:	4b17      	ldr	r3, [pc, #92]	; (8005a00 <pvPortMalloc+0x188>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <pvPortMalloc+0x190>)
 80059a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	4b13      	ldr	r3, [pc, #76]	; (80059fc <pvPortMalloc+0x184>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80059be:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <pvPortMalloc+0x194>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	4a11      	ldr	r2, [pc, #68]	; (8005a0c <pvPortMalloc+0x194>)
 80059c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059c8:	f7fe ff4c 	bl	8004864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <pvPortMalloc+0x174>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <pvPortMalloc+0x172>
	return pvReturn;
 80059ec:	69fb      	ldr	r3, [r7, #28]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3728      	adds	r7, #40	; 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20002e1c 	.word	0x20002e1c
 80059fc:	20002e30 	.word	0x20002e30
 8005a00:	20002e20 	.word	0x20002e20
 8005a04:	20002e14 	.word	0x20002e14
 8005a08:	20002e24 	.word	0x20002e24
 8005a0c:	20002e28 	.word	0x20002e28

08005a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d04d      	beq.n	8005abe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a22:	2308      	movs	r3, #8
 8005a24:	425b      	negs	r3, r3
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4413      	add	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <vPortFree+0xb8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <vPortFree+0x44>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	60fb      	str	r3, [r7, #12]
}
 8005a50:	bf00      	nop
 8005a52:	e7fe      	b.n	8005a52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <vPortFree+0x62>
	__asm volatile
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	60bb      	str	r3, [r7, #8]
}
 8005a6e:	bf00      	nop
 8005a70:	e7fe      	b.n	8005a70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <vPortFree+0xb8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01e      	beq.n	8005abe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d11a      	bne.n	8005abe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <vPortFree+0xb8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	401a      	ands	r2, r3
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a98:	f7fe fed6 	bl	8004848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <vPortFree+0xbc>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <vPortFree+0xbc>)
 8005aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005aaa:	6938      	ldr	r0, [r7, #16]
 8005aac:	f000 f874 	bl	8005b98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <vPortFree+0xc0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a06      	ldr	r2, [pc, #24]	; (8005ad0 <vPortFree+0xc0>)
 8005ab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005aba:	f7fe fed3 	bl	8004864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20002e30 	.word	0x20002e30
 8005acc:	20002e20 	.word	0x20002e20
 8005ad0:	20002e2c 	.word	0x20002e2c

08005ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ada:	f242 7310 	movw	r3, #10000	; 0x2710
 8005ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ae0:	4b27      	ldr	r3, [pc, #156]	; (8005b80 <prvHeapInit+0xac>)
 8005ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3307      	adds	r3, #7
 8005af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <prvHeapInit+0xac>)
 8005b04:	4413      	add	r3, r2
 8005b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <prvHeapInit+0xb0>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b12:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <prvHeapInit+0xb0>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b20:	2208      	movs	r2, #8
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <prvHeapInit+0xb4>)
 8005b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b36:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <prvHeapInit+0xb4>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b3e:	4b12      	ldr	r3, [pc, #72]	; (8005b88 <prvHeapInit+0xb4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b54:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <prvHeapInit+0xb4>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <prvHeapInit+0xb8>)
 8005b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <prvHeapInit+0xbc>)
 8005b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <prvHeapInit+0xc0>)
 8005b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b72:	601a      	str	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	20000704 	.word	0x20000704
 8005b84:	20002e14 	.word	0x20002e14
 8005b88:	20002e1c 	.word	0x20002e1c
 8005b8c:	20002e24 	.word	0x20002e24
 8005b90:	20002e20 	.word	0x20002e20
 8005b94:	20002e30 	.word	0x20002e30

08005b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ba0:	4b28      	ldr	r3, [pc, #160]	; (8005c44 <prvInsertBlockIntoFreeList+0xac>)
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e002      	b.n	8005bac <prvInsertBlockIntoFreeList+0x14>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d8f7      	bhi.n	8005ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d108      	bne.n	8005bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	441a      	add	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d118      	bne.n	8005c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <prvInsertBlockIntoFreeList+0xb0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d00d      	beq.n	8005c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	441a      	add	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e008      	b.n	8005c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <prvInsertBlockIntoFreeList+0xb0>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e003      	b.n	8005c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d002      	beq.n	8005c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20002e14 	.word	0x20002e14
 8005c48:	20002e1c 	.word	0x20002e1c

08005c4c <__libc_init_array>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	4d0d      	ldr	r5, [pc, #52]	; (8005c84 <__libc_init_array+0x38>)
 8005c50:	4c0d      	ldr	r4, [pc, #52]	; (8005c88 <__libc_init_array+0x3c>)
 8005c52:	1b64      	subs	r4, r4, r5
 8005c54:	10a4      	asrs	r4, r4, #2
 8005c56:	2600      	movs	r6, #0
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	d109      	bne.n	8005c70 <__libc_init_array+0x24>
 8005c5c:	4d0b      	ldr	r5, [pc, #44]	; (8005c8c <__libc_init_array+0x40>)
 8005c5e:	4c0c      	ldr	r4, [pc, #48]	; (8005c90 <__libc_init_array+0x44>)
 8005c60:	f000 f8f2 	bl	8005e48 <_init>
 8005c64:	1b64      	subs	r4, r4, r5
 8005c66:	10a4      	asrs	r4, r4, #2
 8005c68:	2600      	movs	r6, #0
 8005c6a:	42a6      	cmp	r6, r4
 8005c6c:	d105      	bne.n	8005c7a <__libc_init_array+0x2e>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c74:	4798      	blx	r3
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7ee      	b.n	8005c58 <__libc_init_array+0xc>
 8005c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7e:	4798      	blx	r3
 8005c80:	3601      	adds	r6, #1
 8005c82:	e7f2      	b.n	8005c6a <__libc_init_array+0x1e>
 8005c84:	08005f6c 	.word	0x08005f6c
 8005c88:	08005f6c 	.word	0x08005f6c
 8005c8c:	08005f6c 	.word	0x08005f6c
 8005c90:	08005f70 	.word	0x08005f70

08005c94 <__retarget_lock_acquire_recursive>:
 8005c94:	4770      	bx	lr

08005c96 <__retarget_lock_release_recursive>:
 8005c96:	4770      	bx	lr

08005c98 <memcpy>:
 8005c98:	440a      	add	r2, r1
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ca0:	d100      	bne.n	8005ca4 <memcpy+0xc>
 8005ca2:	4770      	bx	lr
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cae:	4291      	cmp	r1, r2
 8005cb0:	d1f9      	bne.n	8005ca6 <memcpy+0xe>
 8005cb2:	bd10      	pop	{r4, pc}

08005cb4 <memset>:
 8005cb4:	4402      	add	r2, r0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d100      	bne.n	8005cbe <memset+0xa>
 8005cbc:	4770      	bx	lr
 8005cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc2:	e7f9      	b.n	8005cb8 <memset+0x4>

08005cc4 <_free_r>:
 8005cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d044      	beq.n	8005d54 <_free_r+0x90>
 8005cca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cce:	9001      	str	r0, [sp, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005cd6:	bfb8      	it	lt
 8005cd8:	18e4      	addlt	r4, r4, r3
 8005cda:	f000 f8a9 	bl	8005e30 <__malloc_lock>
 8005cde:	4a1e      	ldr	r2, [pc, #120]	; (8005d58 <_free_r+0x94>)
 8005ce0:	9801      	ldr	r0, [sp, #4]
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	b933      	cbnz	r3, 8005cf4 <_free_r+0x30>
 8005ce6:	6063      	str	r3, [r4, #4]
 8005ce8:	6014      	str	r4, [r2, #0]
 8005cea:	b003      	add	sp, #12
 8005cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cf0:	f000 b8a4 	b.w	8005e3c <__malloc_unlock>
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d908      	bls.n	8005d0a <_free_r+0x46>
 8005cf8:	6825      	ldr	r5, [r4, #0]
 8005cfa:	1961      	adds	r1, r4, r5
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	bf01      	itttt	eq
 8005d00:	6819      	ldreq	r1, [r3, #0]
 8005d02:	685b      	ldreq	r3, [r3, #4]
 8005d04:	1949      	addeq	r1, r1, r5
 8005d06:	6021      	streq	r1, [r4, #0]
 8005d08:	e7ed      	b.n	8005ce6 <_free_r+0x22>
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	b10b      	cbz	r3, 8005d14 <_free_r+0x50>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d9fa      	bls.n	8005d0a <_free_r+0x46>
 8005d14:	6811      	ldr	r1, [r2, #0]
 8005d16:	1855      	adds	r5, r2, r1
 8005d18:	42a5      	cmp	r5, r4
 8005d1a:	d10b      	bne.n	8005d34 <_free_r+0x70>
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	4421      	add	r1, r4
 8005d20:	1854      	adds	r4, r2, r1
 8005d22:	42a3      	cmp	r3, r4
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	d1e0      	bne.n	8005cea <_free_r+0x26>
 8005d28:	681c      	ldr	r4, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	6053      	str	r3, [r2, #4]
 8005d2e:	4421      	add	r1, r4
 8005d30:	6011      	str	r1, [r2, #0]
 8005d32:	e7da      	b.n	8005cea <_free_r+0x26>
 8005d34:	d902      	bls.n	8005d3c <_free_r+0x78>
 8005d36:	230c      	movs	r3, #12
 8005d38:	6003      	str	r3, [r0, #0]
 8005d3a:	e7d6      	b.n	8005cea <_free_r+0x26>
 8005d3c:	6825      	ldr	r5, [r4, #0]
 8005d3e:	1961      	adds	r1, r4, r5
 8005d40:	428b      	cmp	r3, r1
 8005d42:	bf04      	itt	eq
 8005d44:	6819      	ldreq	r1, [r3, #0]
 8005d46:	685b      	ldreq	r3, [r3, #4]
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	bf04      	itt	eq
 8005d4c:	1949      	addeq	r1, r1, r5
 8005d4e:	6021      	streq	r1, [r4, #0]
 8005d50:	6054      	str	r4, [r2, #4]
 8005d52:	e7ca      	b.n	8005cea <_free_r+0x26>
 8005d54:	b003      	add	sp, #12
 8005d56:	bd30      	pop	{r4, r5, pc}
 8005d58:	20002e38 	.word	0x20002e38

08005d5c <cleanup_glue>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	460c      	mov	r4, r1
 8005d60:	6809      	ldr	r1, [r1, #0]
 8005d62:	4605      	mov	r5, r0
 8005d64:	b109      	cbz	r1, 8005d6a <cleanup_glue+0xe>
 8005d66:	f7ff fff9 	bl	8005d5c <cleanup_glue>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d72:	f7ff bfa7 	b.w	8005cc4 <_free_r>
	...

08005d78 <_reclaim_reent>:
 8005d78:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <_reclaim_reent+0xb4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4283      	cmp	r3, r0
 8005d7e:	b570      	push	{r4, r5, r6, lr}
 8005d80:	4604      	mov	r4, r0
 8005d82:	d051      	beq.n	8005e28 <_reclaim_reent+0xb0>
 8005d84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005d86:	b143      	cbz	r3, 8005d9a <_reclaim_reent+0x22>
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d14a      	bne.n	8005e24 <_reclaim_reent+0xac>
 8005d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d90:	6819      	ldr	r1, [r3, #0]
 8005d92:	b111      	cbz	r1, 8005d9a <_reclaim_reent+0x22>
 8005d94:	4620      	mov	r0, r4
 8005d96:	f7ff ff95 	bl	8005cc4 <_free_r>
 8005d9a:	6961      	ldr	r1, [r4, #20]
 8005d9c:	b111      	cbz	r1, 8005da4 <_reclaim_reent+0x2c>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f7ff ff90 	bl	8005cc4 <_free_r>
 8005da4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005da6:	b111      	cbz	r1, 8005dae <_reclaim_reent+0x36>
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7ff ff8b 	bl	8005cc4 <_free_r>
 8005dae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005db0:	b111      	cbz	r1, 8005db8 <_reclaim_reent+0x40>
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7ff ff86 	bl	8005cc4 <_free_r>
 8005db8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005dba:	b111      	cbz	r1, 8005dc2 <_reclaim_reent+0x4a>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f7ff ff81 	bl	8005cc4 <_free_r>
 8005dc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005dc4:	b111      	cbz	r1, 8005dcc <_reclaim_reent+0x54>
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff ff7c 	bl	8005cc4 <_free_r>
 8005dcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005dce:	b111      	cbz	r1, 8005dd6 <_reclaim_reent+0x5e>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7ff ff77 	bl	8005cc4 <_free_r>
 8005dd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005dd8:	b111      	cbz	r1, 8005de0 <_reclaim_reent+0x68>
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff ff72 	bl	8005cc4 <_free_r>
 8005de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005de2:	b111      	cbz	r1, 8005dea <_reclaim_reent+0x72>
 8005de4:	4620      	mov	r0, r4
 8005de6:	f7ff ff6d 	bl	8005cc4 <_free_r>
 8005dea:	69a3      	ldr	r3, [r4, #24]
 8005dec:	b1e3      	cbz	r3, 8005e28 <_reclaim_reent+0xb0>
 8005dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005df0:	4620      	mov	r0, r4
 8005df2:	4798      	blx	r3
 8005df4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005df6:	b1b9      	cbz	r1, 8005e28 <_reclaim_reent+0xb0>
 8005df8:	4620      	mov	r0, r4
 8005dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005dfe:	f7ff bfad 	b.w	8005d5c <cleanup_glue>
 8005e02:	5949      	ldr	r1, [r1, r5]
 8005e04:	b941      	cbnz	r1, 8005e18 <_reclaim_reent+0xa0>
 8005e06:	3504      	adds	r5, #4
 8005e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0a:	2d80      	cmp	r5, #128	; 0x80
 8005e0c:	68d9      	ldr	r1, [r3, #12]
 8005e0e:	d1f8      	bne.n	8005e02 <_reclaim_reent+0x8a>
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7ff ff57 	bl	8005cc4 <_free_r>
 8005e16:	e7ba      	b.n	8005d8e <_reclaim_reent+0x16>
 8005e18:	680e      	ldr	r6, [r1, #0]
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f7ff ff52 	bl	8005cc4 <_free_r>
 8005e20:	4631      	mov	r1, r6
 8005e22:	e7ef      	b.n	8005e04 <_reclaim_reent+0x8c>
 8005e24:	2500      	movs	r5, #0
 8005e26:	e7ef      	b.n	8005e08 <_reclaim_reent+0x90>
 8005e28:	bd70      	pop	{r4, r5, r6, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000010 	.word	0x20000010

08005e30 <__malloc_lock>:
 8005e30:	4801      	ldr	r0, [pc, #4]	; (8005e38 <__malloc_lock+0x8>)
 8005e32:	f7ff bf2f 	b.w	8005c94 <__retarget_lock_acquire_recursive>
 8005e36:	bf00      	nop
 8005e38:	20002e34 	.word	0x20002e34

08005e3c <__malloc_unlock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	; (8005e44 <__malloc_unlock+0x8>)
 8005e3e:	f7ff bf2a 	b.w	8005c96 <__retarget_lock_release_recursive>
 8005e42:	bf00      	nop
 8005e44:	20002e34 	.word	0x20002e34

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
