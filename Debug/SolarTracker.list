
SolarTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed8  08007ed8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed8  08007ed8  00017ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ee0  08007ee0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee0  08007ee0  00017ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ee4  08007ee4  00017ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e3c  20000074  08007f5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002eb0  08007f5c  00022eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b69c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a6  00000000  00000000  0003b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0003ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001560  00000000  00000000  000404a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c8a  00000000  00000000  00041a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001954b  00000000  00000000  0004668a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8367  00000000  00000000  0005fbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137f3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006768  00000000  00000000  00137f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d50 	.word	0x08007d50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007d50 	.word	0x08007d50

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	20000144 	.word	0x20000144

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b092      	sub	sp, #72	; 0x48
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fd4e 	bl	800106e <HAL_Init>
  /* USER CODE BEGIN Init */
//  BSP_LED_Init(LED3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f86d 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f931 	bl	800083c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005da:	f000 f8ff 	bl	80007dc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005de:	f000 f8ad 	bl	800073c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 7, 6);
 80005e2:	2206      	movs	r2, #6
 80005e4:	2107      	movs	r1, #7
 80005e6:	2025      	movs	r0, #37	; 0x25
 80005e8:	f000 fe32 	bl	8001250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 80005ec:	2025      	movs	r0, #37	; 0x25
 80005ee:	f000 fe4b 	bl	8001288 <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <main+0xc8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a26      	ldr	r2, [pc, #152]	; (8000690 <main+0xc8>)
 80005f8:	f043 0320 	orr.w	r3, r3, #32
 80005fc:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SPI_sem */
  osSemaphoreDef(SPI_sem);
 80005fe:	2300      	movs	r3, #0
 8000600:	643b      	str	r3, [r7, #64]	; 0x40
 8000602:	2300      	movs	r3, #0
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  SPI_semHandle = osSemaphoreCreate(osSemaphore(SPI_sem), 1);
 8000606:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800060a:	2101      	movs	r1, #1
 800060c:	4618      	mov	r0, r3
 800060e:	f003 ffb9 	bl	8004584 <osSemaphoreCreate>
 8000612:	4603      	mov	r3, r0
 8000614:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <main+0xcc>)
 8000616:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_sem */
  osSemaphoreDef(UART_sem);
 8000618:	2300      	movs	r3, #0
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
 800061c:	2300      	movs	r3, #0
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  UART_semHandle = osSemaphoreCreate(osSemaphore(UART_sem), 1);
 8000620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f003 ffac 	bl	8004584 <osSemaphoreCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <main+0xd0>)
 8000630:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 8000632:	2200      	movs	r2, #0
 8000634:	2164      	movs	r1, #100	; 0x64
 8000636:	2002      	movs	r0, #2
 8000638:	f004 f978 	bl	800492c <xQueueGenericCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <main+0xd4>)
 8000640:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, uartTaskFunc, osPriorityNormal, 0, 512);
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <main+0xd8>)
 8000644:	f107 041c 	add.w	r4, r7, #28
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f003 ff31 	bl	80044c4 <osThreadCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0f      	ldr	r2, [pc, #60]	; (80006a4 <main+0xdc>)
 8000666:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiTask */
  osThreadDef(spiTask, spiTaskFunc, osPriorityHigh, 0, 512);
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <main+0xe0>)
 800066a:	463c      	mov	r4, r7
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spiTaskHandle = osThreadCreate(osThread(spiTask), NULL);
 800067a:	463b      	mov	r3, r7
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f003 ff20 	bl	80044c4 <osThreadCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a09      	ldr	r2, [pc, #36]	; (80006ac <main+0xe4>)
 8000688:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800068a:	f003 ff14 	bl	80044b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068e:	e7fe      	b.n	800068e <main+0xc6>
 8000690:	40013800 	.word	0x40013800
 8000694:	200004a8 	.word	0x200004a8
 8000698:	200004ac 	.word	0x200004ac
 800069c:	20000514 	.word	0x20000514
 80006a0:	08007d7c 	.word	0x08007d7c
 80006a4:	200004a0 	.word	0x200004a0
 80006a8:	08007d98 	.word	0x08007d98
 80006ac:	200004a4 	.word	0x200004a4

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 fc3d 	bl	8006f3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d6:	f000 ff75 	bl	80015c4 <HAL_PWREx_ControlVoltageScaling>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e0:	f000 faa8 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e4:	2310      	movs	r3, #16
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f0:	2360      	movs	r3, #96	; 0x60
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 ffb7 	bl	8001670 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000708:	f000 fa94 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fbb7 	bl	8001e98 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000730:	f000 fa80 	bl	8000c34 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3758      	adds	r7, #88	; 0x58
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */
	GPIO_InitTypeDef GPIO_InitStruct;
	//__HAL_RCC_GPIOA_CLK_ENABLE();
	/* SPI MOSI GPIO pin configuration  */
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000746:	2305      	movs	r3, #5
 8000748:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 fda7 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_SPI1_Init+0x98>)
 8000758:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <MX_SPI1_Init+0x9c>)
 800075a:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_SPI1_Init+0x98>)
 800075e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000762:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_SPI1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_SPI1_Init+0x98>)
 800076c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_SPI1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI1_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_SPI1_Init+0x98>)
 8000780:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_SPI1_Init+0x98>)
 8000788:	2230      	movs	r2, #48	; 0x30
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_SPI1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_SPI1_Init+0x98>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_SPI1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_SPI1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <MX_SPI1_Init+0x98>)
 80007b2:	f002 f8af 	bl	8002914 <HAL_SPI_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_SPI1_Init+0x84>
  {
    Error_Handler();
 80007bc:	f000 fa3a 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  SPI1->CR1 |= SPI_CR1_SSM;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MX_SPI1_Init+0x9c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <MX_SPI1_Init+0x9c>)
 80007c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ca:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200003b8 	.word	0x200003b8
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_USART1_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	; (8000838 <MX_USART1_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007e6:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_USART1_UART_Init+0x58>)
 80007e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART1_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART1_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART1_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART1_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART1_UART_Init+0x58>)
 8000820:	f003 fa08 	bl	8003c34 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 fa03 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000041c 	.word	0x2000041c
 8000838:	40013800 	.word	0x40013800

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_GPIO_Init+0x5c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	4a10      	ldr	r2, [pc, #64]	; (8000898 <MX_GPIO_Init+0x5c>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_GPIO_Init+0x5c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	f003 0301 	and.w	r3, r3, #1
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2110      	movs	r1, #16
 800086c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000870:	f000 fe82 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000874:	2310      	movs	r3, #16
 8000876:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fd0a 	bl	80012a4 <HAL_GPIO_Init>

}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000

0800089c <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <USART1_IRQHandler+0xc4>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <USART1_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <USART1_IRQHandler+0xc4>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <USART1_IRQHandler+0xc4>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <USART1_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <USART1_IRQHandler+0xc4>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <USART1_IRQHandler+0xc4>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d002      	beq.n	80008dc <USART1_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <USART1_IRQHandler+0xc4>)
 80008d8:	2202      	movs	r2, #2
 80008da:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 80008dc:	4b20      	ldr	r3, [pc, #128]	; (8000960 <USART1_IRQHandler+0xc4>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f003 0320 	and.w	r3, r3, #32
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d036      	beq.n	8000956 <USART1_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <USART1_IRQHandler+0xc4>)
 80008ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b0d      	cmp	r3, #13
 80008f4:	d002      	beq.n	80008fc <USART1_IRQHandler+0x60>
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b0a      	cmp	r3, #10
 80008fa:	d119      	bne.n	8000930 <USART1_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <USART1_IRQHandler+0xc8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d028      	beq.n	8000956 <USART1_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <USART1_IRQHandler+0xc8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	1c5a      	adds	r2, r3, #1
 800090a:	4916      	ldr	r1, [pc, #88]	; (8000964 <USART1_IRQHandler+0xc8>)
 800090c:	600a      	str	r2, [r1, #0]
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <USART1_IRQHandler+0xcc>)
 8000910:	2100      	movs	r1, #0
 8000912:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <USART1_IRQHandler+0xd0>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	463a      	mov	r2, r7
 800091a:	2300      	movs	r3, #0
 800091c:	4912      	ldr	r1, [pc, #72]	; (8000968 <USART1_IRQHandler+0xcc>)
 800091e:	f004 f9c7 	bl	8004cb0 <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <USART1_IRQHandler+0xc8>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <USART1_IRQHandler+0xd4>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 800092e:	e012      	b.n	8000956 <USART1_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b24      	cmp	r3, #36	; 0x24
 8000934:	d003      	beq.n	800093e <USART1_IRQHandler+0xa2>
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <USART1_IRQHandler+0xc8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2bc8      	cmp	r3, #200	; 0xc8
 800093c:	d102      	bne.n	8000944 <USART1_IRQHandler+0xa8>
				rx_index = 0;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <USART1_IRQHandler+0xc8>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <USART1_IRQHandler+0xc8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	4906      	ldr	r1, [pc, #24]	; (8000964 <USART1_IRQHandler+0xc8>)
 800094c:	600a      	str	r2, [r1, #0]
 800094e:	4906      	ldr	r1, [pc, #24]	; (8000968 <USART1_IRQHandler+0xcc>)
 8000950:	79fa      	ldrb	r2, [r7, #7]
 8000952:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8000954:	e7ff      	b.n	8000956 <USART1_IRQHandler+0xba>
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40013800 	.word	0x40013800
 8000964:	20000518 	.word	0x20000518
 8000968:	2000051c 	.word	0x2000051c
 800096c:	20000514 	.word	0x20000514
 8000970:	20000344 	.word	0x20000344

08000974 <uartTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_uartTaskFunc */
void uartTaskFunc(void const * argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	static uint8_t valid_count = 0;

  /* Infinite loop */
  for(;;)
  {
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <uartTaskFunc+0xa8>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f004 fc1d 	bl	80051c0 <uxQueueMessagesWaitingFromISR>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0f7      	beq.n	800097c <uartTaskFunc+0x8>
	  {
		  if(valid_count == 0) {
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <uartTaskFunc+0xac>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d106      	bne.n	80009a2 <uartTaskFunc+0x2e>
			  //osSemaphoreAcquire(UART_semHandle, osWaitForever); //Grab semaphore for new message
			  xSemaphoreTake(UART_semHandle, portMAX_DELAY);
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <uartTaskFunc+0xb0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	4618      	mov	r0, r3
 800099e:	f004 fb03 	bl	8004fa8 <xQueueSemaphoreTake>
		  }

	      xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <uartTaskFunc+0xa8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2201      	movs	r2, #1
 80009a8:	491f      	ldr	r1, [pc, #124]	; (8000a28 <uartTaskFunc+0xb4>)
 80009aa:	4618      	mov	r0, r3
 80009ac:	f004 fa1c 	bl	8004de8 <xQueueReceive>
	      valid_count++;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <uartTaskFunc+0xac>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <uartTaskFunc+0xac>)
 80009ba:	701a      	strb	r2, [r3, #0]
	      //Fill and check header
	      for(int c = 0; c < 6; c++){
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e00b      	b.n	80009da <uartTaskFunc+0x66>
	    	  nmea_header[c] = SerialBufferReceived.Buffer[c];
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <uartTaskFunc+0xb4>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	7819      	ldrb	r1, [r3, #0]
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <uartTaskFunc+0xb8>)
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	460a      	mov	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
	      for(int c = 0; c < 6; c++){
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2b05      	cmp	r3, #5
 80009de:	ddf0      	ble.n	80009c2 <uartTaskFunc+0x4e>
	      }
	      if(!strcmp(nmea_header, "$GPRMC")){
 80009e0:	4913      	ldr	r1, [pc, #76]	; (8000a30 <uartTaskFunc+0xbc>)
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <uartTaskFunc+0xb8>)
 80009e4:	f7ff fbf4 	bl	80001d0 <strcmp>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d111      	bne.n	8000a12 <uartTaskFunc+0x9e>
		      if(SerialBufferReceived.Buffer[18] == 'A'){
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <uartTaskFunc+0xb4>)
 80009f0:	7c9b      	ldrb	r3, [r3, #18]
 80009f2:	2b41      	cmp	r3, #65	; 0x41
 80009f4:	d10d      	bne.n	8000a12 <uartTaskFunc+0x9e>
		    	  //Got a fix0000
		    	  if(valid_count >= 47){ //Length of NMEA message
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <uartTaskFunc+0xac>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b2e      	cmp	r3, #46	; 0x2e
 80009fc:	d909      	bls.n	8000a12 <uartTaskFunc+0x9e>
			    	  valid_count = 0;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <uartTaskFunc+0xac>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
			    	  //Post SPI write semaphore when received full valid message
			    	  //osSemaphoreRelease(SPI_semHandle);
			    	  xSemaphoreGive(SPI_semHandle);
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <uartTaskFunc+0xc0>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f004 f851 	bl	8004ab4 <xQueueGenericSend>
		    	  }
		      }
	      }
	      got_nmea=0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <uartTaskFunc+0xc4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8000a18:	e7b0      	b.n	800097c <uartTaskFunc+0x8>
 8000a1a:	bf00      	nop
 8000a1c:	20000514 	.word	0x20000514
 8000a20:	200005e5 	.word	0x200005e5
 8000a24:	200004ac 	.word	0x200004ac
 8000a28:	200004b0 	.word	0x200004b0
 8000a2c:	20000348 	.word	0x20000348
 8000a30:	08007db4 	.word	0x08007db4
 8000a34:	200004a8 	.word	0x200004a8
 8000a38:	20000344 	.word	0x20000344

08000a3c <spiTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spiTaskFunc */
void spiTaskFunc(void const * argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spiTaskFunc */
	HAL_StatusTypeDef response = HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
	  xSemaphoreTake(SPI_semHandle, portMAX_DELAY);
 8000a48:	4b65      	ldr	r3, [pc, #404]	; (8000be0 <spiTaskFunc+0x1a4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 faa9 	bl	8004fa8 <xQueueSemaphoreTake>
	  osDelay(1);
 8000a56:	2001      	movs	r0, #1
 8000a58:	f003 fd80 	bl	800455c <osDelay>
	  //Send over SPI to FRAM
	  //SPI Initialization **************************
	  //Write CS Pin high
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2110      	movs	r1, #16
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f000 fd88 	bl	8001578 <HAL_GPIO_WritePin>

	  // Enable write enable latch (allow write operations)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 fd82 	bl	8001578 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&WREN, 1, 100);
 8000a74:	2364      	movs	r3, #100	; 0x64
 8000a76:	2201      	movs	r2, #1
 8000a78:	495a      	ldr	r1, [pc, #360]	; (8000be4 <spiTaskFunc+0x1a8>)
 8000a7a:	485b      	ldr	r0, [pc, #364]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000a7c:	f001 ffed 	bl	8002a5a <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 fd76 	bl	8001578 <HAL_GPIO_WritePin>

	  // Test bytes to write to EEPROM
	  spi_mout_buf[0] = 0xAB;
 8000a8c:	4b57      	ldr	r3, [pc, #348]	; (8000bec <spiTaskFunc+0x1b0>)
 8000a8e:	22ab      	movs	r2, #171	; 0xab
 8000a90:	701a      	strb	r2, [r3, #0]
	  spi_mout_buf[1] = 0xCD;
 8000a92:	4b56      	ldr	r3, [pc, #344]	; (8000bec <spiTaskFunc+0x1b0>)
 8000a94:	22cd      	movs	r2, #205	; 0xcd
 8000a96:	705a      	strb	r2, [r3, #1]
	  spi_mout_buf[2] = 0xEF;
 8000a98:	4b54      	ldr	r3, [pc, #336]	; (8000bec <spiTaskFunc+0x1b0>)
 8000a9a:	22ef      	movs	r2, #239	; 0xef
 8000a9c:	709a      	strb	r2, [r3, #2]

	  // Set starting address
	  spi_addr = 0x00;
 8000a9e:	4b54      	ldr	r3, [pc, #336]	; (8000bf0 <spiTaskFunc+0x1b4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	801a      	strh	r2, [r3, #0]

	  // Write 3 bytes starting at given address
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f000 fd64 	bl	8001578 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	494f      	ldr	r1, [pc, #316]	; (8000bf4 <spiTaskFunc+0x1b8>)
 8000ab6:	484c      	ldr	r0, [pc, #304]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000ab8:	f001 ffcf 	bl	8002a5a <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 100);
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	2202      	movs	r2, #2
 8000ac0:	494b      	ldr	r1, [pc, #300]	; (8000bf0 <spiTaskFunc+0x1b4>)
 8000ac2:	4849      	ldr	r0, [pc, #292]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000ac4:	f001 ffc9 	bl	8002a5a <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_mout_buf, 3, 100);
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	2203      	movs	r2, #3
 8000acc:	4947      	ldr	r1, [pc, #284]	; (8000bec <spiTaskFunc+0x1b0>)
 8000ace:	4846      	ldr	r0, [pc, #280]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000ad0:	f001 ffc3 	bl	8002a5a <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f000 fd4c 	bl	8001578 <HAL_GPIO_WritePin>
	  //IO Driver for output pin enable

	  // Clear buffer
	  spi_mout_buf[0] = 0;
 8000ae0:	4b42      	ldr	r3, [pc, #264]	; (8000bec <spiTaskFunc+0x1b0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
	  spi_mout_buf[1] = 0;
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <spiTaskFunc+0x1b0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	705a      	strb	r2, [r3, #1]
	  spi_mout_buf[2] = 0;
 8000aec:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <spiTaskFunc+0x1b0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	709a      	strb	r2, [r3, #2]

	  // Wait until WIP bit is cleared
	   spi_wip = 1;
 8000af2:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <spiTaskFunc+0x1bc>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
	   while (spi_wip)
 8000af8:	e02f      	b.n	8000b5a <spiTaskFunc+0x11e>
	   {
		 // Read status register
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2110      	movs	r1, #16
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 fd39 	bl	8001578 <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	2201      	movs	r2, #1
 8000b0a:	493c      	ldr	r1, [pc, #240]	; (8000bfc <spiTaskFunc+0x1c0>)
 8000b0c:	4836      	ldr	r0, [pc, #216]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000b0e:	f001 ffa4 	bl	8002a5a <HAL_SPI_Transmit>
		 response = HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 1, 100);
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	2201      	movs	r2, #1
 8000b16:	4935      	ldr	r1, [pc, #212]	; (8000bec <spiTaskFunc+0x1b0>)
 8000b18:	4833      	ldr	r0, [pc, #204]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000b1a:	f002 f90c 	bl	8002d36 <HAL_SPI_Receive>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	73fb      	strb	r3, [r7, #15]
		 if (response == HAL_OK) {
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d106      	bne.n	8000b36 <spiTaskFunc+0xfa>
		  printf("Status Reg: %02x \r\n", spi_mout_buf[0]);
 8000b28:	4b30      	ldr	r3, [pc, #192]	; (8000bec <spiTaskFunc+0x1b0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4834      	ldr	r0, [pc, #208]	; (8000c00 <spiTaskFunc+0x1c4>)
 8000b30:	f006 faee 	bl	8007110 <iprintf>
 8000b34:	e004      	b.n	8000b40 <spiTaskFunc+0x104>
		 } else {
		  printf("Got error response as %d\r\n", response);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4832      	ldr	r0, [pc, #200]	; (8000c04 <spiTaskFunc+0x1c8>)
 8000b3c:	f006 fae8 	bl	8007110 <iprintf>
		 }
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b48:	f000 fd16 	bl	8001578 <HAL_GPIO_WritePin>

		 // Mask out WIP bit
		 spi_wip = spi_mout_buf[0] & 0b00000001;
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <spiTaskFunc+0x1b0>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <spiTaskFunc+0x1bc>)
 8000b58:	701a      	strb	r2, [r3, #0]
	   while (spi_wip)
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <spiTaskFunc+0x1bc>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1cb      	bne.n	8000afa <spiTaskFunc+0xbe>
	   }

	   // Read the 3 bytes back
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2110      	movs	r1, #16
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f000 fd05 	bl	8001578 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 5);
 8000b6e:	2305      	movs	r3, #5
 8000b70:	2201      	movs	r2, #1
 8000b72:	4925      	ldr	r1, [pc, #148]	; (8000c08 <spiTaskFunc+0x1cc>)
 8000b74:	481c      	ldr	r0, [pc, #112]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000b76:	f001 ff70 	bl	8002a5a <HAL_SPI_Transmit>
	   HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 2, 5);
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	491c      	ldr	r1, [pc, #112]	; (8000bf0 <spiTaskFunc+0x1b4>)
 8000b80:	4819      	ldr	r0, [pc, #100]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000b82:	f001 ff6a 	bl	8002a5a <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 3, 5);
 8000b86:	2305      	movs	r3, #5
 8000b88:	2203      	movs	r2, #3
 8000b8a:	4918      	ldr	r1, [pc, #96]	; (8000bec <spiTaskFunc+0x1b0>)
 8000b8c:	4816      	ldr	r0, [pc, #88]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000b8e:	f002 f8d2 	bl	8002d36 <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2110      	movs	r1, #16
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fced 	bl	8001578 <HAL_GPIO_WritePin>

	   // Read status register
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f000 fce7 	bl	8001578 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	2201      	movs	r2, #1
 8000bae:	4913      	ldr	r1, [pc, #76]	; (8000bfc <spiTaskFunc+0x1c0>)
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000bb2:	f001 ff52 	bl	8002a5a <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 1, 100);
 8000bb6:	2364      	movs	r3, #100	; 0x64
 8000bb8:	2201      	movs	r2, #1
 8000bba:	490c      	ldr	r1, [pc, #48]	; (8000bec <spiTaskFunc+0x1b0>)
 8000bbc:	480a      	ldr	r0, [pc, #40]	; (8000be8 <spiTaskFunc+0x1ac>)
 8000bbe:	f002 f8ba 	bl	8002d36 <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f000 fcd5 	bl	8001578 <HAL_GPIO_WritePin>
	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data
	  xSemaphoreGive(UART_semHandle);
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <spiTaskFunc+0x1d0>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f003 ff6c 	bl	8004ab4 <xQueueGenericSend>
	  xSemaphoreTake(SPI_semHandle, portMAX_DELAY);
 8000bdc:	e734      	b.n	8000a48 <spiTaskFunc+0xc>
 8000bde:	bf00      	nop
 8000be0:	200004a8 	.word	0x200004a8
 8000be4:	08007df3 	.word	0x08007df3
 8000be8:	200003b8 	.word	0x200003b8
 8000bec:	20000350 	.word	0x20000350
 8000bf0:	200003b4 	.word	0x200003b4
 8000bf4:	08007df2 	.word	0x08007df2
 8000bf8:	200003b6 	.word	0x200003b6
 8000bfc:	08007df4 	.word	0x08007df4
 8000c00:	08007dbc 	.word	0x08007dbc
 8000c04:	08007dd0 	.word	0x08007dd0
 8000c08:	08007df1 	.word	0x08007df1
 8000c0c:	200004ac 	.word	0x200004ac

08000c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c22:	f000 fa3d 	bl	80010a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6613      	str	r3, [r2, #96]	; 0x60
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_MspInit+0x4c>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	210f      	movs	r1, #15
 8000c7a:	f06f 0001 	mvn.w	r0, #1
 8000c7e:	f000 fae7 	bl	8001250 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <HAL_SPI_MspInit+0x7c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d128      	bne.n	8000d04 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_SPI_MspInit+0x80>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000ce2:	23c2      	movs	r3, #194	; 0xc2
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 fad0 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013000 	.word	0x40013000
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b09e      	sub	sp, #120	; 0x78
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	2254      	movs	r2, #84	; 0x54
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f006 f902 	bl	8006f3e <memset>
  if(huart->Instance==USART1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <HAL_UART_MspInit+0xa8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d137      	bne.n	8000db4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4618      	mov	r0, r3
 8000d52:	f001 faf7 	bl	8002344 <HAL_RCCEx_PeriphCLKConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d5c:	f7ff ff6a 	bl	8000c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0xac>)
 8000d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d64:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <HAL_UART_MspInit+0xac>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0xac>)
 8000d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_UART_MspInit+0xac>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7c:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_UART_MspInit+0xac>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_UART_MspInit+0xac>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d94:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da2:	2307      	movs	r3, #7
 8000da4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000daa:	4619      	mov	r1, r3
 8000dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db0:	f000 fa78 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3778      	adds	r7, #120	; 0x78
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2019      	movs	r0, #25
 8000dda:	f000 fa39 	bl	8001250 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dde:	2019      	movs	r0, #25
 8000de0:	f000 fa52 	bl	8001288 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_InitTick+0x9c>)
 8000de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <HAL_InitTick+0x9c>)
 8000dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dee:	6613      	str	r3, [r2, #96]	; 0x60
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_InitTick+0x9c>)
 8000df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dfc:	f107 0210 	add.w	r2, r7, #16
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fa0a 	bl	8002220 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e0c:	f001 f9f2 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8000e10:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e14:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <HAL_InitTick+0xa0>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	0c9b      	lsrs	r3, r3, #18
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_InitTick+0xa4>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_InitTick+0xa4>)
 8000e28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <HAL_InitTick+0xa4>)
 8000e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_InitTick+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_InitTick+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <HAL_InitTick+0xa4>)
 8000e42:	f002 fc77 	bl	8003734 <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d104      	bne.n	8000e56 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <HAL_InitTick+0xa4>)
 8000e4e:	f002 fcd3 	bl	80037f8 <HAL_TIM_Base_Start_IT>
 8000e52:	4603      	mov	r3, r0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3730      	adds	r7, #48	; 0x30
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40021000 	.word	0x40021000
 8000e64:	431bde83 	.word	0x431bde83
 8000e68:	200005e8 	.word	0x200005e8
 8000e6c:	40012c00 	.word	0x40012c00

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ea2:	f002 fcfd 	bl	80038a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200005e8 	.word	0x200005e8

08000eb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e00a      	b.n	8000ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ec2:	f3af 8000 	nop.w
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf0      	blt.n	8000ec2 <_read+0x12>
	}

return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e009      	b.n	8000f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	60ba      	str	r2, [r7, #8]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	dbf1      	blt.n	8000efc <_write+0x12>
	}
	return len;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_close>:

int _close(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return -1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_isatty>:

int _isatty(int file)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	return 1;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f005 fe8e 	bl	8006cdc <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20010000 	.word	0x20010000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	20000634 	.word	0x20000634
 8000ff4:	20002eb0 	.word	0x20002eb0

08000ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001020:	f7ff ffea 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <LoopForever+0xe>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f005 ff43 	bl	8006ed4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104e:	f7ff fabb 	bl	80005c8 <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001054:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001060:	08007ee8 	.word	0x08007ee8
  ldr r2, =_sbss
 8001064:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001068:	20002eb0 	.word	0x20002eb0

0800106c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_IRQHandler>

0800106e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f8de 	bl	800123a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107e:	200f      	movs	r0, #15
 8001080:	f7ff fea0 	bl	8000dc4 <HAL_InitTick>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	e001      	b.n	8001094 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001090:	f7ff fdd6 	bl	8000c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001094:	79fb      	ldrb	r3, [r7, #7]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000638 	.word	0x20000638

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000638 	.word	0x20000638

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db0b      	blt.n	800116e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	f003 021f 	and.w	r2, r3, #31
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <__NVIC_EnableIRQ+0x38>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	095b      	lsrs	r3, r3, #5
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ff4c 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001262:	f7ff ff61 	bl	8001128 <__NVIC_GetPriorityGrouping>
 8001266:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	6978      	ldr	r0, [r7, #20]
 800126e:	f7ff ffb1 	bl	80011d4 <NVIC_EncodePriority>
 8001272:	4602      	mov	r2, r0
 8001274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff80 	bl	8001180 <__NVIC_SetPriority>
}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff54 	bl	8001144 <__NVIC_EnableIRQ>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	e148      	b.n	8001546 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 813a 	beq.w	8001540 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0203 	and.w	r2, r3, #3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8094 	beq.w	8001540 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <HAL_GPIO_Init+0x2c0>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	4a51      	ldr	r2, [pc, #324]	; (8001564 <HAL_GPIO_Init+0x2c0>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6613      	str	r3, [r2, #96]	; 0x60
 8001424:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <HAL_GPIO_Init+0x2c0>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001430:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <HAL_GPIO_Init+0x2c4>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145a:	d00d      	beq.n	8001478 <HAL_GPIO_Init+0x1d4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a43      	ldr	r2, [pc, #268]	; (800156c <HAL_GPIO_Init+0x2c8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d007      	beq.n	8001474 <HAL_GPIO_Init+0x1d0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a42      	ldr	r2, [pc, #264]	; (8001570 <HAL_GPIO_Init+0x2cc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d101      	bne.n	8001470 <HAL_GPIO_Init+0x1cc>
 800146c:	2302      	movs	r3, #2
 800146e:	e004      	b.n	800147a <HAL_GPIO_Init+0x1d6>
 8001470:	2307      	movs	r3, #7
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x1d6>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_GPIO_Init+0x1d6>
 8001478:	2300      	movs	r3, #0
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4093      	lsls	r3, r2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800148a:	4937      	ldr	r1, [pc, #220]	; (8001568 <HAL_GPIO_Init+0x2c4>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014bc:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001510:	4a18      	ldr	r2, [pc, #96]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f aeaf 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001594:	e002      	b.n	800159c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40007000 	.word	0x40007000

080015c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d2:	d130      	bne.n	8001636 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015e0:	d038      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2232      	movs	r2, #50	; 0x32
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001608:	e002      	b.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3b01      	subs	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161c:	d102      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x60>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f2      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001630:	d110      	bne.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e00f      	b.n	8001656 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800163e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001642:	d007      	beq.n	8001654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800164c:	4a05      	ldr	r2, [pc, #20]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40007000 	.word	0x40007000
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f000 bc02 	b.w	8001e88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001684:	4b96      	ldr	r3, [pc, #600]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168e:	4b94      	ldr	r3, [pc, #592]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80e4 	beq.w	800186e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d007      	beq.n	80016bc <HAL_RCC_OscConfig+0x4c>
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	2b0c      	cmp	r3, #12
 80016b0:	f040 808b 	bne.w	80017ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	f040 8087 	bne.w	80017ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x64>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e3d9      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1a      	ldr	r2, [r3, #32]
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_RCC_OscConfig+0x7e>
 80016e4:	4b7e      	ldr	r3, [pc, #504]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ec:	e005      	b.n	80016fa <HAL_RCC_OscConfig+0x8a>
 80016ee:	4b7c      	ldr	r3, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d223      	bcs.n	8001746 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fdbe 	bl	8002284 <RCC_SetFlashLatencyFromMSIRange>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e3ba      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001712:	4b73      	ldr	r3, [pc, #460]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b70      	ldr	r3, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	496d      	ldr	r1, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	4968      	ldr	r1, [pc, #416]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e025      	b.n	8001792 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001746:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4960      	ldr	r1, [pc, #384]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001764:	4b5e      	ldr	r3, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	495b      	ldr	r1, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd7e 	bl	8002284 <RCC_SetFlashLatencyFromMSIRange>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e37a      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001792:	f000 fc81 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8001796:	4602      	mov	r2, r0
 8001798:	4b51      	ldr	r3, [pc, #324]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	4950      	ldr	r1, [pc, #320]	; (80018e4 <HAL_RCC_OscConfig+0x274>)
 80017a4:	5ccb      	ldrb	r3, [r1, r3]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	4a4e      	ldr	r2, [pc, #312]	; (80018e8 <HAL_RCC_OscConfig+0x278>)
 80017b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017b2:	4b4e      	ldr	r3, [pc, #312]	; (80018ec <HAL_RCC_OscConfig+0x27c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fb04 	bl	8000dc4 <HAL_InitTick>
 80017bc:	4603      	mov	r3, r0
 80017be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d052      	beq.n	800186c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	e35e      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d032      	beq.n	8001838 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a42      	ldr	r2, [pc, #264]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017de:	f7ff fc73 	bl	80010c8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e6:	f7ff fc6f 	bl	80010c8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e347      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	4930      	ldr	r1, [pc, #192]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001822:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	492b      	ldr	r1, [pc, #172]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
 8001836:	e01a      	b.n	800186e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a28      	ldr	r2, [pc, #160]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001844:	f7ff fc40 	bl	80010c8 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184c:	f7ff fc3c 	bl	80010c8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e314      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1dc>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d073      	beq.n	8001962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d005      	beq.n	800188c <HAL_RCC_OscConfig+0x21c>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2b0c      	cmp	r3, #12
 8001884:	d10e      	bne.n	80018a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d10b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d063      	beq.n	8001960 <HAL_RCC_OscConfig+0x2f0>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d15f      	bne.n	8001960 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e2f1      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x24c>
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e025      	b.n	8001908 <HAL_RCC_OscConfig+0x298>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c4:	d114      	bne.n	80018f0 <HAL_RCC_OscConfig+0x280>
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a02      	ldr	r2, [pc, #8]	; (80018e0 <HAL_RCC_OscConfig+0x270>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e013      	b.n	8001908 <HAL_RCC_OscConfig+0x298>
 80018e0:	40021000 	.word	0x40021000
 80018e4:	08007df8 	.word	0x08007df8
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004
 80018f0:	4ba0      	ldr	r3, [pc, #640]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a9f      	ldr	r2, [pc, #636]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a9c      	ldr	r2, [pc, #624]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d013      	beq.n	8001938 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fbda 	bl	80010c8 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001918:	f7ff fbd6 	bl	80010c8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e2ae      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192a:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x2a8>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fbc6 	bl	80010c8 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fbc2 	bl	80010c8 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e29a      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x2d0>
 800195e:	e000      	b.n	8001962 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d060      	beq.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <HAL_RCC_OscConfig+0x310>
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d119      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d116      	bne.n	80019ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	4b7c      	ldr	r3, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x328>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e277      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b76      	ldr	r3, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4973      	ldr	r1, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ac:	e040      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d023      	beq.n	80019fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fb81 	bl	80010c8 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fb7d 	bl	80010c8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e255      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	495f      	ldr	r1, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e018      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a5c      	ldr	r2, [pc, #368]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fb5d 	bl	80010c8 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fb59 	bl	80010c8 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e231      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d03c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	4a4a      	ldr	r2, [pc, #296]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff fb38 	bl	80010c8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fb34 	bl	80010c8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e20c      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ef      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3ec>
 8001a7c:	e01b      	b.n	8001ab6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	4a3b      	ldr	r2, [pc, #236]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f023 0301 	bic.w	r3, r3, #1
 8001a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb1b 	bl	80010c8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fb17 	bl	80010c8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1ef      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ef      	bne.n	8001a96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80a6 	beq.w	8001c10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10d      	bne.n	8001af0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d118      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b08:	f7ff fade 	bl	80010c8 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b10:	f7ff fada 	bl	80010c8 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1b2      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_RCC_OscConfig+0x508>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4d8>
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b46:	e029      	b.n	8001b9c <HAL_RCC_OscConfig+0x52c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d115      	bne.n	8001b7c <HAL_RCC_OscConfig+0x50c>
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_RCC_OscConfig+0x504>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	e014      	b.n	8001b9c <HAL_RCC_OscConfig+0x52c>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	4b9a      	ldr	r3, [pc, #616]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b82:	4a99      	ldr	r2, [pc, #612]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8c:	4b96      	ldr	r3, [pc, #600]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	4a95      	ldr	r2, [pc, #596]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d016      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff fa90 	bl	80010c8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7ff fa8c 	bl	80010c8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e162      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ed      	beq.n	8001bac <HAL_RCC_OscConfig+0x53c>
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fa79 	bl	80010c8 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff fa75 	bl	80010c8 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e14b      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf0:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ed      	bne.n	8001bda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d03c      	beq.n	8001c96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c24:	4b70      	ldr	r3, [pc, #448]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2a:	4a6f      	ldr	r2, [pc, #444]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fa48 	bl	80010c8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3c:	f7ff fa44 	bl	80010c8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e11c      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4e:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0ef      	beq.n	8001c3c <HAL_RCC_OscConfig+0x5cc>
 8001c5c:	e01b      	b.n	8001c96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5e:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	4a60      	ldr	r2, [pc, #384]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fa2b 	bl	80010c8 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c76:	f7ff fa27 	bl	80010c8 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0ff      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c88:	4b57      	ldr	r3, [pc, #348]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ef      	bne.n	8001c76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80f3 	beq.w	8001e86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	f040 80c9 	bne.w	8001e3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001caa:	4b4f      	ldr	r3, [pc, #316]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0203 	and.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d12c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d123      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d11b      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d113      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d109      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d06b      	beq.n	8001df0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d062      	beq.n	8001de4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0ac      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a2d      	ldr	r2, [pc, #180]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d3a:	f7ff f9c5 	bl	80010c8 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff f9c1 	bl	80010c8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e099      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_RCC_OscConfig+0x77c>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d70:	3a01      	subs	r2, #1
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d7a:	0212      	lsls	r2, r2, #8
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d82:	0852      	lsrs	r2, r2, #1
 8001d84:	3a01      	subs	r2, #1
 8001d86:	0552      	lsls	r2, r2, #21
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d8e:	0852      	lsrs	r2, r2, #1
 8001d90:	3a01      	subs	r2, #1
 8001d92:	0652      	lsls	r2, r2, #25
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d9a:	06d2      	lsls	r2, r2, #27
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	4912      	ldr	r1, [pc, #72]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dbc:	f7ff f984 	bl	80010c8 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff f980 	bl	80010c8 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e058      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_RCC_OscConfig+0x778>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de2:	e050      	b.n	8001e86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e04f      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
 8001de8:	40021000 	.word	0x40021000
 8001dec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d144      	bne.n	8001e86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e14:	f7ff f958 	bl	80010c8 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f954 	bl	80010c8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e02c      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x7ac>
 8001e3a:	e024      	b.n	8001e86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d01f      	beq.n	8001e82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f93b 	bl	80010c8 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7ff f937 	bl	80010c8 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4905      	ldr	r1, [pc, #20]	; (8001e90 <HAL_RCC_OscConfig+0x820>)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x824>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
 8001e80:	e001      	b.n	8001e86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	feeefffc 	.word	0xfeeefffc

08001e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0e7      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b75      	ldr	r3, [pc, #468]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d910      	bls.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b72      	ldr	r3, [pc, #456]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4970      	ldr	r1, [pc, #448]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b6e      	ldr	r3, [pc, #440]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0cf      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d010      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4b66      	ldr	r3, [pc, #408]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d908      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4960      	ldr	r1, [pc, #384]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d04c      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d121      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0a6      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d115      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e09a      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f4e:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e08e      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e086      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4943      	ldr	r1, [pc, #268]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f80:	f7ff f8a2 	bl	80010c8 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7ff f89e 	bl	80010c8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e06e      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d010      	beq.n	8001fde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d208      	bcs.n	8001fde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	492b      	ldr	r1, [pc, #172]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d210      	bcs.n	800200e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0207 	bic.w	r2, r3, #7
 8001ff4:	4923      	ldr	r1, [pc, #140]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e036      	b.n	800207c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4918      	ldr	r1, [pc, #96]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4910      	ldr	r1, [pc, #64]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800204c:	f000 f824 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	f003 030f 	and.w	r3, r3, #15
 800205c:	490b      	ldr	r1, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1f4>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	4a09      	ldr	r2, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1f8>)
 800206a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1fc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fea7 	bl	8000dc4 <HAL_InitTick>
 8002076:	4603      	mov	r3, r0
 8002078:	72fb      	strb	r3, [r7, #11]

  return status;
 800207a:	7afb      	ldrb	r3, [r7, #11]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
 800208c:	08007df8 	.word	0x08007df8
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a6:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x34>
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d121      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d11e      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e005      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d102      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e004      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d101      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCC_GetSysClockFreq+0x114>)
 800211e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d134      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0xa6>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d003      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0xac>
 800213c:	e005      	b.n	800214a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002140:	617b      	str	r3, [r7, #20]
      break;
 8002142:	e005      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002146:	617b      	str	r3, [r7, #20]
      break;
 8002148:	e002      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	617b      	str	r3, [r7, #20]
      break;
 800214e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	3301      	adds	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	fb03 f202 	mul.w	r2, r3, r2
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	0e5b      	lsrs	r3, r3, #25
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	3301      	adds	r3, #1
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002190:	69bb      	ldr	r3, [r7, #24]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08007e10 	.word	0x08007e10
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	007a1200 	.word	0x007a1200

080021b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000000 	.word	0x20000000

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021cc:	f7ff fff0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08007e08 	.word	0x08007e08

080021f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021f8:	f7ff ffda 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	0adb      	lsrs	r3, r3, #11
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	4904      	ldr	r1, [pc, #16]	; (800221c <HAL_RCC_GetPCLK2Freq+0x28>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08007e08 	.word	0x08007e08

08002220 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	220f      	movs	r2, #15
 800222e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_GetClockConfig+0x5c>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_RCC_GetClockConfig+0x5c>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_RCC_GetClockConfig+0x5c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_RCC_GetClockConfig+0x5c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	08db      	lsrs	r3, r3, #3
 800225a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_RCC_GetClockConfig+0x60>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0207 	and.w	r2, r3, #7
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	40022000 	.word	0x40022000

08002284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002290:	4b2a      	ldr	r3, [pc, #168]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800229c:	f7ff f984 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 80022a0:	6178      	str	r0, [r7, #20]
 80022a2:	e014      	b.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
 80022b0:	4b22      	ldr	r3, [pc, #136]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022bc:	f7ff f974 	bl	80015a8 <HAL_PWREx_GetVoltageRange>
 80022c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d4:	d10b      	bne.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d919      	bls.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2ba0      	cmp	r3, #160	; 0xa0
 80022e0:	d902      	bls.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e2:	2302      	movs	r3, #2
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e013      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e8:	2301      	movs	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e010      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b80      	cmp	r3, #128	; 0x80
 80022f2:	d902      	bls.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022f4:	2303      	movs	r3, #3
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e00a      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d102      	bne.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002300:	2302      	movs	r3, #2
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e004      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b70      	cmp	r3, #112	; 0x70
 800230a:	d101      	bne.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800230c:	2301      	movs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 0207 	bic.w	r2, r3, #7
 8002318:	4909      	ldr	r1, [pc, #36]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	40022000 	.word	0x40022000

08002344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800234c:	2300      	movs	r3, #0
 800234e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002350:	2300      	movs	r3, #0
 8002352:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800235c:	2b00      	cmp	r3, #0
 800235e:	d031      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002368:	d01a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800236a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800236e:	d814      	bhi.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002378:	d10f      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800237a:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4a5c      	ldr	r2, [pc, #368]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002386:	e00c      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f9ce 	bl	8002730 <RCCEx_PLLSAI1_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002398:	e003      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	74fb      	strb	r3, [r7, #19]
      break;
 800239e:	e000      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80023a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a8:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	494e      	ldr	r1, [pc, #312]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023be:	e001      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 809e 	beq.w	800250e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d6:	4b46      	ldr	r3, [pc, #280]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	4a3f      	ldr	r2, [pc, #252]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	6593      	str	r3, [r2, #88]	; 0x58
 80023f8:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002404:	2301      	movs	r3, #1
 8002406:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002408:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a39      	ldr	r2, [pc, #228]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002414:	f7fe fe58 	bl	80010c8 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800241a:	e009      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f7fe fe54 	bl	80010c8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	74fb      	strb	r3, [r7, #19]
        break;
 800242e:	e005      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d15a      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01e      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	429a      	cmp	r2, r3
 800245c:	d019      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800246a:	4b21      	ldr	r3, [pc, #132]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800248a:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fe14 	bl	80010c8 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a2:	e00b      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe fe10 	bl	80010c8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d902      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	74fb      	strb	r3, [r7, #19]
            break;
 80024ba:	e006      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0ec      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024e6:	e009      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
 80024ec:	e006      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fc:	7c7b      	ldrb	r3, [r7, #17]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d105      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b8a      	ldr	r3, [pc, #552]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	4a89      	ldr	r2, [pc, #548]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800251a:	4b84      	ldr	r3, [pc, #528]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 0203 	bic.w	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4980      	ldr	r1, [pc, #512]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800253c:	4b7b      	ldr	r3, [pc, #492]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f023 020c 	bic.w	r2, r3, #12
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	4978      	ldr	r1, [pc, #480]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800255e:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	496f      	ldr	r1, [pc, #444]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	4967      	ldr	r1, [pc, #412]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025a2:	4b62      	ldr	r3, [pc, #392]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	495e      	ldr	r1, [pc, #376]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	4956      	ldr	r1, [pc, #344]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e6:	4b51      	ldr	r3, [pc, #324]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	494d      	ldr	r1, [pc, #308]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d028      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002608:	4b48      	ldr	r3, [pc, #288]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4945      	ldr	r1, [pc, #276]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002626:	d106      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a3f      	ldr	r2, [pc, #252]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002632:	60d3      	str	r3, [r2, #12]
 8002634:	e011      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800263e:	d10c      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f872 	bl	8002730 <RCCEx_PLLSAI1_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d028      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	492d      	ldr	r1, [pc, #180]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002684:	d106      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4a28      	ldr	r2, [pc, #160]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800268c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002690:	60d3      	str	r3, [r2, #12]
 8002692:	e011      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f843 	bl	8002730 <RCCEx_PLLSAI1_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d2:	4916      	ldr	r1, [pc, #88]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e2:	d10c      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3304      	adds	r3, #4
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f820 	bl	8002730 <RCCEx_PLLSAI1_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4904      	ldr	r1, [pc, #16]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002720:	7cbb      	ldrb	r3, [r7, #18]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000

08002730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800273e:	4b74      	ldr	r3, [pc, #464]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d018      	beq.n	800277c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800274a:	4b71      	ldr	r3, [pc, #452]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0203 	and.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d10d      	bne.n	8002776 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
       ||
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002762:	4b6b      	ldr	r3, [pc, #428]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
       ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d047      	beq.n	8002806 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	e044      	b.n	8002806 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d018      	beq.n	80027b6 <RCCEx_PLLSAI1_Config+0x86>
 8002784:	2b03      	cmp	r3, #3
 8002786:	d825      	bhi.n	80027d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002788:	2b01      	cmp	r3, #1
 800278a:	d002      	beq.n	8002792 <RCCEx_PLLSAI1_Config+0x62>
 800278c:	2b02      	cmp	r3, #2
 800278e:	d009      	beq.n	80027a4 <RCCEx_PLLSAI1_Config+0x74>
 8002790:	e020      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002792:	4b5f      	ldr	r3, [pc, #380]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d11d      	bne.n	80027da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a2:	e01a      	b.n	80027da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027a4:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b4:	e013      	b.n	80027de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027b6:	4b56      	ldr	r3, [pc, #344]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027d2:	e006      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      break;
 80027d8:	e004      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6819      	ldr	r1, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	430b      	orrs	r3, r1
 8002800:	4943      	ldr	r1, [pc, #268]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d17c      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002818:	f7fe fc56 	bl	80010c8 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800281e:	e009      	b.n	8002834 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002820:	f7fe fc52 	bl	80010c8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	73fb      	strb	r3, [r7, #15]
        break;
 8002832:	e005      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002834:	4b36      	ldr	r3, [pc, #216]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ef      	bne.n	8002820 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d15f      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d110      	bne.n	800286e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800284c:	4b30      	ldr	r3, [pc, #192]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6892      	ldr	r2, [r2, #8]
 800285c:	0211      	lsls	r1, r2, #8
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	06d2      	lsls	r2, r2, #27
 8002864:	430a      	orrs	r2, r1
 8002866:	492a      	ldr	r1, [pc, #168]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	610b      	str	r3, [r1, #16]
 800286c:	e027      	b.n	80028be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d112      	bne.n	800289a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002874:	4b26      	ldr	r3, [pc, #152]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800287c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6892      	ldr	r2, [r2, #8]
 8002884:	0211      	lsls	r1, r2, #8
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6912      	ldr	r2, [r2, #16]
 800288a:	0852      	lsrs	r2, r2, #1
 800288c:	3a01      	subs	r2, #1
 800288e:	0552      	lsls	r2, r2, #21
 8002890:	430a      	orrs	r2, r1
 8002892:	491f      	ldr	r1, [pc, #124]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002894:	4313      	orrs	r3, r2
 8002896:	610b      	str	r3, [r1, #16]
 8002898:	e011      	b.n	80028be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	0211      	lsls	r1, r2, #8
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6952      	ldr	r2, [r2, #20]
 80028b0:	0852      	lsrs	r2, r2, #1
 80028b2:	3a01      	subs	r2, #1
 80028b4:	0652      	lsls	r2, r2, #25
 80028b6:	430a      	orrs	r2, r1
 80028b8:	4915      	ldr	r1, [pc, #84]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028be:	4b14      	ldr	r3, [pc, #80]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a13      	ldr	r2, [pc, #76]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7fe fbfd 	bl	80010c8 <HAL_GetTick>
 80028ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d0:	e009      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d2:	f7fe fbf9 	bl	80010c8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d902      	bls.n	80028e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	73fb      	strb	r3, [r7, #15]
          break;
 80028e4:	e005      	b.n	80028f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ef      	beq.n	80028d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002902:	4313      	orrs	r3, r2
 8002904:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e095      	b.n	8002a52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002936:	d009      	beq.n	800294c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
 800293e:	e005      	b.n	800294c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe f992 	bl	8000c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002982:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800298c:	d902      	bls.n	8002994 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e002      	b.n	800299a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002998:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029a2:	d007      	beq.n	80029b4 <HAL_SPI_Init+0xa0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	ea42 0103 	orr.w	r1, r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	f003 0204 	and.w	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a30:	ea42 0103 	orr.w	r1, r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_SPI_Transmit+0x22>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e158      	b.n	8002d2e <HAL_SPI_Transmit+0x2d4>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a84:	f7fe fb20 	bl	80010c8 <HAL_GetTick>
 8002a88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d002      	beq.n	8002aa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a9e:	e13d      	b.n	8002d1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_SPI_Transmit+0x52>
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ab0:	e134      	b.n	8002d1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afc:	d10f      	bne.n	8002b1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d007      	beq.n	8002b3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b44:	d94b      	bls.n	8002bde <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_SPI_Transmit+0xfa>
 8002b4e:	8afb      	ldrh	r3, [r7, #22]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d13e      	bne.n	8002bd2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	881a      	ldrh	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	1c9a      	adds	r2, r3, #2
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b78:	e02b      	b.n	8002bd2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d112      	bne.n	8002bae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	1c9a      	adds	r2, r3, #2
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bac:	e011      	b.n	8002bd2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bae:	f7fe fa8b 	bl	80010c8 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d803      	bhi.n	8002bc6 <HAL_SPI_Transmit+0x16c>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d102      	bne.n	8002bcc <HAL_SPI_Transmit+0x172>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bd0:	e0a4      	b.n	8002d1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ce      	bne.n	8002b7a <HAL_SPI_Transmit+0x120>
 8002bdc:	e07c      	b.n	8002cd8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_SPI_Transmit+0x192>
 8002be6:	8afb      	ldrh	r3, [r7, #22]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d170      	bne.n	8002cce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d912      	bls.n	8002c1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	881a      	ldrh	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	1c9a      	adds	r2, r3, #2
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b02      	subs	r3, #2
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c1a:	e058      	b.n	8002cce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	7812      	ldrb	r2, [r2, #0]
 8002c28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c42:	e044      	b.n	8002cce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d12b      	bne.n	8002caa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d912      	bls.n	8002c82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	881a      	ldrh	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	1c9a      	adds	r2, r3, #2
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b02      	subs	r3, #2
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c80:	e025      	b.n	8002cce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ca8:	e011      	b.n	8002cce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002caa:	f7fe fa0d 	bl	80010c8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d803      	bhi.n	8002cc2 <HAL_SPI_Transmit+0x268>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d102      	bne.n	8002cc8 <HAL_SPI_Transmit+0x26e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ccc:	e026      	b.n	8002d1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1b5      	bne.n	8002c44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fce3 	bl	80036a8 <SPI_EndRxTxTransaction>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e000      	b.n	8002d1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002d1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b088      	sub	sp, #32
 8002d3a:	af02      	add	r7, sp, #8
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d52:	d112      	bne.n	8002d7a <HAL_SPI_Receive+0x44>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10e      	bne.n	8002d7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d64:	88fa      	ldrh	r2, [r7, #6]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f910 	bl	8002f96 <HAL_SPI_TransmitReceive>
 8002d76:	4603      	mov	r3, r0
 8002d78:	e109      	b.n	8002f8e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_SPI_Receive+0x52>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e102      	b.n	8002f8e <HAL_SPI_Receive+0x258>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d90:	f7fe f99a 	bl	80010c8 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d002      	beq.n	8002da8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002da6:	e0e9      	b.n	8002f7c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Receive+0x7e>
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002db8:	e0e0      	b.n	8002f7c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	88fa      	ldrh	r2, [r7, #6]
 8002dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e04:	d908      	bls.n	8002e18 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e007      	b.n	8002e28 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e30:	d10f      	bne.n	8002e52 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d007      	beq.n	8002e70 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e78:	d867      	bhi.n	8002f4a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e7a:	e030      	b.n	8002ede <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d117      	bne.n	8002eba <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f103 020c 	add.w	r2, r3, #12
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	7812      	ldrb	r2, [r2, #0]
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002eb8:	e011      	b.n	8002ede <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eba:	f7fe f905 	bl	80010c8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d803      	bhi.n	8002ed2 <HAL_SPI_Receive+0x19c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d102      	bne.n	8002ed8 <HAL_SPI_Receive+0x1a2>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002edc:	e04e      	b.n	8002f7c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1c8      	bne.n	8002e7c <HAL_SPI_Receive+0x146>
 8002eea:	e034      	b.n	8002f56 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d115      	bne.n	8002f26 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	b292      	uxth	r2, r2
 8002f06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002f24:	e011      	b.n	8002f4a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f26:	f7fe f8cf 	bl	80010c8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d803      	bhi.n	8002f3e <HAL_SPI_Receive+0x208>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d102      	bne.n	8002f44 <HAL_SPI_Receive+0x20e>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f48:	e018      	b.n	8002f7c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ca      	bne.n	8002eec <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	6839      	ldr	r1, [r7, #0]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fb4c 	bl	80035f8 <SPI_EndRxTransaction>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
 8002f78:	e000      	b.n	8002f7c <HAL_SPI_Receive+0x246>
  }

error :
 8002f7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b08a      	sub	sp, #40	; 0x28
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x26>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e1fb      	b.n	80033b4 <HAL_SPI_TransmitReceive+0x41e>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc4:	f7fe f880 	bl	80010c8 <HAL_GetTick>
 8002fc8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fd0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fe0:	7efb      	ldrb	r3, [r7, #27]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d00e      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x6e>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fec:	d106      	bne.n	8002ffc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_SPI_TransmitReceive+0x66>
 8002ff6:	7efb      	ldrb	r3, [r7, #27]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d003      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003002:	e1cd      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_SPI_TransmitReceive+0x80>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_SPI_TransmitReceive+0x80>
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800301c:	e1c0      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b04      	cmp	r3, #4
 8003028:	d003      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2205      	movs	r2, #5
 800302e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	887a      	ldrh	r2, [r7, #2]
 8003042:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	887a      	ldrh	r2, [r7, #2]
 800304a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	887a      	ldrh	r2, [r7, #2]
 800305e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003074:	d802      	bhi.n	800307c <HAL_SPI_TransmitReceive+0xe6>
 8003076:	8a3b      	ldrh	r3, [r7, #16]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d908      	bls.n	800308e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	e007      	b.n	800309e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800309c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d007      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c4:	d97c      	bls.n	80031c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_SPI_TransmitReceive+0x13e>
 80030ce:	8a7b      	ldrh	r3, [r7, #18]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d169      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	1c9a      	adds	r2, r3, #2
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f8:	e056      	b.n	80031a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d11b      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x1aa>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d016      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x1aa>
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	2b01      	cmp	r3, #1
 8003116:	d113      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d11c      	bne.n	8003188 <HAL_SPI_TransmitReceive+0x1f2>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	b292      	uxth	r2, r2
 8003166:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	1c9a      	adds	r2, r3, #2
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003184:	2301      	movs	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003188:	f7fd ff9e 	bl	80010c8 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003194:	429a      	cmp	r2, r3
 8003196:	d807      	bhi.n	80031a8 <HAL_SPI_TransmitReceive+0x212>
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d003      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80031a6:	e0fb      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1a3      	bne.n	80030fa <HAL_SPI_TransmitReceive+0x164>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d19d      	bne.n	80030fa <HAL_SPI_TransmitReceive+0x164>
 80031be:	e0df      	b.n	8003380 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x23a>
 80031c8:	8a7b      	ldrh	r3, [r7, #18]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	f040 80cb 	bne.w	8003366 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d912      	bls.n	8003200 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	881a      	ldrh	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	1c9a      	adds	r2, r3, #2
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b02      	subs	r3, #2
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031fe:	e0b2      	b.n	8003366 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003226:	e09e      	b.n	8003366 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b02      	cmp	r3, #2
 8003234:	d134      	bne.n	80032a0 <HAL_SPI_TransmitReceive+0x30a>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02f      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x30a>
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	2b01      	cmp	r3, #1
 8003244:	d12c      	bne.n	80032a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d912      	bls.n	8003276 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b02      	subs	r3, #2
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003274:	e012      	b.n	800329c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	7812      	ldrb	r2, [r2, #0]
 8003282:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d148      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x3aa>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d042      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d923      	bls.n	800330e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	b292      	uxth	r2, r2
 80032d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	1c9a      	adds	r2, r3, #2
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b02      	subs	r3, #2
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d81f      	bhi.n	800333c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	e016      	b.n	800333c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f103 020c 	add.w	r2, r3, #12
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800333c:	2301      	movs	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003340:	f7fd fec2 	bl	80010c8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334c:	429a      	cmp	r2, r3
 800334e:	d803      	bhi.n	8003358 <HAL_SPI_TransmitReceive+0x3c2>
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d102      	bne.n	800335e <HAL_SPI_TransmitReceive+0x3c8>
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003364:	e01c      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	f47f af5b 	bne.w	8003228 <HAL_SPI_TransmitReceive+0x292>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	f47f af54 	bne.w	8003228 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f98f 	bl	80036a8 <SPI_EndRxTxTransaction>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	661a      	str	r2, [r3, #96]	; 0x60
 800339c:	e000      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800339e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3728      	adds	r7, #40	; 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033cc:	f7fd fe7c 	bl	80010c8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033dc:	f7fd fe74 	bl	80010c8 <HAL_GetTick>
 80033e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033e2:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	015b      	lsls	r3, r3, #5
 80033e8:	0d1b      	lsrs	r3, r3, #20
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033f2:	e054      	b.n	800349e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d050      	beq.n	800349e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033fc:	f7fd fe64 	bl	80010c8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	429a      	cmp	r2, r3
 800340a:	d902      	bls.n	8003412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d13d      	bne.n	800348e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342a:	d111      	bne.n	8003450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	d004      	beq.n	8003440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343e:	d107      	bne.n	8003450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800344e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003458:	d10f      	bne.n	800347a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e017      	b.n	80034be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	3b01      	subs	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4013      	ands	r3, r2
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d19b      	bne.n	80033f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000000 	.word	0x20000000

080034cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034de:	f7fd fdf3 	bl	80010c8 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034ee:	f7fd fdeb 	bl	80010c8 <HAL_GetTick>
 80034f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034fc:	4b3d      	ldr	r3, [pc, #244]	; (80035f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	00da      	lsls	r2, r3, #3
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	0d1b      	lsrs	r3, r3, #20
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003514:	e060      	b.n	80035d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800351c:	d107      	bne.n	800352e <SPI_WaitFifoStateUntilTimeout+0x62>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d104      	bne.n	800352e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800352c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d050      	beq.n	80035d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003536:	f7fd fdc7 	bl	80010c8 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	429a      	cmp	r2, r3
 8003544:	d902      	bls.n	800354c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	2b00      	cmp	r3, #0
 800354a:	d13d      	bne.n	80035c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800355a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003564:	d111      	bne.n	800358a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356e:	d004      	beq.n	800357a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003578:	d107      	bne.n	800358a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003588:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003592:	d10f      	bne.n	80035b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e010      	b.n	80035ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d196      	bne.n	8003516 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000000 	.word	0x20000000

080035f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360c:	d111      	bne.n	8003632 <SPI_EndRxTransaction+0x3a>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003616:	d004      	beq.n	8003622 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003620:	d107      	bne.n	8003632 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003630:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff febd 	bl	80033bc <SPI_WaitFlagStateUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e023      	b.n	80036a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003660:	d11d      	bne.n	800369e <SPI_EndRxTransaction+0xa6>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366a:	d004      	beq.n	8003676 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d113      	bne.n	800369e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff ff22 	bl	80034cc <SPI_WaitFifoStateUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e000      	b.n	80036a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff ff03 	bl	80034cc <SPI_WaitFifoStateUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e027      	b.n	800372c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2200      	movs	r2, #0
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fe68 	bl	80033bc <SPI_WaitFlagStateUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e014      	b.n	800372c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f7ff fedc 	bl	80034cc <SPI_WaitFifoStateUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e000      	b.n	800372c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e049      	b.n	80037da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f841 	bl	80037e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f000 f9dc 	bl	8003b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d001      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e03b      	b.n	8003888 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_TIM_Base_Start_IT+0x9c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_TIM_Base_Start_IT+0x4e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d004      	beq.n	8003846 <HAL_TIM_Base_Start_IT+0x4e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a15      	ldr	r2, [pc, #84]	; (8003898 <HAL_TIM_Base_Start_IT+0xa0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d115      	bne.n	8003872 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_TIM_Base_Start_IT+0xa4>)
 800384e:	4013      	ands	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b06      	cmp	r3, #6
 8003856:	d015      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x8c>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385e:	d011      	beq.n	8003884 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003870:	e008      	b.n	8003884 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e000      	b.n	8003886 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40014000 	.word	0x40014000
 800389c:	00010007 	.word	0x00010007

080038a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d122      	bne.n	80038fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d11b      	bne.n	80038fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0202 	mvn.w	r2, #2
 80038cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f905 	bl	8003af2 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8f7 	bl	8003ade <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f908 	bl	8003b06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d122      	bne.n	8003950 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d11b      	bne.n	8003950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0204 	mvn.w	r2, #4
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8db 	bl	8003af2 <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8cd 	bl	8003ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8de 	bl	8003b06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b08      	cmp	r3, #8
 800395c:	d122      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b08      	cmp	r3, #8
 800396a:	d11b      	bne.n	80039a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f06f 0208 	mvn.w	r2, #8
 8003974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2204      	movs	r2, #4
 800397a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8b1 	bl	8003af2 <HAL_TIM_IC_CaptureCallback>
 8003990:	e005      	b.n	800399e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8a3 	bl	8003ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8b4 	bl	8003b06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d122      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d11b      	bne.n	80039f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0210 	mvn.w	r2, #16
 80039c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2208      	movs	r2, #8
 80039ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f887 	bl	8003af2 <HAL_TIM_IC_CaptureCallback>
 80039e4:	e005      	b.n	80039f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f879 	bl	8003ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f88a 	bl	8003b06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d10e      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0201 	mvn.w	r2, #1
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd f8f6 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b80      	cmp	r3, #128	; 0x80
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3c:	2b80      	cmp	r3, #128	; 0x80
 8003a3e:	d107      	bne.n	8003a50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8de 	bl	8003c0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5e:	d10e      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b80      	cmp	r3, #128	; 0x80
 8003a6c:	d107      	bne.n	8003a7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f8d1 	bl	8003c20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d10e      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d107      	bne.n	8003aaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f838 	bl	8003b1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d107      	bne.n	8003ad6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f06f 0220 	mvn.w	r2, #32
 8003ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f891 	bl	8003bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <TIM_Base_SetConfig+0xbc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0x20>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4e:	d108      	bne.n	8003b62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a21      	ldr	r2, [pc, #132]	; (8003bec <TIM_Base_SetConfig+0xbc>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00b      	beq.n	8003b82 <TIM_Base_SetConfig+0x52>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b70:	d007      	beq.n	8003b82 <TIM_Base_SetConfig+0x52>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <TIM_Base_SetConfig+0xc0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d003      	beq.n	8003b82 <TIM_Base_SetConfig+0x52>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <TIM_Base_SetConfig+0xc4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d108      	bne.n	8003b94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a0c      	ldr	r2, [pc, #48]	; (8003bec <TIM_Base_SetConfig+0xbc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <TIM_Base_SetConfig+0xa0>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0b      	ldr	r2, [pc, #44]	; (8003bf0 <TIM_Base_SetConfig+0xc0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d003      	beq.n	8003bd0 <TIM_Base_SetConfig+0xa0>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a0a      	ldr	r2, [pc, #40]	; (8003bf4 <TIM_Base_SetConfig+0xc4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d103      	bne.n	8003bd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	615a      	str	r2, [r3, #20]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40014400 	.word	0x40014400

08003bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e040      	b.n	8003cc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd f85c 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f82c 	bl	8003cd0 <UART_SetConfig>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e022      	b.n	8003cc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fa4c 	bl	8004128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fad3 	bl	800426c <UART_CheckIdleState>
 8003cc6:	4603      	mov	r3, r0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd4:	b08a      	sub	sp, #40	; 0x28
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4bb4      	ldr	r3, [pc, #720]	; (8003fd0 <UART_SetConfig+0x300>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4aa9      	ldr	r2, [pc, #676]	; (8003fd4 <UART_SetConfig+0x304>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4aa0      	ldr	r2, [pc, #640]	; (8003fd8 <UART_SetConfig+0x308>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d126      	bne.n	8003da8 <UART_SetConfig+0xd8>
 8003d5a:	4ba0      	ldr	r3, [pc, #640]	; (8003fdc <UART_SetConfig+0x30c>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d81b      	bhi.n	8003da0 <UART_SetConfig+0xd0>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <UART_SetConfig+0xa0>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d91 	.word	0x08003d91
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d99 	.word	0x08003d99
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	e080      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e07c      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003d90:	2304      	movs	r3, #4
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e078      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003d98:	2308      	movs	r3, #8
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	e074      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003da0:	2310      	movs	r3, #16
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da6:	e070      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a8c      	ldr	r2, [pc, #560]	; (8003fe0 <UART_SetConfig+0x310>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d138      	bne.n	8003e24 <UART_SetConfig+0x154>
 8003db2:	4b8a      	ldr	r3, [pc, #552]	; (8003fdc <UART_SetConfig+0x30c>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b0c      	cmp	r3, #12
 8003dbe:	d82d      	bhi.n	8003e1c <UART_SetConfig+0x14c>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <UART_SetConfig+0xf8>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dfd 	.word	0x08003dfd
 8003dcc:	08003e1d 	.word	0x08003e1d
 8003dd0:	08003e1d 	.word	0x08003e1d
 8003dd4:	08003e1d 	.word	0x08003e1d
 8003dd8:	08003e0d 	.word	0x08003e0d
 8003ddc:	08003e1d 	.word	0x08003e1d
 8003de0:	08003e1d 	.word	0x08003e1d
 8003de4:	08003e1d 	.word	0x08003e1d
 8003de8:	08003e05 	.word	0x08003e05
 8003dec:	08003e1d 	.word	0x08003e1d
 8003df0:	08003e1d 	.word	0x08003e1d
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e15 	.word	0x08003e15
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e042      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e04:	2302      	movs	r3, #2
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0a:	e03e      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e12:	e03a      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e14:	2308      	movs	r3, #8
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1a:	e036      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e22:	e032      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a6a      	ldr	r2, [pc, #424]	; (8003fd4 <UART_SetConfig+0x304>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12a      	bne.n	8003e84 <UART_SetConfig+0x1b4>
 8003e2e:	4b6b      	ldr	r3, [pc, #428]	; (8003fdc <UART_SetConfig+0x30c>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e3c:	d01a      	beq.n	8003e74 <UART_SetConfig+0x1a4>
 8003e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e42:	d81b      	bhi.n	8003e7c <UART_SetConfig+0x1ac>
 8003e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e48:	d00c      	beq.n	8003e64 <UART_SetConfig+0x194>
 8003e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e4e:	d815      	bhi.n	8003e7c <UART_SetConfig+0x1ac>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <UART_SetConfig+0x18c>
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d008      	beq.n	8003e6c <UART_SetConfig+0x19c>
 8003e5a:	e00f      	b.n	8003e7c <UART_SetConfig+0x1ac>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e62:	e012      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e64:	2302      	movs	r3, #2
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6a:	e00e      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e72:	e00a      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7a:	e006      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e82:	e002      	b.n	8003e8a <UART_SetConfig+0x1ba>
 8003e84:	2310      	movs	r3, #16
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a51      	ldr	r2, [pc, #324]	; (8003fd4 <UART_SetConfig+0x304>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d17a      	bne.n	8003f8a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d824      	bhi.n	8003ee6 <UART_SetConfig+0x216>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <UART_SetConfig+0x1d4>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ed7 	.word	0x08003ed7
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003ee7 	.word	0x08003ee7
 8003ec0:	08003ee7 	.word	0x08003ee7
 8003ec4:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec8:	f7fe f97e 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
        break;
 8003ece:	e010      	b.n	8003ef2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b44      	ldr	r3, [pc, #272]	; (8003fe4 <UART_SetConfig+0x314>)
 8003ed2:	61fb      	str	r3, [r7, #28]
        break;
 8003ed4:	e00d      	b.n	8003ef2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7fe f8df 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8003eda:	61f8      	str	r0, [r7, #28]
        break;
 8003edc:	e009      	b.n	8003ef2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	61fb      	str	r3, [r7, #28]
        break;
 8003ee4:	e005      	b.n	8003ef2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ef0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8107 	beq.w	8004108 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d305      	bcc.n	8003f16 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d903      	bls.n	8003f1e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f1c:	e0f4      	b.n	8004108 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2200      	movs	r2, #0
 8003f22:	461c      	mov	r4, r3
 8003f24:	4615      	mov	r5, r2
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	022b      	lsls	r3, r5, #8
 8003f30:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f34:	0222      	lsls	r2, r4, #8
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	6849      	ldr	r1, [r1, #4]
 8003f3a:	0849      	lsrs	r1, r1, #1
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	4688      	mov	r8, r1
 8003f40:	4681      	mov	r9, r0
 8003f42:	eb12 0a08 	adds.w	sl, r2, r8
 8003f46:	eb43 0b09 	adc.w	fp, r3, r9
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f58:	4650      	mov	r0, sl
 8003f5a:	4659      	mov	r1, fp
 8003f5c:	f7fc f998 	bl	8000290 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4613      	mov	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f6e:	d308      	bcc.n	8003f82 <UART_SetConfig+0x2b2>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f76:	d204      	bcs.n	8003f82 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	e0c2      	b.n	8004108 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f88:	e0be      	b.n	8004108 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f92:	d16a      	bne.n	800406a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d834      	bhi.n	8004006 <UART_SetConfig+0x336>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0x2d4>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fe9 	.word	0x08003fe9
 8003fac:	08003ff1 	.word	0x08003ff1
 8003fb0:	08004007 	.word	0x08004007
 8003fb4:	08003ff7 	.word	0x08003ff7
 8003fb8:	08004007 	.word	0x08004007
 8003fbc:	08004007 	.word	0x08004007
 8003fc0:	08004007 	.word	0x08004007
 8003fc4:	08003fff 	.word	0x08003fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7fe f8fe 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	61f8      	str	r0, [r7, #28]
        break;
 8003fce:	e020      	b.n	8004012 <UART_SetConfig+0x342>
 8003fd0:	efff69f3 	.word	0xefff69f3
 8003fd4:	40008000 	.word	0x40008000
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe8:	f7fe f904 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 8003fec:	61f8      	str	r0, [r7, #28]
        break;
 8003fee:	e010      	b.n	8004012 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <UART_SetConfig+0x454>)
 8003ff2:	61fb      	str	r3, [r7, #28]
        break;
 8003ff4:	e00d      	b.n	8004012 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ff6:	f7fe f84f 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8003ffa:	61f8      	str	r0, [r7, #28]
        break;
 8003ffc:	e009      	b.n	8004012 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004002:	61fb      	str	r3, [r7, #28]
        break;
 8004004:	e005      	b.n	8004012 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d077      	beq.n	8004108 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005a      	lsls	r2, r3, #1
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	441a      	add	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b0f      	cmp	r3, #15
 8004032:	d916      	bls.n	8004062 <UART_SetConfig+0x392>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d212      	bcs.n	8004062 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f023 030f 	bic.w	r3, r3, #15
 8004044:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	b29a      	uxth	r2, r3
 8004052:	8afb      	ldrh	r3, [r7, #22]
 8004054:	4313      	orrs	r3, r2
 8004056:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	8afa      	ldrh	r2, [r7, #22]
 800405e:	60da      	str	r2, [r3, #12]
 8004060:	e052      	b.n	8004108 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004068:	e04e      	b.n	8004108 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800406a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800406e:	2b08      	cmp	r3, #8
 8004070:	d827      	bhi.n	80040c2 <UART_SetConfig+0x3f2>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x3a8>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040a5 	.word	0x080040a5
 8004080:	080040ad 	.word	0x080040ad
 8004084:	080040c3 	.word	0x080040c3
 8004088:	080040b3 	.word	0x080040b3
 800408c:	080040c3 	.word	0x080040c3
 8004090:	080040c3 	.word	0x080040c3
 8004094:	080040c3 	.word	0x080040c3
 8004098:	080040bb 	.word	0x080040bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe f894 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 80040a0:	61f8      	str	r0, [r7, #28]
        break;
 80040a2:	e014      	b.n	80040ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7fe f8a6 	bl	80021f4 <HAL_RCC_GetPCLK2Freq>
 80040a8:	61f8      	str	r0, [r7, #28]
        break;
 80040aa:	e010      	b.n	80040ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <UART_SetConfig+0x454>)
 80040ae:	61fb      	str	r3, [r7, #28]
        break;
 80040b0:	e00d      	b.n	80040ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fd fff1 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 80040b6:	61f8      	str	r0, [r7, #28]
        break;
 80040b8:	e009      	b.n	80040ce <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040be:	61fb      	str	r3, [r7, #28]
        break;
 80040c0:	e005      	b.n	80040ce <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040cc:	bf00      	nop
    }

    if (pclk != 0U)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d019      	beq.n	8004108 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	085a      	lsrs	r2, r3, #1
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	441a      	add	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d909      	bls.n	8004102 <UART_SetConfig+0x432>
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d205      	bcs.n	8004102 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e002      	b.n	8004108 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004114:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004118:	4618      	mov	r0, r3
 800411a:	3728      	adds	r7, #40	; 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	00f42400 	.word	0x00f42400

08004128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01a      	beq.n	800423e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004226:	d10a      	bne.n	800423e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800427c:	f7fc ff24 	bl	80010c8 <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d10e      	bne.n	80042ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f82d 	bl	80042fe <UART_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e023      	b.n	80042f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d10e      	bne.n	80042da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f817 	bl	80042fe <UART_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e00d      	b.n	80042f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b09c      	sub	sp, #112	; 0x70
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430e:	e0a5      	b.n	800445c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	f000 80a1 	beq.w	800445c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431a:	f7fc fed5 	bl	80010c8 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <UART_WaitOnFlagUntilTimeout+0x32>
 800432a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432c:	2b00      	cmp	r3, #0
 800432e:	d13e      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800433e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004344:	667b      	str	r3, [r7, #100]	; 0x64
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004350:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800435c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e6      	bne.n	8004330 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	663b      	str	r3, [r7, #96]	; 0x60
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004382:	64ba      	str	r2, [r7, #72]	; 0x48
 8004384:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e5      	bne.n	8004362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e067      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d04f      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ca:	d147      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	637b      	str	r3, [r7, #52]	; 0x34
 80043f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e6      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3308      	adds	r3, #8
 800440e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	613b      	str	r3, [r7, #16]
   return(result);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3308      	adds	r3, #8
 8004426:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004428:	623a      	str	r2, [r7, #32]
 800442a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	69f9      	ldr	r1, [r7, #28]
 800442e:	6a3a      	ldr	r2, [r7, #32]
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	61bb      	str	r3, [r7, #24]
   return(result);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e010      	b.n	800447e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	429a      	cmp	r2, r3
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	429a      	cmp	r2, r3
 8004478:	f43f af4a 	beq.w	8004310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3770      	adds	r7, #112	; 0x70
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004498:	2b84      	cmp	r3, #132	; 0x84
 800449a:	d005      	beq.n	80044a8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800449c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	3303      	adds	r3, #3
 80044a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044a8:	68fb      	ldr	r3, [r7, #12]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044ba:	f001 f9a5 	bl	8005808 <vTaskStartScheduler>
  
  return osOK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af04      	add	r7, sp, #16
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d020      	beq.n	8004518 <osThreadCreate+0x54>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01c      	beq.n	8004518 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685c      	ldr	r4, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681d      	ldr	r5, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691e      	ldr	r6, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ffc8 	bl	8004486 <makeFreeRtosPriority>
 80044f6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004500:	9202      	str	r2, [sp, #8]
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	9100      	str	r1, [sp, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	4632      	mov	r2, r6
 800450a:	4629      	mov	r1, r5
 800450c:	4620      	mov	r0, r4
 800450e:	f000 ff9d 	bl	800544c <xTaskCreateStatic>
 8004512:	4603      	mov	r3, r0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	e01c      	b.n	8004552 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685c      	ldr	r4, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004524:	b29e      	uxth	r6, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ffaa 	bl	8004486 <makeFreeRtosPriority>
 8004532:	4602      	mov	r2, r0
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	9200      	str	r2, [sp, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4632      	mov	r2, r6
 8004540:	4629      	mov	r1, r5
 8004542:	4620      	mov	r0, r4
 8004544:	f000 ffdf 	bl	8005506 <xTaskCreate>
 8004548:	4603      	mov	r3, r0
 800454a:	2b01      	cmp	r3, #1
 800454c:	d001      	beq.n	8004552 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800455c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <osDelay+0x16>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	e000      	b.n	8004574 <osDelay+0x18>
 8004572:	2301      	movs	r3, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f001 f913 	bl	80057a0 <vTaskDelay>
  
  return osOK;
 800457a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af02      	add	r7, sp, #8
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10a      	bne.n	80045b2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2203      	movs	r2, #3
 80045a2:	9200      	str	r2, [sp, #0]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2100      	movs	r1, #0
 80045a8:	2001      	movs	r0, #1
 80045aa:	f000 f947 	bl	800483c <xQueueGenericCreateStatic>
 80045ae:	4603      	mov	r3, r0
 80045b0:	e023      	b.n	80045fa <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80045b2:	6838      	ldr	r0, [r7, #0]
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f000 fa0f 	bl	80049de <xQueueCreateCountingSemaphoreStatic>
 80045c0:	4603      	mov	r3, r0
 80045c2:	e01a      	b.n	80045fa <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d110      	bne.n	80045ec <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80045ca:	2203      	movs	r2, #3
 80045cc:	2100      	movs	r1, #0
 80045ce:	2001      	movs	r0, #1
 80045d0:	f000 f9ac 	bl	800492c <xQueueGenericCreate>
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <osSemaphoreCreate+0x64>
 80045dc:	2300      	movs	r3, #0
 80045de:	2200      	movs	r2, #0
 80045e0:	2100      	movs	r1, #0
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fa66 	bl	8004ab4 <xQueueGenericSend>
      return sema;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	e006      	b.n	80045fa <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fa2a 	bl	8004a4c <xQueueCreateCountingSemaphore>
 80045f8:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f103 0208 	add.w	r2, r3, #8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f04f 32ff 	mov.w	r2, #4294967295
 800461a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f103 0208 	add.w	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f103 0208 	add.w	r2, r3, #8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	601a      	str	r2, [r3, #0]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d103      	bne.n	80046c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e00c      	b.n	80046de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3308      	adds	r3, #8
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e002      	b.n	80046d2 <vListInsert+0x2e>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d2f6      	bcs.n	80046cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	601a      	str	r2, [r3, #0]
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6892      	ldr	r2, [r2, #8]
 800472c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6852      	ldr	r2, [r2, #4]
 8004736:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	429a      	cmp	r2, r3
 8004740:	d103      	bne.n	800474a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	1e5a      	subs	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004796:	f001 ff95 	bl	80066c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	3b01      	subs	r3, #1
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	441a      	add	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	22ff      	movs	r2, #255	; 0xff
 80047da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	22ff      	movs	r2, #255	; 0xff
 80047e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d114      	bne.n	8004816 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01a      	beq.n	800482a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3310      	adds	r3, #16
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 fa57 	bl	8005cac <xTaskRemoveFromEventList>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d012      	beq.n	800482a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <xQueueGenericReset+0xcc>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	e009      	b.n	800482a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3310      	adds	r3, #16
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fef1 	bl	8004602 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3324      	adds	r3, #36	; 0x24
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff feec 	bl	8004602 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800482a:	f001 ff7b 	bl	8006724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800482e:	2301      	movs	r3, #1
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	; 0x38
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <xQueueGenericCreateStatic+0x52>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <xQueueGenericCreateStatic+0x56>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueGenericCreateStatic+0x58>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	623b      	str	r3, [r7, #32]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <xQueueGenericCreateStatic+0x7e>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <xQueueGenericCreateStatic+0x82>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <xQueueGenericCreateStatic+0x84>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	61fb      	str	r3, [r7, #28]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048da:	2348      	movs	r3, #72	; 0x48
 80048dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b48      	cmp	r3, #72	; 0x48
 80048e2:	d00a      	beq.n	80048fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	61bb      	str	r3, [r7, #24]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00d      	beq.n	8004922 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800490e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f83f 	bl	80049a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004924:	4618      	mov	r0, r3
 8004926:	3730      	adds	r7, #48	; 0x30
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	613b      	str	r3, [r7, #16]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3348      	adds	r3, #72	; 0x48
 8004964:	4618      	mov	r0, r3
 8004966:	f001 ffcf 	bl	8006908 <pvPortMalloc>
 800496a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d011      	beq.n	8004996 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3348      	adds	r3, #72	; 0x48
 800497a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004984:	79fa      	ldrb	r2, [r7, #7]
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f805 	bl	80049a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004996:	69bb      	ldr	r3, [r7, #24]
	}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d103      	bne.n	80049bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049ce:	2101      	movs	r1, #1
 80049d0:	69b8      	ldr	r0, [r7, #24]
 80049d2:	f7ff fecb 	bl	800476c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b08a      	sub	sp, #40	; 0x28
 80049e2:	af02      	add	r7, sp, #8
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	61bb      	str	r3, [r7, #24]
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d90a      	bls.n	8004a24 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	617b      	str	r3, [r7, #20]
}
 8004a20:	bf00      	nop
 8004a22:	e7fe      	b.n	8004a22 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a24:	2302      	movs	r3, #2
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f7ff ff04 	bl	800483c <xQueueGenericCreateStatic>
 8004a34:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004a42:	69fb      	ldr	r3, [r7, #28]
	}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	613b      	str	r3, [r7, #16]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d90a      	bls.n	8004a90 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60fb      	str	r3, [r7, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	e7fe      	b.n	8004a8e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a90:	2202      	movs	r2, #2
 8004a92:	2100      	movs	r1, #0
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff49 	bl	800492c <xQueueGenericCreate>
 8004a9a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004aa8:	697b      	ldr	r3, [r7, #20]
	}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08e      	sub	sp, #56	; 0x38
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <xQueueGenericSend+0x32>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <xQueueGenericSend+0x40>
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <xQueueGenericSend+0x44>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <xQueueGenericSend+0x46>
 8004af8:	2300      	movs	r3, #0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <xQueueGenericSend+0x60>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d103      	bne.n	8004b22 <xQueueGenericSend+0x6e>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d101      	bne.n	8004b26 <xQueueGenericSend+0x72>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <xQueueGenericSend+0x74>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <xQueueGenericSend+0x8e>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	623b      	str	r3, [r7, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b42:	f001 fa73 	bl	800602c <xTaskGetSchedulerState>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <xQueueGenericSend+0x9e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <xQueueGenericSend+0xa2>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <xQueueGenericSend+0xa4>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xQueueGenericSend+0xbe>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	61fb      	str	r3, [r7, #28]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b72:	f001 fda7 	bl	80066c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <xQueueGenericSend+0xd4>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d129      	bne.n	8004bdc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8e:	f000 fb4d 	bl	800522c <prvCopyDataToQueue>
 8004b92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d010      	beq.n	8004bbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	3324      	adds	r3, #36	; 0x24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 f883 	bl	8005cac <xTaskRemoveFromEventList>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bac:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <xQueueGenericSend+0x1f8>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	e00a      	b.n	8004bd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <xQueueGenericSend+0x1f8>)
 8004bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bd4:	f001 fda6 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e063      	b.n	8004ca4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004be2:	f001 fd9f 	bl	8006724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e05c      	b.n	8004ca4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f001 f8bb 	bl	8005d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bfe:	f001 fd91 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c02:	f000 fe6b 	bl	80058dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c06:	f001 fd5d 	bl	80066c4 <vPortEnterCritical>
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d103      	bne.n	8004c20 <xQueueGenericSend+0x16c>
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d103      	bne.n	8004c36 <xQueueGenericSend+0x182>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c36:	f001 fd75 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c3a:	1d3a      	adds	r2, r7, #4
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 f8aa 	bl	8005d9c <xTaskCheckForTimeOut>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d124      	bne.n	8004c98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c50:	f000 fbe4 	bl	800541c <prvIsQueueFull>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d018      	beq.n	8004c8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	3310      	adds	r3, #16
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fffe 	bl	8005c64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6a:	f000 fb6f 	bl	800534c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c6e:	f000 fe43 	bl	80058f8 <xTaskResumeAll>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f47f af7c 	bne.w	8004b72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <xQueueGenericSend+0x1f8>)
 8004c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	e772      	b.n	8004b72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c8e:	f000 fb5d 	bl	800534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c92:	f000 fe31 	bl	80058f8 <xTaskResumeAll>
 8004c96:	e76c      	b.n	8004b72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c9a:	f000 fb57 	bl	800534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c9e:	f000 fe2b 	bl	80058f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ca2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3738      	adds	r7, #56	; 0x38
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	e000ed04 	.word	0xe000ed04

08004cb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b090      	sub	sp, #64	; 0x40
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <xQueueGenericSendFromISR+0x3c>
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <xQueueGenericSendFromISR+0x40>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <xQueueGenericSendFromISR+0x42>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10a      	bne.n	8004d0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d08:	bf00      	nop
 8004d0a:	e7fe      	b.n	8004d0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d103      	bne.n	8004d1a <xQueueGenericSendFromISR+0x6a>
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <xQueueGenericSendFromISR+0x6e>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <xQueueGenericSendFromISR+0x70>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	623b      	str	r3, [r7, #32]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d3a:	f001 fda5 	bl	8006888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d3e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	61fa      	str	r2, [r7, #28]
 8004d54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <xQueueGenericSendFromISR+0xbc>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d12f      	bne.n	8004dcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d82:	f000 fa53 	bl	800522c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d112      	bne.n	8004db6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d016      	beq.n	8004dc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	3324      	adds	r3, #36	; 0x24
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 ff85 	bl	8005cac <xTaskRemoveFromEventList>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00e      	beq.n	8004dc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e007      	b.n	8004dc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004db6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004dba:	3301      	adds	r3, #1
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	b25a      	sxtb	r2, r3
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004dca:	e001      	b.n	8004dd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3740      	adds	r7, #64	; 0x40
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08c      	sub	sp, #48	; 0x30
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <xQueueReceive+0x30>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	623b      	str	r3, [r7, #32]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <xQueueReceive+0x3e>
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <xQueueReceive+0x42>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <xQueueReceive+0x44>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xQueueReceive+0x5e>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	61fb      	str	r3, [r7, #28]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e46:	f001 f8f1 	bl	800602c <xTaskGetSchedulerState>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xQueueReceive+0x6e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <xQueueReceive+0x72>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <xQueueReceive+0x74>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <xQueueReceive+0x8e>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	61bb      	str	r3, [r7, #24]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e76:	f001 fc25 	bl	80066c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01f      	beq.n	8004ec6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e8a:	f000 fa39 	bl	8005300 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1e5a      	subs	r2, r3, #1
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00f      	beq.n	8004ebe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	3310      	adds	r3, #16
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 ff02 	bl	8005cac <xTaskRemoveFromEventList>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004eae:	4b3d      	ldr	r3, [pc, #244]	; (8004fa4 <xQueueReceive+0x1bc>)
 8004eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ebe:	f001 fc31 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e069      	b.n	8004f9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d103      	bne.n	8004ed4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ecc:	f001 fc2a 	bl	8006724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e062      	b.n	8004f9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eda:	f107 0310 	add.w	r3, r7, #16
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 ff46 	bl	8005d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ee8:	f001 fc1c 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004eec:	f000 fcf6 	bl	80058dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ef0:	f001 fbe8 	bl	80066c4 <vPortEnterCritical>
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004efa:	b25b      	sxtb	r3, r3
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d103      	bne.n	8004f0a <xQueueReceive+0x122>
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d103      	bne.n	8004f20 <xQueueReceive+0x138>
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f20:	f001 fc00 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f24:	1d3a      	adds	r2, r7, #4
 8004f26:	f107 0310 	add.w	r3, r7, #16
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 ff35 	bl	8005d9c <xTaskCheckForTimeOut>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d123      	bne.n	8004f80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f3a:	f000 fa59 	bl	80053f0 <prvIsQueueEmpty>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	3324      	adds	r3, #36	; 0x24
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fe89 	bl	8005c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f54:	f000 f9fa 	bl	800534c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f58:	f000 fcce 	bl	80058f8 <xTaskResumeAll>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d189      	bne.n	8004e76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <xQueueReceive+0x1bc>)
 8004f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	e780      	b.n	8004e76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f76:	f000 f9e9 	bl	800534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f7a:	f000 fcbd 	bl	80058f8 <xTaskResumeAll>
 8004f7e:	e77a      	b.n	8004e76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f82:	f000 f9e3 	bl	800534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f86:	f000 fcb7 	bl	80058f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8c:	f000 fa30 	bl	80053f0 <prvIsQueueEmpty>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f43f af6f 	beq.w	8004e76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3730      	adds	r7, #48	; 0x30
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08e      	sub	sp, #56	; 0x38
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	623b      	str	r3, [r7, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	61fb      	str	r3, [r7, #28]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff8:	f001 f818 	bl	800602c <xTaskGetSchedulerState>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <xQueueSemaphoreTake+0x60>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <xQueueSemaphoreTake+0x64>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <xQueueSemaphoreTake+0x66>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	61bb      	str	r3, [r7, #24]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005028:	f001 fb4c 	bl	80066c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d024      	beq.n	8005082 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005048:	f001 f998 	bl	800637c <pvTaskIncrementMutexHeldCount>
 800504c:	4602      	mov	r2, r0
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00f      	beq.n	800507a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	3310      	adds	r3, #16
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fe24 	bl	8005cac <xTaskRemoveFromEventList>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800506a:	4b54      	ldr	r3, [pc, #336]	; (80051bc <xQueueSemaphoreTake+0x214>)
 800506c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800507a:	f001 fb53 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 800507e:	2301      	movs	r3, #1
 8005080:	e097      	b.n	80051b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d111      	bne.n	80050ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	617b      	str	r3, [r7, #20]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80050a4:	f001 fb3e 	bl	8006724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e082      	b.n	80051b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b2:	f107 030c 	add.w	r3, r7, #12
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fe5a 	bl	8005d70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050bc:	2301      	movs	r3, #1
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c0:	f001 fb30 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050c4:	f000 fc0a 	bl	80058dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050c8:	f001 fafc 	bl	80066c4 <vPortEnterCritical>
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d2:	b25b      	sxtb	r3, r3
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d103      	bne.n	80050e2 <xQueueSemaphoreTake+0x13a>
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d103      	bne.n	80050f8 <xQueueSemaphoreTake+0x150>
 80050f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f8:	f001 fb14 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050fc:	463a      	mov	r2, r7
 80050fe:	f107 030c 	add.w	r3, r7, #12
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f000 fe49 	bl	8005d9c <xTaskCheckForTimeOut>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d132      	bne.n	8005176 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005112:	f000 f96d 	bl	80053f0 <prvIsQueueEmpty>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d026      	beq.n	800516a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005124:	f001 face 	bl	80066c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 ff9b 	bl	8006068 <xTaskPriorityInherit>
 8005132:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005134:	f001 faf6 	bl	8006724 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513a:	3324      	adds	r3, #36	; 0x24
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fd8f 	bl	8005c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005148:	f000 f900 	bl	800534c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800514c:	f000 fbd4 	bl	80058f8 <xTaskResumeAll>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	f47f af68 	bne.w	8005028 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005158:	4b18      	ldr	r3, [pc, #96]	; (80051bc <xQueueSemaphoreTake+0x214>)
 800515a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	e75e      	b.n	8005028 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800516a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800516c:	f000 f8ee 	bl	800534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005170:	f000 fbc2 	bl	80058f8 <xTaskResumeAll>
 8005174:	e758      	b.n	8005028 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005178:	f000 f8e8 	bl	800534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800517c:	f000 fbbc 	bl	80058f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005182:	f000 f935 	bl	80053f0 <prvIsQueueEmpty>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	f43f af4d 	beq.w	8005028 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005194:	f001 fa96 	bl	80066c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800519a:	f000 f82f 	bl	80051fc <prvGetDisinheritPriorityAfterTimeout>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 f85a 	bl	8006260 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80051ac:	f001 faba 	bl	8006724 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3738      	adds	r7, #56	; 0x38
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	60fb      	str	r3, [r7, #12]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80051ee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80051f0:	4618      	mov	r0, r3
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1c3 0307 	rsb	r3, r3, #7
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	e001      	b.n	800521e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800521e:	68fb      	ldr	r3, [r7, #12]
	}
 8005220:	4618      	mov	r0, r3
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d14d      	bne.n	80052ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 ff7c 	bl	8006154 <xTaskPriorityDisinherit>
 800525c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	e043      	b.n	80052ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d119      	bne.n	80052a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6858      	ldr	r0, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	461a      	mov	r2, r3
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	f001 fe53 	bl	8006f22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	441a      	add	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d32b      	bcc.n	80052ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	e026      	b.n	80052ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68d8      	ldr	r0, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	461a      	mov	r2, r3
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	f001 fe39 	bl	8006f22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	425b      	negs	r3, r3
 80052ba:	441a      	add	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d207      	bcs.n	80052dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	425b      	negs	r3, r3
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d105      	bne.n	80052ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80052f6:	697b      	ldr	r3, [r7, #20]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d018      	beq.n	8005344 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	441a      	add	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	429a      	cmp	r2, r3
 800532a:	d303      	bcc.n	8005334 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68d9      	ldr	r1, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	461a      	mov	r2, r3
 800533e:	6838      	ldr	r0, [r7, #0]
 8005340:	f001 fdef 	bl	8006f22 <memcpy>
	}
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005354:	f001 f9b6 	bl	80066c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005360:	e011      	b.n	8005386 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3324      	adds	r3, #36	; 0x24
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fc9c 	bl	8005cac <xTaskRemoveFromEventList>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800537a:	f000 fd71 	bl	8005e60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	3b01      	subs	r3, #1
 8005382:	b2db      	uxtb	r3, r3
 8005384:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dce9      	bgt.n	8005362 <prvUnlockQueue+0x16>
 800538e:	e000      	b.n	8005392 <prvUnlockQueue+0x46>
					break;
 8005390:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	22ff      	movs	r2, #255	; 0xff
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800539a:	f001 f9c3 	bl	8006724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800539e:	f001 f991 	bl	80066c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053aa:	e011      	b.n	80053d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d012      	beq.n	80053da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3310      	adds	r3, #16
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fc77 	bl	8005cac <xTaskRemoveFromEventList>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80053c4:	f000 fd4c 	bl	8005e60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dce9      	bgt.n	80053ac <prvUnlockQueue+0x60>
 80053d8:	e000      	b.n	80053dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80053da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	22ff      	movs	r2, #255	; 0xff
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80053e4:	f001 f99e 	bl	8006724 <vPortExitCritical>
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053f8:	f001 f964 	bl	80066c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e001      	b.n	800540e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800540e:	f001 f989 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8005412:	68fb      	ldr	r3, [r7, #12]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005424:	f001 f94e 	bl	80066c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	429a      	cmp	r2, r3
 8005432:	d102      	bne.n	800543a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	e001      	b.n	800543e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800543e:	f001 f971 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8005442:	68fb      	ldr	r3, [r7, #12]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08e      	sub	sp, #56	; 0x38
 8005450:	af04      	add	r7, sp, #16
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	623b      	str	r3, [r7, #32]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xTaskCreateStatic+0x46>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61fb      	str	r3, [r7, #28]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005492:	23b4      	movs	r3, #180	; 0xb4
 8005494:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2bb4      	cmp	r3, #180	; 0xb4
 800549a:	d00a      	beq.n	80054b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	61bb      	str	r3, [r7, #24]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80054b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01e      	beq.n	80054f8 <xTaskCreateStatic+0xac>
 80054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01b      	beq.n	80054f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054d2:	2300      	movs	r3, #0
 80054d4:	9303      	str	r3, [sp, #12]
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	f107 0314 	add.w	r3, r7, #20
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f850 	bl	8005590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054f2:	f000 f8eb 	bl	80056cc <prvAddNewTaskToReadyList>
 80054f6:	e001      	b.n	80054fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054fc:	697b      	ldr	r3, [r7, #20]
	}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005506:	b580      	push	{r7, lr}
 8005508:	b08c      	sub	sp, #48	; 0x30
 800550a:	af04      	add	r7, sp, #16
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4618      	mov	r0, r3
 800551c:	f001 f9f4 	bl	8006908 <pvPortMalloc>
 8005520:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00e      	beq.n	8005546 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005528:	20b4      	movs	r0, #180	; 0xb4
 800552a:	f001 f9ed 	bl	8006908 <pvPortMalloc>
 800552e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
 800553c:	e005      	b.n	800554a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800553e:	6978      	ldr	r0, [r7, #20]
 8005540:	f001 faae 	bl	8006aa0 <vPortFree>
 8005544:	e001      	b.n	800554a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d017      	beq.n	8005580 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	2300      	movs	r3, #0
 800555c:	9303      	str	r3, [sp, #12]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	9302      	str	r3, [sp, #8]
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f80e 	bl	8005590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005574:	69f8      	ldr	r0, [r7, #28]
 8005576:	f000 f8a9 	bl	80056cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800557a:	2301      	movs	r3, #1
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e002      	b.n	8005586 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005580:	f04f 33ff 	mov.w	r3, #4294967295
 8005584:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005586:	69bb      	ldr	r3, [r7, #24]
	}
 8005588:	4618      	mov	r0, r3
 800558a:	3720      	adds	r7, #32
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80055a8:	3b01      	subs	r3, #1
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	617b      	str	r3, [r7, #20]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01f      	beq.n	800561e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	e012      	b.n	800560a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	7819      	ldrb	r1, [r3, #0]
 80055ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	3334      	adds	r3, #52	; 0x34
 80055f4:	460a      	mov	r2, r1
 80055f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d006      	beq.n	8005612 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	3301      	adds	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	2b0f      	cmp	r3, #15
 800560e:	d9e9      	bls.n	80055e4 <prvInitialiseNewTask+0x54>
 8005610:	e000      	b.n	8005614 <prvInitialiseNewTask+0x84>
			{
				break;
 8005612:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800561c:	e003      	b.n	8005626 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	2b06      	cmp	r3, #6
 800562a:	d901      	bls.n	8005630 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800562c:	2306      	movs	r3, #6
 800562e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	2200      	movs	r2, #0
 8005640:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	3304      	adds	r3, #4
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fffb 	bl	8004642 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	3318      	adds	r3, #24
 8005650:	4618      	mov	r0, r3
 8005652:	f7fe fff6 	bl	8004642 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	f1c3 0207 	rsb	r2, r3, #7
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	2200      	movs	r2, #0
 8005670:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	2200      	movs	r2, #0
 8005678:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	334c      	adds	r3, #76	; 0x4c
 8005680:	2260      	movs	r2, #96	; 0x60
 8005682:	2100      	movs	r1, #0
 8005684:	4618      	mov	r0, r3
 8005686:	f001 fc5a 	bl	8006f3e <memset>
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	4a0c      	ldr	r2, [pc, #48]	; (80056c0 <prvInitialiseNewTask+0x130>)
 800568e:	651a      	str	r2, [r3, #80]	; 0x50
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <prvInitialiseNewTask+0x134>)
 8005694:	655a      	str	r2, [r3, #84]	; 0x54
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	4a0b      	ldr	r2, [pc, #44]	; (80056c8 <prvInitialiseNewTask+0x138>)
 800569a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	69b8      	ldr	r0, [r7, #24]
 80056a2:	f000 fee5 	bl	8006470 <pxPortInitialiseStack>
 80056a6:	4602      	mov	r2, r0
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b8:	bf00      	nop
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	08007e60 	.word	0x08007e60
 80056c4:	08007e80 	.word	0x08007e80
 80056c8:	08007e40 	.word	0x08007e40

080056cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80056d4:	f000 fff6 	bl	80066c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80056d8:	4b2a      	ldr	r3, [pc, #168]	; (8005784 <prvAddNewTaskToReadyList+0xb8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	4a29      	ldr	r2, [pc, #164]	; (8005784 <prvAddNewTaskToReadyList+0xb8>)
 80056e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056e2:	4b29      	ldr	r3, [pc, #164]	; (8005788 <prvAddNewTaskToReadyList+0xbc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <prvAddNewTaskToReadyList+0xbc>)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056f0:	4b24      	ldr	r3, [pc, #144]	; (8005784 <prvAddNewTaskToReadyList+0xb8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d110      	bne.n	800571a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056f8:	f000 fbd6 	bl	8005ea8 <prvInitialiseTaskLists>
 80056fc:	e00d      	b.n	800571a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056fe:	4b23      	ldr	r3, [pc, #140]	; (800578c <prvAddNewTaskToReadyList+0xc0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005706:	4b20      	ldr	r3, [pc, #128]	; (8005788 <prvAddNewTaskToReadyList+0xbc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	429a      	cmp	r2, r3
 8005712:	d802      	bhi.n	800571a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005714:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <prvAddNewTaskToReadyList+0xbc>)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <prvAddNewTaskToReadyList+0xc4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <prvAddNewTaskToReadyList+0xc4>)
 8005722:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	2201      	movs	r2, #1
 800572a:	409a      	lsls	r2, r3
 800572c:	4b19      	ldr	r3, [pc, #100]	; (8005794 <prvAddNewTaskToReadyList+0xc8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4313      	orrs	r3, r2
 8005732:	4a18      	ldr	r2, [pc, #96]	; (8005794 <prvAddNewTaskToReadyList+0xc8>)
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a15      	ldr	r2, [pc, #84]	; (8005798 <prvAddNewTaskToReadyList+0xcc>)
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f7fe ff85 	bl	800465c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005752:	f000 ffe7 	bl	8006724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <prvAddNewTaskToReadyList+0xc0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800575e:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <prvAddNewTaskToReadyList+0xbc>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	429a      	cmp	r2, r3
 800576a:	d207      	bcs.n	800577c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <prvAddNewTaskToReadyList+0xd0>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800577c:	bf00      	nop
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	2000073c 	.word	0x2000073c
 8005788:	2000063c 	.word	0x2000063c
 800578c:	20000748 	.word	0x20000748
 8005790:	20000758 	.word	0x20000758
 8005794:	20000744 	.word	0x20000744
 8005798:	20000640 	.word	0x20000640
 800579c:	e000ed04 	.word	0xe000ed04

080057a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d017      	beq.n	80057e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057b2:	4b13      	ldr	r3, [pc, #76]	; (8005800 <vTaskDelay+0x60>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <vTaskDelay+0x30>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60bb      	str	r3, [r7, #8]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80057d0:	f000 f884 	bl	80058dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057d4:	2100      	movs	r1, #0
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fde4 	bl	80063a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057dc:	f000 f88c 	bl	80058f8 <xTaskResumeAll>
 80057e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d107      	bne.n	80057f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <vTaskDelay+0x64>)
 80057ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000764 	.word	0x20000764
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005816:	463a      	mov	r2, r7
 8005818:	1d39      	adds	r1, r7, #4
 800581a:	f107 0308 	add.w	r3, r7, #8
 800581e:	4618      	mov	r0, r3
 8005820:	f7fa feb8 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005824:	6839      	ldr	r1, [r7, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	9202      	str	r2, [sp, #8]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	2300      	movs	r3, #0
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	2300      	movs	r3, #0
 8005834:	460a      	mov	r2, r1
 8005836:	4921      	ldr	r1, [pc, #132]	; (80058bc <vTaskStartScheduler+0xb4>)
 8005838:	4821      	ldr	r0, [pc, #132]	; (80058c0 <vTaskStartScheduler+0xb8>)
 800583a:	f7ff fe07 	bl	800544c <xTaskCreateStatic>
 800583e:	4603      	mov	r3, r0
 8005840:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <vTaskStartScheduler+0xbc>)
 8005842:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005844:	4b1f      	ldr	r3, [pc, #124]	; (80058c4 <vTaskStartScheduler+0xbc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e001      	b.n	8005856 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d11b      	bne.n	8005894 <vTaskStartScheduler+0x8c>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	613b      	str	r3, [r7, #16]
}
 800586e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005870:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <vTaskStartScheduler+0xc0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	334c      	adds	r3, #76	; 0x4c
 8005876:	4a15      	ldr	r2, [pc, #84]	; (80058cc <vTaskStartScheduler+0xc4>)
 8005878:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <vTaskStartScheduler+0xc8>)
 800587c:	f04f 32ff 	mov.w	r2, #4294967295
 8005880:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005882:	4b14      	ldr	r3, [pc, #80]	; (80058d4 <vTaskStartScheduler+0xcc>)
 8005884:	2201      	movs	r2, #1
 8005886:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005888:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <vTaskStartScheduler+0xd0>)
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800588e:	f000 fe77 	bl	8006580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005892:	e00e      	b.n	80058b2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d10a      	bne.n	80058b2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60fb      	str	r3, [r7, #12]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <vTaskStartScheduler+0xa8>
}
 80058b2:	bf00      	nop
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	08007dec 	.word	0x08007dec
 80058c0:	08005e79 	.word	0x08005e79
 80058c4:	20000760 	.word	0x20000760
 80058c8:	2000063c 	.word	0x2000063c
 80058cc:	20000010 	.word	0x20000010
 80058d0:	2000075c 	.word	0x2000075c
 80058d4:	20000748 	.word	0x20000748
 80058d8:	20000740 	.word	0x20000740

080058dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058e0:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <vTaskSuspendAll+0x18>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	4a03      	ldr	r2, [pc, #12]	; (80058f4 <vTaskSuspendAll+0x18>)
 80058e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058ea:	bf00      	nop
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	20000764 	.word	0x20000764

080058f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005902:	2300      	movs	r3, #0
 8005904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005906:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <xTaskResumeAll+0x114>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <xTaskResumeAll+0x2c>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	603b      	str	r3, [r7, #0]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005924:	f000 fece 	bl	80066c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005928:	4b38      	ldr	r3, [pc, #224]	; (8005a0c <xTaskResumeAll+0x114>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3b01      	subs	r3, #1
 800592e:	4a37      	ldr	r2, [pc, #220]	; (8005a0c <xTaskResumeAll+0x114>)
 8005930:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005932:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <xTaskResumeAll+0x114>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d161      	bne.n	80059fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800593a:	4b35      	ldr	r3, [pc, #212]	; (8005a10 <xTaskResumeAll+0x118>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d05d      	beq.n	80059fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005942:	e02e      	b.n	80059a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005944:	4b33      	ldr	r3, [pc, #204]	; (8005a14 <xTaskResumeAll+0x11c>)
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3318      	adds	r3, #24
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe fee0 	bl	8004716 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3304      	adds	r3, #4
 800595a:	4618      	mov	r0, r3
 800595c:	f7fe fedb 	bl	8004716 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	2201      	movs	r2, #1
 8005966:	409a      	lsls	r2, r3
 8005968:	4b2b      	ldr	r3, [pc, #172]	; (8005a18 <xTaskResumeAll+0x120>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4313      	orrs	r3, r2
 800596e:	4a2a      	ldr	r2, [pc, #168]	; (8005a18 <xTaskResumeAll+0x120>)
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <xTaskResumeAll+0x124>)
 8005980:	441a      	add	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3304      	adds	r3, #4
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f7fe fe67 	bl	800465c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005992:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <xTaskResumeAll+0x128>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800599c:	4b21      	ldr	r3, [pc, #132]	; (8005a24 <xTaskResumeAll+0x12c>)
 800599e:	2201      	movs	r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <xTaskResumeAll+0x11c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1cc      	bne.n	8005944 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059b0:	f000 fb1c 	bl	8005fec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059b4:	4b1c      	ldr	r3, [pc, #112]	; (8005a28 <xTaskResumeAll+0x130>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059c0:	f000 f836 	bl	8005a30 <xTaskIncrementTick>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80059ca:	4b16      	ldr	r3, [pc, #88]	; (8005a24 <xTaskResumeAll+0x12c>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1f1      	bne.n	80059c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80059dc:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <xTaskResumeAll+0x130>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059e2:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <xTaskResumeAll+0x12c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059ea:	2301      	movs	r3, #1
 80059ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059ee:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <xTaskResumeAll+0x134>)
 80059f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059fe:	f000 fe91 	bl	8006724 <vPortExitCritical>

	return xAlreadyYielded;
 8005a02:	68bb      	ldr	r3, [r7, #8]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000764 	.word	0x20000764
 8005a10:	2000073c 	.word	0x2000073c
 8005a14:	200006fc 	.word	0x200006fc
 8005a18:	20000744 	.word	0x20000744
 8005a1c:	20000640 	.word	0x20000640
 8005a20:	2000063c 	.word	0x2000063c
 8005a24:	20000750 	.word	0x20000750
 8005a28:	2000074c 	.word	0x2000074c
 8005a2c:	e000ed04 	.word	0xe000ed04

08005a30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a3a:	4b4e      	ldr	r3, [pc, #312]	; (8005b74 <xTaskIncrementTick+0x144>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f040 808e 	bne.w	8005b60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a44:	4b4c      	ldr	r3, [pc, #304]	; (8005b78 <xTaskIncrementTick+0x148>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a4c:	4a4a      	ldr	r2, [pc, #296]	; (8005b78 <xTaskIncrementTick+0x148>)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d120      	bne.n	8005a9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a58:	4b48      	ldr	r3, [pc, #288]	; (8005b7c <xTaskIncrementTick+0x14c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <xTaskIncrementTick+0x48>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	603b      	str	r3, [r7, #0]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <xTaskIncrementTick+0x46>
 8005a78:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <xTaskIncrementTick+0x14c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	4b40      	ldr	r3, [pc, #256]	; (8005b80 <xTaskIncrementTick+0x150>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a3e      	ldr	r2, [pc, #248]	; (8005b7c <xTaskIncrementTick+0x14c>)
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4a3e      	ldr	r2, [pc, #248]	; (8005b80 <xTaskIncrementTick+0x150>)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	4b3d      	ldr	r3, [pc, #244]	; (8005b84 <xTaskIncrementTick+0x154>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3301      	adds	r3, #1
 8005a92:	4a3c      	ldr	r2, [pc, #240]	; (8005b84 <xTaskIncrementTick+0x154>)
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	f000 faa9 	bl	8005fec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a9a:	4b3b      	ldr	r3, [pc, #236]	; (8005b88 <xTaskIncrementTick+0x158>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d348      	bcc.n	8005b36 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa4:	4b35      	ldr	r3, [pc, #212]	; (8005b7c <xTaskIncrementTick+0x14c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <xTaskIncrementTick+0x158>)
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab4:	601a      	str	r2, [r3, #0]
					break;
 8005ab6:	e03e      	b.n	8005b36 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab8:	4b30      	ldr	r3, [pc, #192]	; (8005b7c <xTaskIncrementTick+0x14c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d203      	bcs.n	8005ad8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ad0:	4a2d      	ldr	r2, [pc, #180]	; (8005b88 <xTaskIncrementTick+0x158>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ad6:	e02e      	b.n	8005b36 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7fe fe1a 	bl	8004716 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	3318      	adds	r3, #24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe fe11 	bl	8004716 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	2201      	movs	r2, #1
 8005afa:	409a      	lsls	r2, r3
 8005afc:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <xTaskIncrementTick+0x15c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	4a22      	ldr	r2, [pc, #136]	; (8005b8c <xTaskIncrementTick+0x15c>)
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <xTaskIncrementTick+0x160>)
 8005b14:	441a      	add	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f7fe fd9d 	bl	800465c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <xTaskIncrementTick+0x164>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d3b9      	bcc.n	8005aa4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b34:	e7b6      	b.n	8005aa4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b36:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <xTaskIncrementTick+0x164>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	4914      	ldr	r1, [pc, #80]	; (8005b90 <xTaskIncrementTick+0x160>)
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d901      	bls.n	8005b52 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b52:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <xTaskIncrementTick+0x168>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e004      	b.n	8005b6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b60:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <xTaskIncrementTick+0x16c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	4a0d      	ldr	r2, [pc, #52]	; (8005b9c <xTaskIncrementTick+0x16c>)
 8005b68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b6a:	697b      	ldr	r3, [r7, #20]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000764 	.word	0x20000764
 8005b78:	20000740 	.word	0x20000740
 8005b7c:	200006f4 	.word	0x200006f4
 8005b80:	200006f8 	.word	0x200006f8
 8005b84:	20000754 	.word	0x20000754
 8005b88:	2000075c 	.word	0x2000075c
 8005b8c:	20000744 	.word	0x20000744
 8005b90:	20000640 	.word	0x20000640
 8005b94:	2000063c 	.word	0x2000063c
 8005b98:	20000750 	.word	0x20000750
 8005b9c:	2000074c 	.word	0x2000074c

08005ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ba6:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <vTaskSwitchContext+0xac>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bae:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <vTaskSwitchContext+0xb0>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bb4:	e044      	b.n	8005c40 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005bb6:	4b26      	ldr	r3, [pc, #152]	; (8005c50 <vTaskSwitchContext+0xb0>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bbc:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <vTaskSwitchContext+0xb4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	fab3 f383 	clz	r3, r3
 8005bc8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005bca:	7afb      	ldrb	r3, [r7, #11]
 8005bcc:	f1c3 031f 	rsb	r3, r3, #31
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	4921      	ldr	r1, [pc, #132]	; (8005c58 <vTaskSwitchContext+0xb8>)
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <vTaskSwitchContext+0x5c>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	607b      	str	r3, [r7, #4]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <vTaskSwitchContext+0x5a>
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <vTaskSwitchContext+0xb8>)
 8005c08:	4413      	add	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d104      	bne.n	8005c2c <vTaskSwitchContext+0x8c>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	605a      	str	r2, [r3, #4]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	4a0a      	ldr	r2, [pc, #40]	; (8005c5c <vTaskSwitchContext+0xbc>)
 8005c34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <vTaskSwitchContext+0xbc>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	334c      	adds	r3, #76	; 0x4c
 8005c3c:	4a08      	ldr	r2, [pc, #32]	; (8005c60 <vTaskSwitchContext+0xc0>)
 8005c3e:	6013      	str	r3, [r2, #0]
}
 8005c40:	bf00      	nop
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000764 	.word	0x20000764
 8005c50:	20000750 	.word	0x20000750
 8005c54:	20000744 	.word	0x20000744
 8005c58:	20000640 	.word	0x20000640
 8005c5c:	2000063c 	.word	0x2000063c
 8005c60:	20000010 	.word	0x20000010

08005c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	60fb      	str	r3, [r7, #12]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <vTaskPlaceOnEventList+0x44>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3318      	adds	r3, #24
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fe fd06 	bl	80046a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c98:	2101      	movs	r1, #1
 8005c9a:	6838      	ldr	r0, [r7, #0]
 8005c9c:	f000 fb82 	bl	80063a4 <prvAddCurrentTaskToDelayedList>
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	2000063c 	.word	0x2000063c

08005cac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	e7fe      	b.n	8005cd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	3318      	adds	r3, #24
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe fd1a 	bl	8004716 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	; (8005d58 <xTaskRemoveFromEventList+0xac>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d11c      	bne.n	8005d24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fd11 	bl	8004716 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <xTaskRemoveFromEventList+0xb0>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <xTaskRemoveFromEventList+0xb0>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a13      	ldr	r2, [pc, #76]	; (8005d60 <xTaskRemoveFromEventList+0xb4>)
 8005d14:	441a      	add	r2, r3
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7fe fc9d 	bl	800465c <vListInsertEnd>
 8005d22:	e005      	b.n	8005d30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3318      	adds	r3, #24
 8005d28:	4619      	mov	r1, r3
 8005d2a:	480e      	ldr	r0, [pc, #56]	; (8005d64 <xTaskRemoveFromEventList+0xb8>)
 8005d2c:	f7fe fc96 	bl	800465c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d34:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <xTaskRemoveFromEventList+0xbc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d905      	bls.n	8005d4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d42:	4b0a      	ldr	r3, [pc, #40]	; (8005d6c <xTaskRemoveFromEventList+0xc0>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e001      	b.n	8005d4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	20000764 	.word	0x20000764
 8005d5c:	20000744 	.word	0x20000744
 8005d60:	20000640 	.word	0x20000640
 8005d64:	200006fc 	.word	0x200006fc
 8005d68:	2000063c 	.word	0x2000063c
 8005d6c:	20000750 	.word	0x20000750

08005d70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <vTaskInternalSetTimeOutState+0x24>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <vTaskInternalSetTimeOutState+0x28>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	605a      	str	r2, [r3, #4]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	20000754 	.word	0x20000754
 8005d98:	20000740 	.word	0x20000740

08005d9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	613b      	str	r3, [r7, #16]
}
 8005dbe:	bf00      	nop
 8005dc0:	e7fe      	b.n	8005dc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10a      	bne.n	8005dde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	60fb      	str	r3, [r7, #12]
}
 8005dda:	bf00      	nop
 8005ddc:	e7fe      	b.n	8005ddc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005dde:	f000 fc71 	bl	80066c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005de2:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <xTaskCheckForTimeOut+0xbc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d102      	bne.n	8005e02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e023      	b.n	8005e4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <xTaskCheckForTimeOut+0xc0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d007      	beq.n	8005e1e <xTaskCheckForTimeOut+0x82>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	e015      	b.n	8005e4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d20b      	bcs.n	8005e40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ff9b 	bl	8005d70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	e004      	b.n	8005e4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e46:	2301      	movs	r3, #1
 8005e48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e4a:	f000 fc6b 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000740 	.word	0x20000740
 8005e5c:	20000754 	.word	0x20000754

08005e60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <vTaskMissedYield+0x14>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
}
 8005e6a:	bf00      	nop
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	20000750 	.word	0x20000750

08005e78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e80:	f000 f852 	bl	8005f28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <prvIdleTask+0x28>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d9f9      	bls.n	8005e80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <prvIdleTask+0x2c>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e9c:	e7f0      	b.n	8005e80 <prvIdleTask+0x8>
 8005e9e:	bf00      	nop
 8005ea0:	20000640 	.word	0x20000640
 8005ea4:	e000ed04 	.word	0xe000ed04

08005ea8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	e00c      	b.n	8005ece <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4a12      	ldr	r2, [pc, #72]	; (8005f08 <prvInitialiseTaskLists+0x60>)
 8005ec0:	4413      	add	r3, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fb9d 	bl	8004602 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	607b      	str	r3, [r7, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b06      	cmp	r3, #6
 8005ed2:	d9ef      	bls.n	8005eb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ed4:	480d      	ldr	r0, [pc, #52]	; (8005f0c <prvInitialiseTaskLists+0x64>)
 8005ed6:	f7fe fb94 	bl	8004602 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eda:	480d      	ldr	r0, [pc, #52]	; (8005f10 <prvInitialiseTaskLists+0x68>)
 8005edc:	f7fe fb91 	bl	8004602 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ee0:	480c      	ldr	r0, [pc, #48]	; (8005f14 <prvInitialiseTaskLists+0x6c>)
 8005ee2:	f7fe fb8e 	bl	8004602 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ee6:	480c      	ldr	r0, [pc, #48]	; (8005f18 <prvInitialiseTaskLists+0x70>)
 8005ee8:	f7fe fb8b 	bl	8004602 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005eec:	480b      	ldr	r0, [pc, #44]	; (8005f1c <prvInitialiseTaskLists+0x74>)
 8005eee:	f7fe fb88 	bl	8004602 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <prvInitialiseTaskLists+0x78>)
 8005ef4:	4a05      	ldr	r2, [pc, #20]	; (8005f0c <prvInitialiseTaskLists+0x64>)
 8005ef6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <prvInitialiseTaskLists+0x7c>)
 8005efa:	4a05      	ldr	r2, [pc, #20]	; (8005f10 <prvInitialiseTaskLists+0x68>)
 8005efc:	601a      	str	r2, [r3, #0]
}
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000640 	.word	0x20000640
 8005f0c:	200006cc 	.word	0x200006cc
 8005f10:	200006e0 	.word	0x200006e0
 8005f14:	200006fc 	.word	0x200006fc
 8005f18:	20000710 	.word	0x20000710
 8005f1c:	20000728 	.word	0x20000728
 8005f20:	200006f4 	.word	0x200006f4
 8005f24:	200006f8 	.word	0x200006f8

08005f28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f2e:	e019      	b.n	8005f64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f30:	f000 fbc8 	bl	80066c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f34:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <prvCheckTasksWaitingTermination+0x50>)
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fbe8 	bl	8004716 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f46:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <prvCheckTasksWaitingTermination+0x54>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	4a0b      	ldr	r2, [pc, #44]	; (8005f7c <prvCheckTasksWaitingTermination+0x54>)
 8005f4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <prvCheckTasksWaitingTermination+0x58>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	4a0a      	ldr	r2, [pc, #40]	; (8005f80 <prvCheckTasksWaitingTermination+0x58>)
 8005f58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f5a:	f000 fbe3 	bl	8006724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f810 	bl	8005f84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <prvCheckTasksWaitingTermination+0x58>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e1      	bne.n	8005f30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f6c:	bf00      	nop
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000710 	.word	0x20000710
 8005f7c:	2000073c 	.word	0x2000073c
 8005f80:	20000724 	.word	0x20000724

08005f84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	334c      	adds	r3, #76	; 0x4c
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 f8e3 	bl	800715c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d108      	bne.n	8005fb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fd7b 	bl	8006aa0 <vPortFree>
				vPortFree( pxTCB );
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fd78 	bl	8006aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fb0:	e018      	b.n	8005fe4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d103      	bne.n	8005fc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fd6f 	bl	8006aa0 <vPortFree>
	}
 8005fc2:	e00f      	b.n	8005fe4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d00a      	beq.n	8005fe4 <prvDeleteTCB+0x60>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	60fb      	str	r3, [r7, #12]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <prvDeleteTCB+0x5e>
	}
 8005fe4:	bf00      	nop
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <prvResetNextTaskUnblockTime+0x38>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d104      	bne.n	8006006 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <prvResetNextTaskUnblockTime+0x3c>)
 8005ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8006002:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006004:	e008      	b.n	8006018 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006006:	4b07      	ldr	r3, [pc, #28]	; (8006024 <prvResetNextTaskUnblockTime+0x38>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4a04      	ldr	r2, [pc, #16]	; (8006028 <prvResetNextTaskUnblockTime+0x3c>)
 8006016:	6013      	str	r3, [r2, #0]
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	200006f4 	.word	0x200006f4
 8006028:	2000075c 	.word	0x2000075c

0800602c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006032:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <xTaskGetSchedulerState+0x34>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d102      	bne.n	8006040 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800603a:	2301      	movs	r3, #1
 800603c:	607b      	str	r3, [r7, #4]
 800603e:	e008      	b.n	8006052 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006040:	4b08      	ldr	r3, [pc, #32]	; (8006064 <xTaskGetSchedulerState+0x38>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006048:	2302      	movs	r3, #2
 800604a:	607b      	str	r3, [r7, #4]
 800604c:	e001      	b.n	8006052 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800604e:	2300      	movs	r3, #0
 8006050:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006052:	687b      	ldr	r3, [r7, #4]
	}
 8006054:	4618      	mov	r0, r3
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	20000748 	.word	0x20000748
 8006064:	20000764 	.word	0x20000764

08006068 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d05e      	beq.n	800613c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006082:	4b31      	ldr	r3, [pc, #196]	; (8006148 <xTaskPriorityInherit+0xe0>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	429a      	cmp	r2, r3
 800608a:	d24e      	bcs.n	800612a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	db06      	blt.n	80060a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006094:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <xTaskPriorityInherit+0xe0>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	f1c3 0207 	rsb	r2, r3, #7
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	6959      	ldr	r1, [r3, #20]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4a26      	ldr	r2, [pc, #152]	; (800614c <xTaskPriorityInherit+0xe4>)
 80060b4:	4413      	add	r3, r2
 80060b6:	4299      	cmp	r1, r3
 80060b8:	d12f      	bne.n	800611a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3304      	adds	r3, #4
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fb29 	bl	8004716 <uxListRemove>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ce:	2201      	movs	r2, #1
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	43da      	mvns	r2, r3
 80060d6:	4b1e      	ldr	r3, [pc, #120]	; (8006150 <xTaskPriorityInherit+0xe8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4013      	ands	r3, r2
 80060dc:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <xTaskPriorityInherit+0xe8>)
 80060de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <xTaskPriorityInherit+0xe0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	2201      	movs	r2, #1
 80060f0:	409a      	lsls	r2, r3
 80060f2:	4b17      	ldr	r3, [pc, #92]	; (8006150 <xTaskPriorityInherit+0xe8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	4a15      	ldr	r2, [pc, #84]	; (8006150 <xTaskPriorityInherit+0xe8>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a10      	ldr	r2, [pc, #64]	; (800614c <xTaskPriorityInherit+0xe4>)
 800610a:	441a      	add	r2, r3
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe faa2 	bl	800465c <vListInsertEnd>
 8006118:	e004      	b.n	8006124 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <xTaskPriorityInherit+0xe0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e008      	b.n	800613c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <xTaskPriorityInherit+0xe0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	429a      	cmp	r2, r3
 8006136:	d201      	bcs.n	800613c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800613c:	68fb      	ldr	r3, [r7, #12]
	}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2000063c 	.word	0x2000063c
 800614c:	20000640 	.word	0x20000640
 8006150:	20000744 	.word	0x20000744

08006154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d06e      	beq.n	8006248 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800616a:	4b3a      	ldr	r3, [pc, #232]	; (8006254 <xTaskPriorityDisinherit+0x100>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	429a      	cmp	r2, r3
 8006172:	d00a      	beq.n	800618a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60bb      	str	r3, [r7, #8]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ac:	1e5a      	subs	r2, r3, #1
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d044      	beq.n	8006248 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d140      	bne.n	8006248 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe faa3 	bl	8004716 <uxListRemove>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d115      	bne.n	8006202 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061da:	491f      	ldr	r1, [pc, #124]	; (8006258 <xTaskPriorityDisinherit+0x104>)
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xTaskPriorityDisinherit+0xae>
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	2201      	movs	r2, #1
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43da      	mvns	r2, r3
 80061f8:	4b18      	ldr	r3, [pc, #96]	; (800625c <xTaskPriorityDisinherit+0x108>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4013      	ands	r3, r2
 80061fe:	4a17      	ldr	r2, [pc, #92]	; (800625c <xTaskPriorityDisinherit+0x108>)
 8006200:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	f1c3 0207 	rsb	r2, r3, #7
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	2201      	movs	r2, #1
 800621c:	409a      	lsls	r2, r3
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <xTaskPriorityDisinherit+0x108>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4313      	orrs	r3, r2
 8006224:	4a0d      	ldr	r2, [pc, #52]	; (800625c <xTaskPriorityDisinherit+0x108>)
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4a08      	ldr	r2, [pc, #32]	; (8006258 <xTaskPriorityDisinherit+0x104>)
 8006236:	441a      	add	r2, r3
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	3304      	adds	r3, #4
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f7fe fa0c 	bl	800465c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006244:	2301      	movs	r3, #1
 8006246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006248:	697b      	ldr	r3, [r7, #20]
	}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	2000063c 	.word	0x2000063c
 8006258:	20000640 	.word	0x20000640
 800625c:	20000744 	.word	0x20000744

08006260 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800626e:	2301      	movs	r3, #1
 8006270:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d077      	beq.n	8006368 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d902      	bls.n	80062a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	e002      	b.n	80062ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d058      	beq.n	8006368 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d153      	bne.n	8006368 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80062c0:	4b2b      	ldr	r3, [pc, #172]	; (8006370 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d10a      	bne.n	80062e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	60bb      	str	r3, [r7, #8]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	db04      	blt.n	80062fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f1c3 0207 	rsb	r2, r3, #7
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	6959      	ldr	r1, [r3, #20]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4a19      	ldr	r2, [pc, #100]	; (8006374 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800630e:	4413      	add	r3, r2
 8006310:	4299      	cmp	r1, r3
 8006312:	d129      	bne.n	8006368 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	3304      	adds	r3, #4
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe f9fc 	bl	8004716 <uxListRemove>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	2201      	movs	r2, #1
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	43da      	mvns	r2, r3
 8006330:	4b11      	ldr	r3, [pc, #68]	; (8006378 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4013      	ands	r3, r2
 8006336:	4a10      	ldr	r2, [pc, #64]	; (8006378 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006338:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	2201      	movs	r2, #1
 8006340:	409a      	lsls	r2, r3
 8006342:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4a06      	ldr	r2, [pc, #24]	; (8006374 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800635a:	441a      	add	r2, r3
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	3304      	adds	r3, #4
 8006360:	4619      	mov	r1, r3
 8006362:	4610      	mov	r0, r2
 8006364:	f7fe f97a 	bl	800465c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006368:	bf00      	nop
 800636a:	3720      	adds	r7, #32
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	2000063c 	.word	0x2000063c
 8006374:	20000640 	.word	0x20000640
 8006378:	20000744 	.word	0x20000744

0800637c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006380:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800638e:	3201      	adds	r2, #1
 8006390:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006392:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006394:	681b      	ldr	r3, [r3, #0]
	}
 8006396:	4618      	mov	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	2000063c 	.word	0x2000063c

080063a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063ae:	4b29      	ldr	r3, [pc, #164]	; (8006454 <prvAddCurrentTaskToDelayedList+0xb0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063b4:	4b28      	ldr	r3, [pc, #160]	; (8006458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe f9ab 	bl	8004716 <uxListRemove>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80063c6:	4b24      	ldr	r3, [pc, #144]	; (8006458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	2201      	movs	r2, #1
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43da      	mvns	r2, r3
 80063d4:	4b21      	ldr	r3, [pc, #132]	; (800645c <prvAddCurrentTaskToDelayedList+0xb8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4013      	ands	r3, r2
 80063da:	4a20      	ldr	r2, [pc, #128]	; (800645c <prvAddCurrentTaskToDelayedList+0xb8>)
 80063dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d10a      	bne.n	80063fc <prvAddCurrentTaskToDelayedList+0x58>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ec:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	481a      	ldr	r0, [pc, #104]	; (8006460 <prvAddCurrentTaskToDelayedList+0xbc>)
 80063f6:	f7fe f931 	bl	800465c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80063fa:	e026      	b.n	800644a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006404:	4b14      	ldr	r3, [pc, #80]	; (8006458 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	429a      	cmp	r2, r3
 8006412:	d209      	bcs.n	8006428 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006414:	4b13      	ldr	r3, [pc, #76]	; (8006464 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <prvAddCurrentTaskToDelayedList+0xb4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3304      	adds	r3, #4
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f7fe f93f 	bl	80046a4 <vListInsert>
}
 8006426:	e010      	b.n	800644a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <prvAddCurrentTaskToDelayedList+0xc4>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <prvAddCurrentTaskToDelayedList+0xb4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f7fe f935 	bl	80046a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <prvAddCurrentTaskToDelayedList+0xc8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	429a      	cmp	r2, r3
 8006442:	d202      	bcs.n	800644a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006444:	4a09      	ldr	r2, [pc, #36]	; (800646c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6013      	str	r3, [r2, #0]
}
 800644a:	bf00      	nop
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000740 	.word	0x20000740
 8006458:	2000063c 	.word	0x2000063c
 800645c:	20000744 	.word	0x20000744
 8006460:	20000728 	.word	0x20000728
 8006464:	200006f8 	.word	0x200006f8
 8006468:	200006f4 	.word	0x200006f4
 800646c:	2000075c 	.word	0x2000075c

08006470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3b04      	subs	r3, #4
 8006480:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b04      	subs	r3, #4
 800648e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	f023 0201 	bic.w	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b04      	subs	r3, #4
 800649e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064a0:	4a0c      	ldr	r2, [pc, #48]	; (80064d4 <pxPortInitialiseStack+0x64>)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3b14      	subs	r3, #20
 80064aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3b04      	subs	r3, #4
 80064b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f06f 0202 	mvn.w	r2, #2
 80064be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3b20      	subs	r3, #32
 80064c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	080064d9 	.word	0x080064d9

080064d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <prvTaskExitError+0x54>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ea:	d00a      	beq.n	8006502 <prvTaskExitError+0x2a>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	60fb      	str	r3, [r7, #12]
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <prvTaskExitError+0x28>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	60bb      	str	r3, [r7, #8]
}
 8006514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006516:	bf00      	nop
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0fc      	beq.n	8006518 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	2000000c 	.word	0x2000000c

08006530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	2000063c 	.word	0x2000063c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006558:	4808      	ldr	r0, [pc, #32]	; (800657c <prvPortStartFirstTask+0x24>)
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f380 8808 	msr	MSP, r0
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8814 	msr	CONTROL, r0
 800656a:	b662      	cpsie	i
 800656c:	b661      	cpsie	f
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	df00      	svc	0
 8006578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800657a:	bf00      	nop
 800657c:	e000ed08 	.word	0xe000ed08

08006580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006586:	4b46      	ldr	r3, [pc, #280]	; (80066a0 <xPortStartScheduler+0x120>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a46      	ldr	r2, [pc, #280]	; (80066a4 <xPortStartScheduler+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10a      	bne.n	80065a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	613b      	str	r3, [r7, #16]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065a6:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <xPortStartScheduler+0x120>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3f      	ldr	r2, [pc, #252]	; (80066a8 <xPortStartScheduler+0x128>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10a      	bne.n	80065c6 <xPortStartScheduler+0x46>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60fb      	str	r3, [r7, #12]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065c6:	4b39      	ldr	r3, [pc, #228]	; (80066ac <xPortStartScheduler+0x12c>)
 80065c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <xPortStartScheduler+0x130>)
 80065ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065ee:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <xPortStartScheduler+0x134>)
 80065f0:	2207      	movs	r2, #7
 80065f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f4:	e009      	b.n	800660a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065f6:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <xPortStartScheduler+0x134>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	4a2d      	ldr	r2, [pc, #180]	; (80066b4 <xPortStartScheduler+0x134>)
 80065fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006612:	2b80      	cmp	r3, #128	; 0x80
 8006614:	d0ef      	beq.n	80065f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006616:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <xPortStartScheduler+0x134>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1c3 0307 	rsb	r3, r3, #7
 800661e:	2b04      	cmp	r3, #4
 8006620:	d00a      	beq.n	8006638 <xPortStartScheduler+0xb8>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60bb      	str	r3, [r7, #8]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006638:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <xPortStartScheduler+0x134>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <xPortStartScheduler+0x134>)
 8006640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <xPortStartScheduler+0x134>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800664a:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <xPortStartScheduler+0x134>)
 800664c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <xPortStartScheduler+0x138>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <xPortStartScheduler+0x138>)
 800665c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <xPortStartScheduler+0x138>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <xPortStartScheduler+0x138>)
 8006668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800666c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800666e:	f000 f8dd 	bl	800682c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <xPortStartScheduler+0x13c>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006678:	f000 f8fc 	bl	8006874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800667c:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <xPortStartScheduler+0x140>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <xPortStartScheduler+0x140>)
 8006682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006688:	f7ff ff66 	bl	8006558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800668c:	f7ff fa88 	bl	8005ba0 <vTaskSwitchContext>
	prvTaskExitError();
 8006690:	f7ff ff22 	bl	80064d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	e000ed00 	.word	0xe000ed00
 80066a4:	410fc271 	.word	0x410fc271
 80066a8:	410fc270 	.word	0x410fc270
 80066ac:	e000e400 	.word	0xe000e400
 80066b0:	20000768 	.word	0x20000768
 80066b4:	2000076c 	.word	0x2000076c
 80066b8:	e000ed20 	.word	0xe000ed20
 80066bc:	2000000c 	.word	0x2000000c
 80066c0:	e000ef34 	.word	0xe000ef34

080066c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	607b      	str	r3, [r7, #4]
}
 80066dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <vPortEnterCritical+0x58>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a0d      	ldr	r2, [pc, #52]	; (800671c <vPortEnterCritical+0x58>)
 80066e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <vPortEnterCritical+0x58>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10f      	bne.n	8006710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortEnterCritical+0x5c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <vPortEnterCritical+0x4c>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	603b      	str	r3, [r7, #0]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <vPortEnterCritical+0x4a>
	}
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	2000000c 	.word	0x2000000c
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <vPortExitCritical+0x50>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <vPortExitCritical+0x24>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	607b      	str	r3, [r7, #4]
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <vPortExitCritical+0x50>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	4a09      	ldr	r2, [pc, #36]	; (8006774 <vPortExitCritical+0x50>)
 8006750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <vPortExitCritical+0x50>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <vPortExitCritical+0x42>
 800675a:	2300      	movs	r3, #0
 800675c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f383 8811 	msr	BASEPRI, r3
}
 8006764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2000000c 	.word	0x2000000c
	...

08006780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006780:	f3ef 8009 	mrs	r0, PSP
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <pxCurrentTCBConst>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	f01e 0f10 	tst.w	lr, #16
 8006790:	bf08      	it	eq
 8006792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	6010      	str	r0, [r2, #0]
 800679c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067a4:	f380 8811 	msr	BASEPRI, r0
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f7ff f9f6 	bl	8005ba0 <vTaskSwitchContext>
 80067b4:	f04f 0000 	mov.w	r0, #0
 80067b8:	f380 8811 	msr	BASEPRI, r0
 80067bc:	bc09      	pop	{r0, r3}
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	6808      	ldr	r0, [r1, #0]
 80067c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c6:	f01e 0f10 	tst.w	lr, #16
 80067ca:	bf08      	it	eq
 80067cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067d0:	f380 8809 	msr	PSP, r0
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst>:
 80067e0:	2000063c 	.word	0x2000063c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	607b      	str	r3, [r7, #4]
}
 8006800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006802:	f7ff f915 	bl	8005a30 <xTaskIncrementTick>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <SysTick_Handler+0x40>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f383 8811 	msr	BASEPRI, r3
}
 800681e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <vPortSetupTimerInterrupt+0x38>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800683c:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <vPortSetupTimerInterrupt+0x3c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <vPortSetupTimerInterrupt+0x40>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	099b      	lsrs	r3, r3, #6
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <vPortSetupTimerInterrupt+0x44>)
 800684a:	3b01      	subs	r3, #1
 800684c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800684e:	4b04      	ldr	r3, [pc, #16]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	e000e010 	.word	0xe000e010
 8006864:	e000e018 	.word	0xe000e018
 8006868:	20000000 	.word	0x20000000
 800686c:	10624dd3 	.word	0x10624dd3
 8006870:	e000e014 	.word	0xe000e014

08006874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006884 <vPortEnableVFP+0x10>
 8006878:	6801      	ldr	r1, [r0, #0]
 800687a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800687e:	6001      	str	r1, [r0, #0]
 8006880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006882:	bf00      	nop
 8006884:	e000ed88 	.word	0xe000ed88

08006888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800688e:	f3ef 8305 	mrs	r3, IPSR
 8006892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d914      	bls.n	80068c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <vPortValidateInterruptPriority+0x70>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068a4:	4b15      	ldr	r3, [pc, #84]	; (80068fc <vPortValidateInterruptPriority+0x74>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	7afa      	ldrb	r2, [r7, #11]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d20a      	bcs.n	80068c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068c4:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <vPortValidateInterruptPriority+0x78>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068cc:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <vPortValidateInterruptPriority+0x7c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d90a      	bls.n	80068ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	603b      	str	r3, [r7, #0]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <vPortValidateInterruptPriority+0x60>
	}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	e000e3f0 	.word	0xe000e3f0
 80068fc:	20000768 	.word	0x20000768
 8006900:	e000ed0c 	.word	0xe000ed0c
 8006904:	2000076c 	.word	0x2000076c

08006908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006914:	f7fe ffe2 	bl	80058dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006918:	4b5b      	ldr	r3, [pc, #364]	; (8006a88 <pvPortMalloc+0x180>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006920:	f000 f920 	bl	8006b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006924:	4b59      	ldr	r3, [pc, #356]	; (8006a8c <pvPortMalloc+0x184>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 8093 	bne.w	8006a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01d      	beq.n	8006974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006938:	2208      	movs	r2, #8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d014      	beq.n	8006974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f023 0307 	bic.w	r3, r3, #7
 8006950:	3308      	adds	r3, #8
 8006952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <pvPortMalloc+0x6c>
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	617b      	str	r3, [r7, #20]
}
 8006970:	bf00      	nop
 8006972:	e7fe      	b.n	8006972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d06e      	beq.n	8006a58 <pvPortMalloc+0x150>
 800697a:	4b45      	ldr	r3, [pc, #276]	; (8006a90 <pvPortMalloc+0x188>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	429a      	cmp	r2, r3
 8006982:	d869      	bhi.n	8006a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006984:	4b43      	ldr	r3, [pc, #268]	; (8006a94 <pvPortMalloc+0x18c>)
 8006986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006988:	4b42      	ldr	r3, [pc, #264]	; (8006a94 <pvPortMalloc+0x18c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800698e:	e004      	b.n	800699a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d903      	bls.n	80069ac <pvPortMalloc+0xa4>
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1f1      	bne.n	8006990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069ac:	4b36      	ldr	r3, [pc, #216]	; (8006a88 <pvPortMalloc+0x180>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d050      	beq.n	8006a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2208      	movs	r2, #8
 80069bc:	4413      	add	r3, r2
 80069be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1ad2      	subs	r2, r2, r3
 80069d0:	2308      	movs	r3, #8
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d91f      	bls.n	8006a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4413      	add	r3, r2
 80069de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00a      	beq.n	8006a00 <pvPortMalloc+0xf8>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	613b      	str	r3, [r7, #16]
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	1ad2      	subs	r2, r2, r3
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a12:	69b8      	ldr	r0, [r7, #24]
 8006a14:	f000 f908 	bl	8006c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a18:	4b1d      	ldr	r3, [pc, #116]	; (8006a90 <pvPortMalloc+0x188>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <pvPortMalloc+0x188>)
 8006a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a26:	4b1a      	ldr	r3, [pc, #104]	; (8006a90 <pvPortMalloc+0x188>)
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <pvPortMalloc+0x190>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d203      	bcs.n	8006a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a32:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <pvPortMalloc+0x188>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <pvPortMalloc+0x190>)
 8006a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <pvPortMalloc+0x184>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <pvPortMalloc+0x194>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3301      	adds	r3, #1
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <pvPortMalloc+0x194>)
 8006a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a58:	f7fe ff4e 	bl	80058f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <pvPortMalloc+0x174>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	60fb      	str	r3, [r7, #12]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <pvPortMalloc+0x172>
	return pvReturn;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3728      	adds	r7, #40	; 0x28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20002e88 	.word	0x20002e88
 8006a8c:	20002e9c 	.word	0x20002e9c
 8006a90:	20002e8c 	.word	0x20002e8c
 8006a94:	20002e80 	.word	0x20002e80
 8006a98:	20002e90 	.word	0x20002e90
 8006a9c:	20002e94 	.word	0x20002e94

08006aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d04d      	beq.n	8006b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	425b      	negs	r3, r3
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <vPortFree+0xb8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <vPortFree+0x44>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60fb      	str	r3, [r7, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <vPortFree+0x62>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60bb      	str	r3, [r7, #8]
}
 8006afe:	bf00      	nop
 8006b00:	e7fe      	b.n	8006b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	4b14      	ldr	r3, [pc, #80]	; (8006b58 <vPortFree+0xb8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01e      	beq.n	8006b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d11a      	bne.n	8006b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <vPortFree+0xb8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b28:	f7fe fed8 	bl	80058dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <vPortFree+0xbc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4413      	add	r3, r2
 8006b36:	4a09      	ldr	r2, [pc, #36]	; (8006b5c <vPortFree+0xbc>)
 8006b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b3a:	6938      	ldr	r0, [r7, #16]
 8006b3c:	f000 f874 	bl	8006c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <vPortFree+0xc0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a06      	ldr	r2, [pc, #24]	; (8006b60 <vPortFree+0xc0>)
 8006b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b4a:	f7fe fed5 	bl	80058f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b4e:	bf00      	nop
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20002e9c 	.word	0x20002e9c
 8006b5c:	20002e8c 	.word	0x20002e8c
 8006b60:	20002e98 	.word	0x20002e98

08006b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8006b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b70:	4b27      	ldr	r3, [pc, #156]	; (8006c10 <prvHeapInit+0xac>)
 8006b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00c      	beq.n	8006b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3307      	adds	r3, #7
 8006b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	4a1f      	ldr	r2, [pc, #124]	; (8006c10 <prvHeapInit+0xac>)
 8006b94:	4413      	add	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b9c:	4a1d      	ldr	r2, [pc, #116]	; (8006c14 <prvHeapInit+0xb0>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ba2:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <prvHeapInit+0xb0>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4413      	add	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0307 	bic.w	r3, r3, #7
 8006bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <prvHeapInit+0xb4>)
 8006bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <prvHeapInit+0xb4>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bce:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <prvHeapInit+0xb4>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <prvHeapInit+0xb4>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <prvHeapInit+0xb8>)
 8006bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <prvHeapInit+0xbc>)
 8006bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <prvHeapInit+0xc0>)
 8006bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	20000770 	.word	0x20000770
 8006c14:	20002e80 	.word	0x20002e80
 8006c18:	20002e88 	.word	0x20002e88
 8006c1c:	20002e90 	.word	0x20002e90
 8006c20:	20002e8c 	.word	0x20002e8c
 8006c24:	20002e9c 	.word	0x20002e9c

08006c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c30:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <prvInsertBlockIntoFreeList+0xac>)
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e002      	b.n	8006c3c <prvInsertBlockIntoFreeList+0x14>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d8f7      	bhi.n	8006c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	4413      	add	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d108      	bne.n	8006c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	441a      	add	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	441a      	add	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d118      	bne.n	8006cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d00d      	beq.n	8006ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	441a      	add	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e008      	b.n	8006cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e003      	b.n	8006cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d002      	beq.n	8006cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20002e80 	.word	0x20002e80
 8006cd8:	20002e88 	.word	0x20002e88

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	; (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000010 	.word	0x20000010

08006ce8 <std>:
 8006ce8:	2300      	movs	r3, #0
 8006cea:	b510      	push	{r4, lr}
 8006cec:	4604      	mov	r4, r0
 8006cee:	e9c0 3300 	strd	r3, r3, [r0]
 8006cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cf6:	6083      	str	r3, [r0, #8]
 8006cf8:	8181      	strh	r1, [r0, #12]
 8006cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8006cfc:	81c2      	strh	r2, [r0, #14]
 8006cfe:	6183      	str	r3, [r0, #24]
 8006d00:	4619      	mov	r1, r3
 8006d02:	2208      	movs	r2, #8
 8006d04:	305c      	adds	r0, #92	; 0x5c
 8006d06:	f000 f91a 	bl	8006f3e <memset>
 8006d0a:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <std+0x38>)
 8006d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d0e:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <std+0x3c>)
 8006d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <std+0x40>)
 8006d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <std+0x44>)
 8006d18:	6224      	str	r4, [r4, #32]
 8006d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d1c:	bd10      	pop	{r4, pc}
 8006d1e:	bf00      	nop
 8006d20:	08007235 	.word	0x08007235
 8006d24:	08007257 	.word	0x08007257
 8006d28:	0800728f 	.word	0x0800728f
 8006d2c:	080072b3 	.word	0x080072b3

08006d30 <_cleanup_r>:
 8006d30:	4901      	ldr	r1, [pc, #4]	; (8006d38 <_cleanup_r+0x8>)
 8006d32:	f000 b8af 	b.w	8006e94 <_fwalk_reent>
 8006d36:	bf00      	nop
 8006d38:	0800740d 	.word	0x0800740d

08006d3c <__sfmoreglue>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	2268      	movs	r2, #104	; 0x68
 8006d40:	1e4d      	subs	r5, r1, #1
 8006d42:	4355      	muls	r5, r2
 8006d44:	460e      	mov	r6, r1
 8006d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d4a:	f000 f96d 	bl	8007028 <_malloc_r>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	b140      	cbz	r0, 8006d64 <__sfmoreglue+0x28>
 8006d52:	2100      	movs	r1, #0
 8006d54:	e9c0 1600 	strd	r1, r6, [r0]
 8006d58:	300c      	adds	r0, #12
 8006d5a:	60a0      	str	r0, [r4, #8]
 8006d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d60:	f000 f8ed 	bl	8006f3e <memset>
 8006d64:	4620      	mov	r0, r4
 8006d66:	bd70      	pop	{r4, r5, r6, pc}

08006d68 <__sfp_lock_acquire>:
 8006d68:	4801      	ldr	r0, [pc, #4]	; (8006d70 <__sfp_lock_acquire+0x8>)
 8006d6a:	f000 b8d8 	b.w	8006f1e <__retarget_lock_acquire_recursive>
 8006d6e:	bf00      	nop
 8006d70:	20002ea1 	.word	0x20002ea1

08006d74 <__sfp_lock_release>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__sfp_lock_release+0x8>)
 8006d76:	f000 b8d3 	b.w	8006f20 <__retarget_lock_release_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	20002ea1 	.word	0x20002ea1

08006d80 <__sinit_lock_acquire>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__sinit_lock_acquire+0x8>)
 8006d82:	f000 b8cc 	b.w	8006f1e <__retarget_lock_acquire_recursive>
 8006d86:	bf00      	nop
 8006d88:	20002ea2 	.word	0x20002ea2

08006d8c <__sinit_lock_release>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__sinit_lock_release+0x8>)
 8006d8e:	f000 b8c7 	b.w	8006f20 <__retarget_lock_release_recursive>
 8006d92:	bf00      	nop
 8006d94:	20002ea2 	.word	0x20002ea2

08006d98 <__sinit>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	f7ff fff0 	bl	8006d80 <__sinit_lock_acquire>
 8006da0:	69a3      	ldr	r3, [r4, #24]
 8006da2:	b11b      	cbz	r3, 8006dac <__sinit+0x14>
 8006da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da8:	f7ff bff0 	b.w	8006d8c <__sinit_lock_release>
 8006dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006db0:	6523      	str	r3, [r4, #80]	; 0x50
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <__sinit+0x68>)
 8006db4:	4a13      	ldr	r2, [pc, #76]	; (8006e04 <__sinit+0x6c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	bf04      	itt	eq
 8006dbe:	2301      	moveq	r3, #1
 8006dc0:	61a3      	streq	r3, [r4, #24]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f820 	bl	8006e08 <__sfp>
 8006dc8:	6060      	str	r0, [r4, #4]
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 f81c 	bl	8006e08 <__sfp>
 8006dd0:	60a0      	str	r0, [r4, #8]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f818 	bl	8006e08 <__sfp>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	60e0      	str	r0, [r4, #12]
 8006ddc:	2104      	movs	r1, #4
 8006dde:	6860      	ldr	r0, [r4, #4]
 8006de0:	f7ff ff82 	bl	8006ce8 <std>
 8006de4:	68a0      	ldr	r0, [r4, #8]
 8006de6:	2201      	movs	r2, #1
 8006de8:	2109      	movs	r1, #9
 8006dea:	f7ff ff7d 	bl	8006ce8 <std>
 8006dee:	68e0      	ldr	r0, [r4, #12]
 8006df0:	2202      	movs	r2, #2
 8006df2:	2112      	movs	r1, #18
 8006df4:	f7ff ff78 	bl	8006ce8 <std>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	61a3      	str	r3, [r4, #24]
 8006dfc:	e7d2      	b.n	8006da4 <__sinit+0xc>
 8006dfe:	bf00      	nop
 8006e00:	08007ea0 	.word	0x08007ea0
 8006e04:	08006d31 	.word	0x08006d31

08006e08 <__sfp>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	4607      	mov	r7, r0
 8006e0c:	f7ff ffac 	bl	8006d68 <__sfp_lock_acquire>
 8006e10:	4b1e      	ldr	r3, [pc, #120]	; (8006e8c <__sfp+0x84>)
 8006e12:	681e      	ldr	r6, [r3, #0]
 8006e14:	69b3      	ldr	r3, [r6, #24]
 8006e16:	b913      	cbnz	r3, 8006e1e <__sfp+0x16>
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f7ff ffbd 	bl	8006d98 <__sinit>
 8006e1e:	3648      	adds	r6, #72	; 0x48
 8006e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	d503      	bpl.n	8006e30 <__sfp+0x28>
 8006e28:	6833      	ldr	r3, [r6, #0]
 8006e2a:	b30b      	cbz	r3, 8006e70 <__sfp+0x68>
 8006e2c:	6836      	ldr	r6, [r6, #0]
 8006e2e:	e7f7      	b.n	8006e20 <__sfp+0x18>
 8006e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e34:	b9d5      	cbnz	r5, 8006e6c <__sfp+0x64>
 8006e36:	4b16      	ldr	r3, [pc, #88]	; (8006e90 <__sfp+0x88>)
 8006e38:	60e3      	str	r3, [r4, #12]
 8006e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e40:	f000 f86c 	bl	8006f1c <__retarget_lock_init_recursive>
 8006e44:	f7ff ff96 	bl	8006d74 <__sfp_lock_release>
 8006e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e50:	6025      	str	r5, [r4, #0]
 8006e52:	61a5      	str	r5, [r4, #24]
 8006e54:	2208      	movs	r2, #8
 8006e56:	4629      	mov	r1, r5
 8006e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e5c:	f000 f86f 	bl	8006f3e <memset>
 8006e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e68:	4620      	mov	r0, r4
 8006e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e6c:	3468      	adds	r4, #104	; 0x68
 8006e6e:	e7d9      	b.n	8006e24 <__sfp+0x1c>
 8006e70:	2104      	movs	r1, #4
 8006e72:	4638      	mov	r0, r7
 8006e74:	f7ff ff62 	bl	8006d3c <__sfmoreglue>
 8006e78:	4604      	mov	r4, r0
 8006e7a:	6030      	str	r0, [r6, #0]
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d1d5      	bne.n	8006e2c <__sfp+0x24>
 8006e80:	f7ff ff78 	bl	8006d74 <__sfp_lock_release>
 8006e84:	230c      	movs	r3, #12
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	e7ee      	b.n	8006e68 <__sfp+0x60>
 8006e8a:	bf00      	nop
 8006e8c:	08007ea0 	.word	0x08007ea0
 8006e90:	ffff0001 	.word	0xffff0001

08006e94 <_fwalk_reent>:
 8006e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e98:	4606      	mov	r6, r0
 8006e9a:	4688      	mov	r8, r1
 8006e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ea0:	2700      	movs	r7, #0
 8006ea2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ea6:	f1b9 0901 	subs.w	r9, r9, #1
 8006eaa:	d505      	bpl.n	8006eb8 <_fwalk_reent+0x24>
 8006eac:	6824      	ldr	r4, [r4, #0]
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	d1f7      	bne.n	8006ea2 <_fwalk_reent+0xe>
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb8:	89ab      	ldrh	r3, [r5, #12]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d907      	bls.n	8006ece <_fwalk_reent+0x3a>
 8006ebe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	d003      	beq.n	8006ece <_fwalk_reent+0x3a>
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4630      	mov	r0, r6
 8006eca:	47c0      	blx	r8
 8006ecc:	4307      	orrs	r7, r0
 8006ece:	3568      	adds	r5, #104	; 0x68
 8006ed0:	e7e9      	b.n	8006ea6 <_fwalk_reent+0x12>
	...

08006ed4 <__libc_init_array>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	4d0d      	ldr	r5, [pc, #52]	; (8006f0c <__libc_init_array+0x38>)
 8006ed8:	4c0d      	ldr	r4, [pc, #52]	; (8006f10 <__libc_init_array+0x3c>)
 8006eda:	1b64      	subs	r4, r4, r5
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	2600      	movs	r6, #0
 8006ee0:	42a6      	cmp	r6, r4
 8006ee2:	d109      	bne.n	8006ef8 <__libc_init_array+0x24>
 8006ee4:	4d0b      	ldr	r5, [pc, #44]	; (8006f14 <__libc_init_array+0x40>)
 8006ee6:	4c0c      	ldr	r4, [pc, #48]	; (8006f18 <__libc_init_array+0x44>)
 8006ee8:	f000 ff32 	bl	8007d50 <_init>
 8006eec:	1b64      	subs	r4, r4, r5
 8006eee:	10a4      	asrs	r4, r4, #2
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	42a6      	cmp	r6, r4
 8006ef4:	d105      	bne.n	8006f02 <__libc_init_array+0x2e>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efc:	4798      	blx	r3
 8006efe:	3601      	adds	r6, #1
 8006f00:	e7ee      	b.n	8006ee0 <__libc_init_array+0xc>
 8006f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f06:	4798      	blx	r3
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7f2      	b.n	8006ef2 <__libc_init_array+0x1e>
 8006f0c:	08007ee0 	.word	0x08007ee0
 8006f10:	08007ee0 	.word	0x08007ee0
 8006f14:	08007ee0 	.word	0x08007ee0
 8006f18:	08007ee4 	.word	0x08007ee4

08006f1c <__retarget_lock_init_recursive>:
 8006f1c:	4770      	bx	lr

08006f1e <__retarget_lock_acquire_recursive>:
 8006f1e:	4770      	bx	lr

08006f20 <__retarget_lock_release_recursive>:
 8006f20:	4770      	bx	lr

08006f22 <memcpy>:
 8006f22:	440a      	add	r2, r1
 8006f24:	4291      	cmp	r1, r2
 8006f26:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f2a:	d100      	bne.n	8006f2e <memcpy+0xc>
 8006f2c:	4770      	bx	lr
 8006f2e:	b510      	push	{r4, lr}
 8006f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f38:	4291      	cmp	r1, r2
 8006f3a:	d1f9      	bne.n	8006f30 <memcpy+0xe>
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <memset>:
 8006f3e:	4402      	add	r2, r0
 8006f40:	4603      	mov	r3, r0
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d100      	bne.n	8006f48 <memset+0xa>
 8006f46:	4770      	bx	lr
 8006f48:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4c:	e7f9      	b.n	8006f42 <memset+0x4>
	...

08006f50 <_free_r>:
 8006f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f52:	2900      	cmp	r1, #0
 8006f54:	d044      	beq.n	8006fe0 <_free_r+0x90>
 8006f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f5a:	9001      	str	r0, [sp, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006f62:	bfb8      	it	lt
 8006f64:	18e4      	addlt	r4, r4, r3
 8006f66:	f000 fa9f 	bl	80074a8 <__malloc_lock>
 8006f6a:	4a1e      	ldr	r2, [pc, #120]	; (8006fe4 <_free_r+0x94>)
 8006f6c:	9801      	ldr	r0, [sp, #4]
 8006f6e:	6813      	ldr	r3, [r2, #0]
 8006f70:	b933      	cbnz	r3, 8006f80 <_free_r+0x30>
 8006f72:	6063      	str	r3, [r4, #4]
 8006f74:	6014      	str	r4, [r2, #0]
 8006f76:	b003      	add	sp, #12
 8006f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f7c:	f000 ba9a 	b.w	80074b4 <__malloc_unlock>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d908      	bls.n	8006f96 <_free_r+0x46>
 8006f84:	6825      	ldr	r5, [r4, #0]
 8006f86:	1961      	adds	r1, r4, r5
 8006f88:	428b      	cmp	r3, r1
 8006f8a:	bf01      	itttt	eq
 8006f8c:	6819      	ldreq	r1, [r3, #0]
 8006f8e:	685b      	ldreq	r3, [r3, #4]
 8006f90:	1949      	addeq	r1, r1, r5
 8006f92:	6021      	streq	r1, [r4, #0]
 8006f94:	e7ed      	b.n	8006f72 <_free_r+0x22>
 8006f96:	461a      	mov	r2, r3
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	b10b      	cbz	r3, 8006fa0 <_free_r+0x50>
 8006f9c:	42a3      	cmp	r3, r4
 8006f9e:	d9fa      	bls.n	8006f96 <_free_r+0x46>
 8006fa0:	6811      	ldr	r1, [r2, #0]
 8006fa2:	1855      	adds	r5, r2, r1
 8006fa4:	42a5      	cmp	r5, r4
 8006fa6:	d10b      	bne.n	8006fc0 <_free_r+0x70>
 8006fa8:	6824      	ldr	r4, [r4, #0]
 8006faa:	4421      	add	r1, r4
 8006fac:	1854      	adds	r4, r2, r1
 8006fae:	42a3      	cmp	r3, r4
 8006fb0:	6011      	str	r1, [r2, #0]
 8006fb2:	d1e0      	bne.n	8006f76 <_free_r+0x26>
 8006fb4:	681c      	ldr	r4, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	6053      	str	r3, [r2, #4]
 8006fba:	4421      	add	r1, r4
 8006fbc:	6011      	str	r1, [r2, #0]
 8006fbe:	e7da      	b.n	8006f76 <_free_r+0x26>
 8006fc0:	d902      	bls.n	8006fc8 <_free_r+0x78>
 8006fc2:	230c      	movs	r3, #12
 8006fc4:	6003      	str	r3, [r0, #0]
 8006fc6:	e7d6      	b.n	8006f76 <_free_r+0x26>
 8006fc8:	6825      	ldr	r5, [r4, #0]
 8006fca:	1961      	adds	r1, r4, r5
 8006fcc:	428b      	cmp	r3, r1
 8006fce:	bf04      	itt	eq
 8006fd0:	6819      	ldreq	r1, [r3, #0]
 8006fd2:	685b      	ldreq	r3, [r3, #4]
 8006fd4:	6063      	str	r3, [r4, #4]
 8006fd6:	bf04      	itt	eq
 8006fd8:	1949      	addeq	r1, r1, r5
 8006fda:	6021      	streq	r1, [r4, #0]
 8006fdc:	6054      	str	r4, [r2, #4]
 8006fde:	e7ca      	b.n	8006f76 <_free_r+0x26>
 8006fe0:	b003      	add	sp, #12
 8006fe2:	bd30      	pop	{r4, r5, pc}
 8006fe4:	20002ea4 	.word	0x20002ea4

08006fe8 <sbrk_aligned>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4e0e      	ldr	r6, [pc, #56]	; (8007024 <sbrk_aligned+0x3c>)
 8006fec:	460c      	mov	r4, r1
 8006fee:	6831      	ldr	r1, [r6, #0]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	b911      	cbnz	r1, 8006ffa <sbrk_aligned+0x12>
 8006ff4:	f000 f90e 	bl	8007214 <_sbrk_r>
 8006ff8:	6030      	str	r0, [r6, #0]
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f000 f909 	bl	8007214 <_sbrk_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d00a      	beq.n	800701c <sbrk_aligned+0x34>
 8007006:	1cc4      	adds	r4, r0, #3
 8007008:	f024 0403 	bic.w	r4, r4, #3
 800700c:	42a0      	cmp	r0, r4
 800700e:	d007      	beq.n	8007020 <sbrk_aligned+0x38>
 8007010:	1a21      	subs	r1, r4, r0
 8007012:	4628      	mov	r0, r5
 8007014:	f000 f8fe 	bl	8007214 <_sbrk_r>
 8007018:	3001      	adds	r0, #1
 800701a:	d101      	bne.n	8007020 <sbrk_aligned+0x38>
 800701c:	f04f 34ff 	mov.w	r4, #4294967295
 8007020:	4620      	mov	r0, r4
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	20002ea8 	.word	0x20002ea8

08007028 <_malloc_r>:
 8007028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702c:	1ccd      	adds	r5, r1, #3
 800702e:	f025 0503 	bic.w	r5, r5, #3
 8007032:	3508      	adds	r5, #8
 8007034:	2d0c      	cmp	r5, #12
 8007036:	bf38      	it	cc
 8007038:	250c      	movcc	r5, #12
 800703a:	2d00      	cmp	r5, #0
 800703c:	4607      	mov	r7, r0
 800703e:	db01      	blt.n	8007044 <_malloc_r+0x1c>
 8007040:	42a9      	cmp	r1, r5
 8007042:	d905      	bls.n	8007050 <_malloc_r+0x28>
 8007044:	230c      	movs	r3, #12
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	2600      	movs	r6, #0
 800704a:	4630      	mov	r0, r6
 800704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007050:	4e2e      	ldr	r6, [pc, #184]	; (800710c <_malloc_r+0xe4>)
 8007052:	f000 fa29 	bl	80074a8 <__malloc_lock>
 8007056:	6833      	ldr	r3, [r6, #0]
 8007058:	461c      	mov	r4, r3
 800705a:	bb34      	cbnz	r4, 80070aa <_malloc_r+0x82>
 800705c:	4629      	mov	r1, r5
 800705e:	4638      	mov	r0, r7
 8007060:	f7ff ffc2 	bl	8006fe8 <sbrk_aligned>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	4604      	mov	r4, r0
 8007068:	d14d      	bne.n	8007106 <_malloc_r+0xde>
 800706a:	6834      	ldr	r4, [r6, #0]
 800706c:	4626      	mov	r6, r4
 800706e:	2e00      	cmp	r6, #0
 8007070:	d140      	bne.n	80070f4 <_malloc_r+0xcc>
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	4631      	mov	r1, r6
 8007076:	4638      	mov	r0, r7
 8007078:	eb04 0803 	add.w	r8, r4, r3
 800707c:	f000 f8ca 	bl	8007214 <_sbrk_r>
 8007080:	4580      	cmp	r8, r0
 8007082:	d13a      	bne.n	80070fa <_malloc_r+0xd2>
 8007084:	6821      	ldr	r1, [r4, #0]
 8007086:	3503      	adds	r5, #3
 8007088:	1a6d      	subs	r5, r5, r1
 800708a:	f025 0503 	bic.w	r5, r5, #3
 800708e:	3508      	adds	r5, #8
 8007090:	2d0c      	cmp	r5, #12
 8007092:	bf38      	it	cc
 8007094:	250c      	movcc	r5, #12
 8007096:	4629      	mov	r1, r5
 8007098:	4638      	mov	r0, r7
 800709a:	f7ff ffa5 	bl	8006fe8 <sbrk_aligned>
 800709e:	3001      	adds	r0, #1
 80070a0:	d02b      	beq.n	80070fa <_malloc_r+0xd2>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	442b      	add	r3, r5
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	e00e      	b.n	80070c8 <_malloc_r+0xa0>
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	1b52      	subs	r2, r2, r5
 80070ae:	d41e      	bmi.n	80070ee <_malloc_r+0xc6>
 80070b0:	2a0b      	cmp	r2, #11
 80070b2:	d916      	bls.n	80070e2 <_malloc_r+0xba>
 80070b4:	1961      	adds	r1, r4, r5
 80070b6:	42a3      	cmp	r3, r4
 80070b8:	6025      	str	r5, [r4, #0]
 80070ba:	bf18      	it	ne
 80070bc:	6059      	strne	r1, [r3, #4]
 80070be:	6863      	ldr	r3, [r4, #4]
 80070c0:	bf08      	it	eq
 80070c2:	6031      	streq	r1, [r6, #0]
 80070c4:	5162      	str	r2, [r4, r5]
 80070c6:	604b      	str	r3, [r1, #4]
 80070c8:	4638      	mov	r0, r7
 80070ca:	f104 060b 	add.w	r6, r4, #11
 80070ce:	f000 f9f1 	bl	80074b4 <__malloc_unlock>
 80070d2:	f026 0607 	bic.w	r6, r6, #7
 80070d6:	1d23      	adds	r3, r4, #4
 80070d8:	1af2      	subs	r2, r6, r3
 80070da:	d0b6      	beq.n	800704a <_malloc_r+0x22>
 80070dc:	1b9b      	subs	r3, r3, r6
 80070de:	50a3      	str	r3, [r4, r2]
 80070e0:	e7b3      	b.n	800704a <_malloc_r+0x22>
 80070e2:	6862      	ldr	r2, [r4, #4]
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	bf0c      	ite	eq
 80070e8:	6032      	streq	r2, [r6, #0]
 80070ea:	605a      	strne	r2, [r3, #4]
 80070ec:	e7ec      	b.n	80070c8 <_malloc_r+0xa0>
 80070ee:	4623      	mov	r3, r4
 80070f0:	6864      	ldr	r4, [r4, #4]
 80070f2:	e7b2      	b.n	800705a <_malloc_r+0x32>
 80070f4:	4634      	mov	r4, r6
 80070f6:	6876      	ldr	r6, [r6, #4]
 80070f8:	e7b9      	b.n	800706e <_malloc_r+0x46>
 80070fa:	230c      	movs	r3, #12
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	4638      	mov	r0, r7
 8007100:	f000 f9d8 	bl	80074b4 <__malloc_unlock>
 8007104:	e7a1      	b.n	800704a <_malloc_r+0x22>
 8007106:	6025      	str	r5, [r4, #0]
 8007108:	e7de      	b.n	80070c8 <_malloc_r+0xa0>
 800710a:	bf00      	nop
 800710c:	20002ea4 	.word	0x20002ea4

08007110 <iprintf>:
 8007110:	b40f      	push	{r0, r1, r2, r3}
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <iprintf+0x2c>)
 8007114:	b513      	push	{r0, r1, r4, lr}
 8007116:	681c      	ldr	r4, [r3, #0]
 8007118:	b124      	cbz	r4, 8007124 <iprintf+0x14>
 800711a:	69a3      	ldr	r3, [r4, #24]
 800711c:	b913      	cbnz	r3, 8007124 <iprintf+0x14>
 800711e:	4620      	mov	r0, r4
 8007120:	f7ff fe3a 	bl	8006d98 <__sinit>
 8007124:	ab05      	add	r3, sp, #20
 8007126:	9a04      	ldr	r2, [sp, #16]
 8007128:	68a1      	ldr	r1, [r4, #8]
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	4620      	mov	r0, r4
 800712e:	f000 f9f1 	bl	8007514 <_vfiprintf_r>
 8007132:	b002      	add	sp, #8
 8007134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007138:	b004      	add	sp, #16
 800713a:	4770      	bx	lr
 800713c:	20000010 	.word	0x20000010

08007140 <cleanup_glue>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	460c      	mov	r4, r1
 8007144:	6809      	ldr	r1, [r1, #0]
 8007146:	4605      	mov	r5, r0
 8007148:	b109      	cbz	r1, 800714e <cleanup_glue+0xe>
 800714a:	f7ff fff9 	bl	8007140 <cleanup_glue>
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007156:	f7ff befb 	b.w	8006f50 <_free_r>
	...

0800715c <_reclaim_reent>:
 800715c:	4b2c      	ldr	r3, [pc, #176]	; (8007210 <_reclaim_reent+0xb4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4283      	cmp	r3, r0
 8007162:	b570      	push	{r4, r5, r6, lr}
 8007164:	4604      	mov	r4, r0
 8007166:	d051      	beq.n	800720c <_reclaim_reent+0xb0>
 8007168:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800716a:	b143      	cbz	r3, 800717e <_reclaim_reent+0x22>
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d14a      	bne.n	8007208 <_reclaim_reent+0xac>
 8007172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007174:	6819      	ldr	r1, [r3, #0]
 8007176:	b111      	cbz	r1, 800717e <_reclaim_reent+0x22>
 8007178:	4620      	mov	r0, r4
 800717a:	f7ff fee9 	bl	8006f50 <_free_r>
 800717e:	6961      	ldr	r1, [r4, #20]
 8007180:	b111      	cbz	r1, 8007188 <_reclaim_reent+0x2c>
 8007182:	4620      	mov	r0, r4
 8007184:	f7ff fee4 	bl	8006f50 <_free_r>
 8007188:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800718a:	b111      	cbz	r1, 8007192 <_reclaim_reent+0x36>
 800718c:	4620      	mov	r0, r4
 800718e:	f7ff fedf 	bl	8006f50 <_free_r>
 8007192:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007194:	b111      	cbz	r1, 800719c <_reclaim_reent+0x40>
 8007196:	4620      	mov	r0, r4
 8007198:	f7ff feda 	bl	8006f50 <_free_r>
 800719c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800719e:	b111      	cbz	r1, 80071a6 <_reclaim_reent+0x4a>
 80071a0:	4620      	mov	r0, r4
 80071a2:	f7ff fed5 	bl	8006f50 <_free_r>
 80071a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80071a8:	b111      	cbz	r1, 80071b0 <_reclaim_reent+0x54>
 80071aa:	4620      	mov	r0, r4
 80071ac:	f7ff fed0 	bl	8006f50 <_free_r>
 80071b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80071b2:	b111      	cbz	r1, 80071ba <_reclaim_reent+0x5e>
 80071b4:	4620      	mov	r0, r4
 80071b6:	f7ff fecb 	bl	8006f50 <_free_r>
 80071ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80071bc:	b111      	cbz	r1, 80071c4 <_reclaim_reent+0x68>
 80071be:	4620      	mov	r0, r4
 80071c0:	f7ff fec6 	bl	8006f50 <_free_r>
 80071c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071c6:	b111      	cbz	r1, 80071ce <_reclaim_reent+0x72>
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7ff fec1 	bl	8006f50 <_free_r>
 80071ce:	69a3      	ldr	r3, [r4, #24]
 80071d0:	b1e3      	cbz	r3, 800720c <_reclaim_reent+0xb0>
 80071d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071d4:	4620      	mov	r0, r4
 80071d6:	4798      	blx	r3
 80071d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071da:	b1b9      	cbz	r1, 800720c <_reclaim_reent+0xb0>
 80071dc:	4620      	mov	r0, r4
 80071de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071e2:	f7ff bfad 	b.w	8007140 <cleanup_glue>
 80071e6:	5949      	ldr	r1, [r1, r5]
 80071e8:	b941      	cbnz	r1, 80071fc <_reclaim_reent+0xa0>
 80071ea:	3504      	adds	r5, #4
 80071ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ee:	2d80      	cmp	r5, #128	; 0x80
 80071f0:	68d9      	ldr	r1, [r3, #12]
 80071f2:	d1f8      	bne.n	80071e6 <_reclaim_reent+0x8a>
 80071f4:	4620      	mov	r0, r4
 80071f6:	f7ff feab 	bl	8006f50 <_free_r>
 80071fa:	e7ba      	b.n	8007172 <_reclaim_reent+0x16>
 80071fc:	680e      	ldr	r6, [r1, #0]
 80071fe:	4620      	mov	r0, r4
 8007200:	f7ff fea6 	bl	8006f50 <_free_r>
 8007204:	4631      	mov	r1, r6
 8007206:	e7ef      	b.n	80071e8 <_reclaim_reent+0x8c>
 8007208:	2500      	movs	r5, #0
 800720a:	e7ef      	b.n	80071ec <_reclaim_reent+0x90>
 800720c:	bd70      	pop	{r4, r5, r6, pc}
 800720e:	bf00      	nop
 8007210:	20000010 	.word	0x20000010

08007214 <_sbrk_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	4d06      	ldr	r5, [pc, #24]	; (8007230 <_sbrk_r+0x1c>)
 8007218:	2300      	movs	r3, #0
 800721a:	4604      	mov	r4, r0
 800721c:	4608      	mov	r0, r1
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	f7f9 feb4 	bl	8000f8c <_sbrk>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_sbrk_r+0x1a>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_sbrk_r+0x1a>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20002eac 	.word	0x20002eac

08007234 <__sread>:
 8007234:	b510      	push	{r4, lr}
 8007236:	460c      	mov	r4, r1
 8007238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723c:	f000 fc2e 	bl	8007a9c <_read_r>
 8007240:	2800      	cmp	r0, #0
 8007242:	bfab      	itete	ge
 8007244:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007246:	89a3      	ldrhlt	r3, [r4, #12]
 8007248:	181b      	addge	r3, r3, r0
 800724a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800724e:	bfac      	ite	ge
 8007250:	6563      	strge	r3, [r4, #84]	; 0x54
 8007252:	81a3      	strhlt	r3, [r4, #12]
 8007254:	bd10      	pop	{r4, pc}

08007256 <__swrite>:
 8007256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725a:	461f      	mov	r7, r3
 800725c:	898b      	ldrh	r3, [r1, #12]
 800725e:	05db      	lsls	r3, r3, #23
 8007260:	4605      	mov	r5, r0
 8007262:	460c      	mov	r4, r1
 8007264:	4616      	mov	r6, r2
 8007266:	d505      	bpl.n	8007274 <__swrite+0x1e>
 8007268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800726c:	2302      	movs	r3, #2
 800726e:	2200      	movs	r2, #0
 8007270:	f000 f908 	bl	8007484 <_lseek_r>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	4632      	mov	r2, r6
 8007282:	463b      	mov	r3, r7
 8007284:	4628      	mov	r0, r5
 8007286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	f000 b817 	b.w	80072bc <_write_r>

0800728e <__sseek>:
 800728e:	b510      	push	{r4, lr}
 8007290:	460c      	mov	r4, r1
 8007292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007296:	f000 f8f5 	bl	8007484 <_lseek_r>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	bf15      	itete	ne
 80072a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80072a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072aa:	81a3      	strheq	r3, [r4, #12]
 80072ac:	bf18      	it	ne
 80072ae:	81a3      	strhne	r3, [r4, #12]
 80072b0:	bd10      	pop	{r4, pc}

080072b2 <__sclose>:
 80072b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b6:	f000 b813 	b.w	80072e0 <_close_r>
	...

080072bc <_write_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_write_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7f9 fe0d 	bl	8000eea <_write>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_write_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_write_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20002eac 	.word	0x20002eac

080072e0 <_close_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d06      	ldr	r5, [pc, #24]	; (80072fc <_close_r+0x1c>)
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	f7f9 fe19 	bl	8000f22 <_close>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_close_r+0x1a>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_close_r+0x1a>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	20002eac 	.word	0x20002eac

08007300 <__sflush_r>:
 8007300:	898a      	ldrh	r2, [r1, #12]
 8007302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007306:	4605      	mov	r5, r0
 8007308:	0710      	lsls	r0, r2, #28
 800730a:	460c      	mov	r4, r1
 800730c:	d458      	bmi.n	80073c0 <__sflush_r+0xc0>
 800730e:	684b      	ldr	r3, [r1, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	dc05      	bgt.n	8007320 <__sflush_r+0x20>
 8007314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	dc02      	bgt.n	8007320 <__sflush_r+0x20>
 800731a:	2000      	movs	r0, #0
 800731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007322:	2e00      	cmp	r6, #0
 8007324:	d0f9      	beq.n	800731a <__sflush_r+0x1a>
 8007326:	2300      	movs	r3, #0
 8007328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800732c:	682f      	ldr	r7, [r5, #0]
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	d032      	beq.n	8007398 <__sflush_r+0x98>
 8007332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	075a      	lsls	r2, r3, #29
 8007338:	d505      	bpl.n	8007346 <__sflush_r+0x46>
 800733a:	6863      	ldr	r3, [r4, #4]
 800733c:	1ac0      	subs	r0, r0, r3
 800733e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007340:	b10b      	cbz	r3, 8007346 <__sflush_r+0x46>
 8007342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007344:	1ac0      	subs	r0, r0, r3
 8007346:	2300      	movs	r3, #0
 8007348:	4602      	mov	r2, r0
 800734a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800734c:	6a21      	ldr	r1, [r4, #32]
 800734e:	4628      	mov	r0, r5
 8007350:	47b0      	blx	r6
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	d106      	bne.n	8007366 <__sflush_r+0x66>
 8007358:	6829      	ldr	r1, [r5, #0]
 800735a:	291d      	cmp	r1, #29
 800735c:	d82c      	bhi.n	80073b8 <__sflush_r+0xb8>
 800735e:	4a2a      	ldr	r2, [pc, #168]	; (8007408 <__sflush_r+0x108>)
 8007360:	40ca      	lsrs	r2, r1
 8007362:	07d6      	lsls	r6, r2, #31
 8007364:	d528      	bpl.n	80073b8 <__sflush_r+0xb8>
 8007366:	2200      	movs	r2, #0
 8007368:	6062      	str	r2, [r4, #4]
 800736a:	04d9      	lsls	r1, r3, #19
 800736c:	6922      	ldr	r2, [r4, #16]
 800736e:	6022      	str	r2, [r4, #0]
 8007370:	d504      	bpl.n	800737c <__sflush_r+0x7c>
 8007372:	1c42      	adds	r2, r0, #1
 8007374:	d101      	bne.n	800737a <__sflush_r+0x7a>
 8007376:	682b      	ldr	r3, [r5, #0]
 8007378:	b903      	cbnz	r3, 800737c <__sflush_r+0x7c>
 800737a:	6560      	str	r0, [r4, #84]	; 0x54
 800737c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800737e:	602f      	str	r7, [r5, #0]
 8007380:	2900      	cmp	r1, #0
 8007382:	d0ca      	beq.n	800731a <__sflush_r+0x1a>
 8007384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007388:	4299      	cmp	r1, r3
 800738a:	d002      	beq.n	8007392 <__sflush_r+0x92>
 800738c:	4628      	mov	r0, r5
 800738e:	f7ff fddf 	bl	8006f50 <_free_r>
 8007392:	2000      	movs	r0, #0
 8007394:	6360      	str	r0, [r4, #52]	; 0x34
 8007396:	e7c1      	b.n	800731c <__sflush_r+0x1c>
 8007398:	6a21      	ldr	r1, [r4, #32]
 800739a:	2301      	movs	r3, #1
 800739c:	4628      	mov	r0, r5
 800739e:	47b0      	blx	r6
 80073a0:	1c41      	adds	r1, r0, #1
 80073a2:	d1c7      	bne.n	8007334 <__sflush_r+0x34>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0c4      	beq.n	8007334 <__sflush_r+0x34>
 80073aa:	2b1d      	cmp	r3, #29
 80073ac:	d001      	beq.n	80073b2 <__sflush_r+0xb2>
 80073ae:	2b16      	cmp	r3, #22
 80073b0:	d101      	bne.n	80073b6 <__sflush_r+0xb6>
 80073b2:	602f      	str	r7, [r5, #0]
 80073b4:	e7b1      	b.n	800731a <__sflush_r+0x1a>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	e7ad      	b.n	800731c <__sflush_r+0x1c>
 80073c0:	690f      	ldr	r7, [r1, #16]
 80073c2:	2f00      	cmp	r7, #0
 80073c4:	d0a9      	beq.n	800731a <__sflush_r+0x1a>
 80073c6:	0793      	lsls	r3, r2, #30
 80073c8:	680e      	ldr	r6, [r1, #0]
 80073ca:	bf08      	it	eq
 80073cc:	694b      	ldreq	r3, [r1, #20]
 80073ce:	600f      	str	r7, [r1, #0]
 80073d0:	bf18      	it	ne
 80073d2:	2300      	movne	r3, #0
 80073d4:	eba6 0807 	sub.w	r8, r6, r7
 80073d8:	608b      	str	r3, [r1, #8]
 80073da:	f1b8 0f00 	cmp.w	r8, #0
 80073de:	dd9c      	ble.n	800731a <__sflush_r+0x1a>
 80073e0:	6a21      	ldr	r1, [r4, #32]
 80073e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073e4:	4643      	mov	r3, r8
 80073e6:	463a      	mov	r2, r7
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b0      	blx	r6
 80073ec:	2800      	cmp	r0, #0
 80073ee:	dc06      	bgt.n	80073fe <__sflush_r+0xfe>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	e78e      	b.n	800731c <__sflush_r+0x1c>
 80073fe:	4407      	add	r7, r0
 8007400:	eba8 0800 	sub.w	r8, r8, r0
 8007404:	e7e9      	b.n	80073da <__sflush_r+0xda>
 8007406:	bf00      	nop
 8007408:	20400001 	.word	0x20400001

0800740c <_fflush_r>:
 800740c:	b538      	push	{r3, r4, r5, lr}
 800740e:	690b      	ldr	r3, [r1, #16]
 8007410:	4605      	mov	r5, r0
 8007412:	460c      	mov	r4, r1
 8007414:	b913      	cbnz	r3, 800741c <_fflush_r+0x10>
 8007416:	2500      	movs	r5, #0
 8007418:	4628      	mov	r0, r5
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	b118      	cbz	r0, 8007426 <_fflush_r+0x1a>
 800741e:	6983      	ldr	r3, [r0, #24]
 8007420:	b90b      	cbnz	r3, 8007426 <_fflush_r+0x1a>
 8007422:	f7ff fcb9 	bl	8006d98 <__sinit>
 8007426:	4b14      	ldr	r3, [pc, #80]	; (8007478 <_fflush_r+0x6c>)
 8007428:	429c      	cmp	r4, r3
 800742a:	d11b      	bne.n	8007464 <_fflush_r+0x58>
 800742c:	686c      	ldr	r4, [r5, #4]
 800742e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0ef      	beq.n	8007416 <_fflush_r+0xa>
 8007436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007438:	07d0      	lsls	r0, r2, #31
 800743a:	d404      	bmi.n	8007446 <_fflush_r+0x3a>
 800743c:	0599      	lsls	r1, r3, #22
 800743e:	d402      	bmi.n	8007446 <_fflush_r+0x3a>
 8007440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007442:	f7ff fd6c 	bl	8006f1e <__retarget_lock_acquire_recursive>
 8007446:	4628      	mov	r0, r5
 8007448:	4621      	mov	r1, r4
 800744a:	f7ff ff59 	bl	8007300 <__sflush_r>
 800744e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007450:	07da      	lsls	r2, r3, #31
 8007452:	4605      	mov	r5, r0
 8007454:	d4e0      	bmi.n	8007418 <_fflush_r+0xc>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	059b      	lsls	r3, r3, #22
 800745a:	d4dd      	bmi.n	8007418 <_fflush_r+0xc>
 800745c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800745e:	f7ff fd5f 	bl	8006f20 <__retarget_lock_release_recursive>
 8007462:	e7d9      	b.n	8007418 <_fflush_r+0xc>
 8007464:	4b05      	ldr	r3, [pc, #20]	; (800747c <_fflush_r+0x70>)
 8007466:	429c      	cmp	r4, r3
 8007468:	d101      	bne.n	800746e <_fflush_r+0x62>
 800746a:	68ac      	ldr	r4, [r5, #8]
 800746c:	e7df      	b.n	800742e <_fflush_r+0x22>
 800746e:	4b04      	ldr	r3, [pc, #16]	; (8007480 <_fflush_r+0x74>)
 8007470:	429c      	cmp	r4, r3
 8007472:	bf08      	it	eq
 8007474:	68ec      	ldreq	r4, [r5, #12]
 8007476:	e7da      	b.n	800742e <_fflush_r+0x22>
 8007478:	08007e60 	.word	0x08007e60
 800747c:	08007e80 	.word	0x08007e80
 8007480:	08007e40 	.word	0x08007e40

08007484 <_lseek_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d07      	ldr	r5, [pc, #28]	; (80074a4 <_lseek_r+0x20>)
 8007488:	4604      	mov	r4, r0
 800748a:	4608      	mov	r0, r1
 800748c:	4611      	mov	r1, r2
 800748e:	2200      	movs	r2, #0
 8007490:	602a      	str	r2, [r5, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f7f9 fd6c 	bl	8000f70 <_lseek>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_lseek_r+0x1e>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_lseek_r+0x1e>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	20002eac 	.word	0x20002eac

080074a8 <__malloc_lock>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__malloc_lock+0x8>)
 80074aa:	f7ff bd38 	b.w	8006f1e <__retarget_lock_acquire_recursive>
 80074ae:	bf00      	nop
 80074b0:	20002ea0 	.word	0x20002ea0

080074b4 <__malloc_unlock>:
 80074b4:	4801      	ldr	r0, [pc, #4]	; (80074bc <__malloc_unlock+0x8>)
 80074b6:	f7ff bd33 	b.w	8006f20 <__retarget_lock_release_recursive>
 80074ba:	bf00      	nop
 80074bc:	20002ea0 	.word	0x20002ea0

080074c0 <__sfputc_r>:
 80074c0:	6893      	ldr	r3, [r2, #8]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	b410      	push	{r4}
 80074c8:	6093      	str	r3, [r2, #8]
 80074ca:	da08      	bge.n	80074de <__sfputc_r+0x1e>
 80074cc:	6994      	ldr	r4, [r2, #24]
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	db01      	blt.n	80074d6 <__sfputc_r+0x16>
 80074d2:	290a      	cmp	r1, #10
 80074d4:	d103      	bne.n	80074de <__sfputc_r+0x1e>
 80074d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074da:	f000 baf1 	b.w	8007ac0 <__swbuf_r>
 80074de:	6813      	ldr	r3, [r2, #0]
 80074e0:	1c58      	adds	r0, r3, #1
 80074e2:	6010      	str	r0, [r2, #0]
 80074e4:	7019      	strb	r1, [r3, #0]
 80074e6:	4608      	mov	r0, r1
 80074e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <__sfputs_r>:
 80074ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f0:	4606      	mov	r6, r0
 80074f2:	460f      	mov	r7, r1
 80074f4:	4614      	mov	r4, r2
 80074f6:	18d5      	adds	r5, r2, r3
 80074f8:	42ac      	cmp	r4, r5
 80074fa:	d101      	bne.n	8007500 <__sfputs_r+0x12>
 80074fc:	2000      	movs	r0, #0
 80074fe:	e007      	b.n	8007510 <__sfputs_r+0x22>
 8007500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007504:	463a      	mov	r2, r7
 8007506:	4630      	mov	r0, r6
 8007508:	f7ff ffda 	bl	80074c0 <__sfputc_r>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d1f3      	bne.n	80074f8 <__sfputs_r+0xa>
 8007510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007514 <_vfiprintf_r>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	460d      	mov	r5, r1
 800751a:	b09d      	sub	sp, #116	; 0x74
 800751c:	4614      	mov	r4, r2
 800751e:	4698      	mov	r8, r3
 8007520:	4606      	mov	r6, r0
 8007522:	b118      	cbz	r0, 800752c <_vfiprintf_r+0x18>
 8007524:	6983      	ldr	r3, [r0, #24]
 8007526:	b90b      	cbnz	r3, 800752c <_vfiprintf_r+0x18>
 8007528:	f7ff fc36 	bl	8006d98 <__sinit>
 800752c:	4b89      	ldr	r3, [pc, #548]	; (8007754 <_vfiprintf_r+0x240>)
 800752e:	429d      	cmp	r5, r3
 8007530:	d11b      	bne.n	800756a <_vfiprintf_r+0x56>
 8007532:	6875      	ldr	r5, [r6, #4]
 8007534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007536:	07d9      	lsls	r1, r3, #31
 8007538:	d405      	bmi.n	8007546 <_vfiprintf_r+0x32>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	059a      	lsls	r2, r3, #22
 800753e:	d402      	bmi.n	8007546 <_vfiprintf_r+0x32>
 8007540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007542:	f7ff fcec 	bl	8006f1e <__retarget_lock_acquire_recursive>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	071b      	lsls	r3, r3, #28
 800754a:	d501      	bpl.n	8007550 <_vfiprintf_r+0x3c>
 800754c:	692b      	ldr	r3, [r5, #16]
 800754e:	b9eb      	cbnz	r3, 800758c <_vfiprintf_r+0x78>
 8007550:	4629      	mov	r1, r5
 8007552:	4630      	mov	r0, r6
 8007554:	f000 fb06 	bl	8007b64 <__swsetup_r>
 8007558:	b1c0      	cbz	r0, 800758c <_vfiprintf_r+0x78>
 800755a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755c:	07dc      	lsls	r4, r3, #31
 800755e:	d50e      	bpl.n	800757e <_vfiprintf_r+0x6a>
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	b01d      	add	sp, #116	; 0x74
 8007566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756a:	4b7b      	ldr	r3, [pc, #492]	; (8007758 <_vfiprintf_r+0x244>)
 800756c:	429d      	cmp	r5, r3
 800756e:	d101      	bne.n	8007574 <_vfiprintf_r+0x60>
 8007570:	68b5      	ldr	r5, [r6, #8]
 8007572:	e7df      	b.n	8007534 <_vfiprintf_r+0x20>
 8007574:	4b79      	ldr	r3, [pc, #484]	; (800775c <_vfiprintf_r+0x248>)
 8007576:	429d      	cmp	r5, r3
 8007578:	bf08      	it	eq
 800757a:	68f5      	ldreq	r5, [r6, #12]
 800757c:	e7da      	b.n	8007534 <_vfiprintf_r+0x20>
 800757e:	89ab      	ldrh	r3, [r5, #12]
 8007580:	0598      	lsls	r0, r3, #22
 8007582:	d4ed      	bmi.n	8007560 <_vfiprintf_r+0x4c>
 8007584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007586:	f7ff fccb 	bl	8006f20 <__retarget_lock_release_recursive>
 800758a:	e7e9      	b.n	8007560 <_vfiprintf_r+0x4c>
 800758c:	2300      	movs	r3, #0
 800758e:	9309      	str	r3, [sp, #36]	; 0x24
 8007590:	2320      	movs	r3, #32
 8007592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007596:	f8cd 800c 	str.w	r8, [sp, #12]
 800759a:	2330      	movs	r3, #48	; 0x30
 800759c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007760 <_vfiprintf_r+0x24c>
 80075a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075a4:	f04f 0901 	mov.w	r9, #1
 80075a8:	4623      	mov	r3, r4
 80075aa:	469a      	mov	sl, r3
 80075ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b0:	b10a      	cbz	r2, 80075b6 <_vfiprintf_r+0xa2>
 80075b2:	2a25      	cmp	r2, #37	; 0x25
 80075b4:	d1f9      	bne.n	80075aa <_vfiprintf_r+0x96>
 80075b6:	ebba 0b04 	subs.w	fp, sl, r4
 80075ba:	d00b      	beq.n	80075d4 <_vfiprintf_r+0xc0>
 80075bc:	465b      	mov	r3, fp
 80075be:	4622      	mov	r2, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	4630      	mov	r0, r6
 80075c4:	f7ff ff93 	bl	80074ee <__sfputs_r>
 80075c8:	3001      	adds	r0, #1
 80075ca:	f000 80aa 	beq.w	8007722 <_vfiprintf_r+0x20e>
 80075ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d0:	445a      	add	r2, fp
 80075d2:	9209      	str	r2, [sp, #36]	; 0x24
 80075d4:	f89a 3000 	ldrb.w	r3, [sl]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80a2 	beq.w	8007722 <_vfiprintf_r+0x20e>
 80075de:	2300      	movs	r3, #0
 80075e0:	f04f 32ff 	mov.w	r2, #4294967295
 80075e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e8:	f10a 0a01 	add.w	sl, sl, #1
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	9307      	str	r3, [sp, #28]
 80075f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075f4:	931a      	str	r3, [sp, #104]	; 0x68
 80075f6:	4654      	mov	r4, sl
 80075f8:	2205      	movs	r2, #5
 80075fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fe:	4858      	ldr	r0, [pc, #352]	; (8007760 <_vfiprintf_r+0x24c>)
 8007600:	f7f8 fdf6 	bl	80001f0 <memchr>
 8007604:	9a04      	ldr	r2, [sp, #16]
 8007606:	b9d8      	cbnz	r0, 8007640 <_vfiprintf_r+0x12c>
 8007608:	06d1      	lsls	r1, r2, #27
 800760a:	bf44      	itt	mi
 800760c:	2320      	movmi	r3, #32
 800760e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007612:	0713      	lsls	r3, r2, #28
 8007614:	bf44      	itt	mi
 8007616:	232b      	movmi	r3, #43	; 0x2b
 8007618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761c:	f89a 3000 	ldrb.w	r3, [sl]
 8007620:	2b2a      	cmp	r3, #42	; 0x2a
 8007622:	d015      	beq.n	8007650 <_vfiprintf_r+0x13c>
 8007624:	9a07      	ldr	r2, [sp, #28]
 8007626:	4654      	mov	r4, sl
 8007628:	2000      	movs	r0, #0
 800762a:	f04f 0c0a 	mov.w	ip, #10
 800762e:	4621      	mov	r1, r4
 8007630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007634:	3b30      	subs	r3, #48	; 0x30
 8007636:	2b09      	cmp	r3, #9
 8007638:	d94e      	bls.n	80076d8 <_vfiprintf_r+0x1c4>
 800763a:	b1b0      	cbz	r0, 800766a <_vfiprintf_r+0x156>
 800763c:	9207      	str	r2, [sp, #28]
 800763e:	e014      	b.n	800766a <_vfiprintf_r+0x156>
 8007640:	eba0 0308 	sub.w	r3, r0, r8
 8007644:	fa09 f303 	lsl.w	r3, r9, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	9304      	str	r3, [sp, #16]
 800764c:	46a2      	mov	sl, r4
 800764e:	e7d2      	b.n	80075f6 <_vfiprintf_r+0xe2>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	1d19      	adds	r1, r3, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	9103      	str	r1, [sp, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	bfbb      	ittet	lt
 800765c:	425b      	neglt	r3, r3
 800765e:	f042 0202 	orrlt.w	r2, r2, #2
 8007662:	9307      	strge	r3, [sp, #28]
 8007664:	9307      	strlt	r3, [sp, #28]
 8007666:	bfb8      	it	lt
 8007668:	9204      	strlt	r2, [sp, #16]
 800766a:	7823      	ldrb	r3, [r4, #0]
 800766c:	2b2e      	cmp	r3, #46	; 0x2e
 800766e:	d10c      	bne.n	800768a <_vfiprintf_r+0x176>
 8007670:	7863      	ldrb	r3, [r4, #1]
 8007672:	2b2a      	cmp	r3, #42	; 0x2a
 8007674:	d135      	bne.n	80076e2 <_vfiprintf_r+0x1ce>
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	1d1a      	adds	r2, r3, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	9203      	str	r2, [sp, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfb8      	it	lt
 8007682:	f04f 33ff 	movlt.w	r3, #4294967295
 8007686:	3402      	adds	r4, #2
 8007688:	9305      	str	r3, [sp, #20]
 800768a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007770 <_vfiprintf_r+0x25c>
 800768e:	7821      	ldrb	r1, [r4, #0]
 8007690:	2203      	movs	r2, #3
 8007692:	4650      	mov	r0, sl
 8007694:	f7f8 fdac 	bl	80001f0 <memchr>
 8007698:	b140      	cbz	r0, 80076ac <_vfiprintf_r+0x198>
 800769a:	2340      	movs	r3, #64	; 0x40
 800769c:	eba0 000a 	sub.w	r0, r0, sl
 80076a0:	fa03 f000 	lsl.w	r0, r3, r0
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	4303      	orrs	r3, r0
 80076a8:	3401      	adds	r4, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b0:	482c      	ldr	r0, [pc, #176]	; (8007764 <_vfiprintf_r+0x250>)
 80076b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076b6:	2206      	movs	r2, #6
 80076b8:	f7f8 fd9a 	bl	80001f0 <memchr>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d03f      	beq.n	8007740 <_vfiprintf_r+0x22c>
 80076c0:	4b29      	ldr	r3, [pc, #164]	; (8007768 <_vfiprintf_r+0x254>)
 80076c2:	bb1b      	cbnz	r3, 800770c <_vfiprintf_r+0x1f8>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	3307      	adds	r3, #7
 80076c8:	f023 0307 	bic.w	r3, r3, #7
 80076cc:	3308      	adds	r3, #8
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	443b      	add	r3, r7
 80076d4:	9309      	str	r3, [sp, #36]	; 0x24
 80076d6:	e767      	b.n	80075a8 <_vfiprintf_r+0x94>
 80076d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076dc:	460c      	mov	r4, r1
 80076de:	2001      	movs	r0, #1
 80076e0:	e7a5      	b.n	800762e <_vfiprintf_r+0x11a>
 80076e2:	2300      	movs	r3, #0
 80076e4:	3401      	adds	r4, #1
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	4619      	mov	r1, r3
 80076ea:	f04f 0c0a 	mov.w	ip, #10
 80076ee:	4620      	mov	r0, r4
 80076f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f4:	3a30      	subs	r2, #48	; 0x30
 80076f6:	2a09      	cmp	r2, #9
 80076f8:	d903      	bls.n	8007702 <_vfiprintf_r+0x1ee>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0c5      	beq.n	800768a <_vfiprintf_r+0x176>
 80076fe:	9105      	str	r1, [sp, #20]
 8007700:	e7c3      	b.n	800768a <_vfiprintf_r+0x176>
 8007702:	fb0c 2101 	mla	r1, ip, r1, r2
 8007706:	4604      	mov	r4, r0
 8007708:	2301      	movs	r3, #1
 800770a:	e7f0      	b.n	80076ee <_vfiprintf_r+0x1da>
 800770c:	ab03      	add	r3, sp, #12
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	462a      	mov	r2, r5
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <_vfiprintf_r+0x258>)
 8007714:	a904      	add	r1, sp, #16
 8007716:	4630      	mov	r0, r6
 8007718:	f3af 8000 	nop.w
 800771c:	4607      	mov	r7, r0
 800771e:	1c78      	adds	r0, r7, #1
 8007720:	d1d6      	bne.n	80076d0 <_vfiprintf_r+0x1bc>
 8007722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007724:	07d9      	lsls	r1, r3, #31
 8007726:	d405      	bmi.n	8007734 <_vfiprintf_r+0x220>
 8007728:	89ab      	ldrh	r3, [r5, #12]
 800772a:	059a      	lsls	r2, r3, #22
 800772c:	d402      	bmi.n	8007734 <_vfiprintf_r+0x220>
 800772e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007730:	f7ff fbf6 	bl	8006f20 <__retarget_lock_release_recursive>
 8007734:	89ab      	ldrh	r3, [r5, #12]
 8007736:	065b      	lsls	r3, r3, #25
 8007738:	f53f af12 	bmi.w	8007560 <_vfiprintf_r+0x4c>
 800773c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800773e:	e711      	b.n	8007564 <_vfiprintf_r+0x50>
 8007740:	ab03      	add	r3, sp, #12
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	462a      	mov	r2, r5
 8007746:	4b09      	ldr	r3, [pc, #36]	; (800776c <_vfiprintf_r+0x258>)
 8007748:	a904      	add	r1, sp, #16
 800774a:	4630      	mov	r0, r6
 800774c:	f000 f880 	bl	8007850 <_printf_i>
 8007750:	e7e4      	b.n	800771c <_vfiprintf_r+0x208>
 8007752:	bf00      	nop
 8007754:	08007e60 	.word	0x08007e60
 8007758:	08007e80 	.word	0x08007e80
 800775c:	08007e40 	.word	0x08007e40
 8007760:	08007ea4 	.word	0x08007ea4
 8007764:	08007eae 	.word	0x08007eae
 8007768:	00000000 	.word	0x00000000
 800776c:	080074ef 	.word	0x080074ef
 8007770:	08007eaa 	.word	0x08007eaa

08007774 <_printf_common>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	4616      	mov	r6, r2
 800777a:	4699      	mov	r9, r3
 800777c:	688a      	ldr	r2, [r1, #8]
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007784:	4293      	cmp	r3, r2
 8007786:	bfb8      	it	lt
 8007788:	4613      	movlt	r3, r2
 800778a:	6033      	str	r3, [r6, #0]
 800778c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007790:	4607      	mov	r7, r0
 8007792:	460c      	mov	r4, r1
 8007794:	b10a      	cbz	r2, 800779a <_printf_common+0x26>
 8007796:	3301      	adds	r3, #1
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	0699      	lsls	r1, r3, #26
 800779e:	bf42      	ittt	mi
 80077a0:	6833      	ldrmi	r3, [r6, #0]
 80077a2:	3302      	addmi	r3, #2
 80077a4:	6033      	strmi	r3, [r6, #0]
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	f015 0506 	ands.w	r5, r5, #6
 80077ac:	d106      	bne.n	80077bc <_printf_common+0x48>
 80077ae:	f104 0a19 	add.w	sl, r4, #25
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	6832      	ldr	r2, [r6, #0]
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dc26      	bgt.n	800780a <_printf_common+0x96>
 80077bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c0:	1e13      	subs	r3, r2, #0
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	bf18      	it	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	0692      	lsls	r2, r2, #26
 80077ca:	d42b      	bmi.n	8007824 <_printf_common+0xb0>
 80077cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d0:	4649      	mov	r1, r9
 80077d2:	4638      	mov	r0, r7
 80077d4:	47c0      	blx	r8
 80077d6:	3001      	adds	r0, #1
 80077d8:	d01e      	beq.n	8007818 <_printf_common+0xa4>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	68e5      	ldr	r5, [r4, #12]
 80077de:	6832      	ldr	r2, [r6, #0]
 80077e0:	f003 0306 	and.w	r3, r3, #6
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	bf08      	it	eq
 80077e8:	1aad      	subeq	r5, r5, r2
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	6922      	ldr	r2, [r4, #16]
 80077ee:	bf0c      	ite	eq
 80077f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f4:	2500      	movne	r5, #0
 80077f6:	4293      	cmp	r3, r2
 80077f8:	bfc4      	itt	gt
 80077fa:	1a9b      	subgt	r3, r3, r2
 80077fc:	18ed      	addgt	r5, r5, r3
 80077fe:	2600      	movs	r6, #0
 8007800:	341a      	adds	r4, #26
 8007802:	42b5      	cmp	r5, r6
 8007804:	d11a      	bne.n	800783c <_printf_common+0xc8>
 8007806:	2000      	movs	r0, #0
 8007808:	e008      	b.n	800781c <_printf_common+0xa8>
 800780a:	2301      	movs	r3, #1
 800780c:	4652      	mov	r2, sl
 800780e:	4649      	mov	r1, r9
 8007810:	4638      	mov	r0, r7
 8007812:	47c0      	blx	r8
 8007814:	3001      	adds	r0, #1
 8007816:	d103      	bne.n	8007820 <_printf_common+0xac>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007820:	3501      	adds	r5, #1
 8007822:	e7c6      	b.n	80077b2 <_printf_common+0x3e>
 8007824:	18e1      	adds	r1, r4, r3
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	2030      	movs	r0, #48	; 0x30
 800782a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800782e:	4422      	add	r2, r4
 8007830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007838:	3302      	adds	r3, #2
 800783a:	e7c7      	b.n	80077cc <_printf_common+0x58>
 800783c:	2301      	movs	r3, #1
 800783e:	4622      	mov	r2, r4
 8007840:	4649      	mov	r1, r9
 8007842:	4638      	mov	r0, r7
 8007844:	47c0      	blx	r8
 8007846:	3001      	adds	r0, #1
 8007848:	d0e6      	beq.n	8007818 <_printf_common+0xa4>
 800784a:	3601      	adds	r6, #1
 800784c:	e7d9      	b.n	8007802 <_printf_common+0x8e>
	...

08007850 <_printf_i>:
 8007850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007854:	7e0f      	ldrb	r7, [r1, #24]
 8007856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007858:	2f78      	cmp	r7, #120	; 0x78
 800785a:	4691      	mov	r9, r2
 800785c:	4680      	mov	r8, r0
 800785e:	460c      	mov	r4, r1
 8007860:	469a      	mov	sl, r3
 8007862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007866:	d807      	bhi.n	8007878 <_printf_i+0x28>
 8007868:	2f62      	cmp	r7, #98	; 0x62
 800786a:	d80a      	bhi.n	8007882 <_printf_i+0x32>
 800786c:	2f00      	cmp	r7, #0
 800786e:	f000 80d8 	beq.w	8007a22 <_printf_i+0x1d2>
 8007872:	2f58      	cmp	r7, #88	; 0x58
 8007874:	f000 80a3 	beq.w	80079be <_printf_i+0x16e>
 8007878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800787c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007880:	e03a      	b.n	80078f8 <_printf_i+0xa8>
 8007882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007886:	2b15      	cmp	r3, #21
 8007888:	d8f6      	bhi.n	8007878 <_printf_i+0x28>
 800788a:	a101      	add	r1, pc, #4	; (adr r1, 8007890 <_printf_i+0x40>)
 800788c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007890:	080078e9 	.word	0x080078e9
 8007894:	080078fd 	.word	0x080078fd
 8007898:	08007879 	.word	0x08007879
 800789c:	08007879 	.word	0x08007879
 80078a0:	08007879 	.word	0x08007879
 80078a4:	08007879 	.word	0x08007879
 80078a8:	080078fd 	.word	0x080078fd
 80078ac:	08007879 	.word	0x08007879
 80078b0:	08007879 	.word	0x08007879
 80078b4:	08007879 	.word	0x08007879
 80078b8:	08007879 	.word	0x08007879
 80078bc:	08007a09 	.word	0x08007a09
 80078c0:	0800792d 	.word	0x0800792d
 80078c4:	080079eb 	.word	0x080079eb
 80078c8:	08007879 	.word	0x08007879
 80078cc:	08007879 	.word	0x08007879
 80078d0:	08007a2b 	.word	0x08007a2b
 80078d4:	08007879 	.word	0x08007879
 80078d8:	0800792d 	.word	0x0800792d
 80078dc:	08007879 	.word	0x08007879
 80078e0:	08007879 	.word	0x08007879
 80078e4:	080079f3 	.word	0x080079f3
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	1d1a      	adds	r2, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	602a      	str	r2, [r5, #0]
 80078f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0a3      	b.n	8007a44 <_printf_i+0x1f4>
 80078fc:	6820      	ldr	r0, [r4, #0]
 80078fe:	6829      	ldr	r1, [r5, #0]
 8007900:	0606      	lsls	r6, r0, #24
 8007902:	f101 0304 	add.w	r3, r1, #4
 8007906:	d50a      	bpl.n	800791e <_printf_i+0xce>
 8007908:	680e      	ldr	r6, [r1, #0]
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	2e00      	cmp	r6, #0
 800790e:	da03      	bge.n	8007918 <_printf_i+0xc8>
 8007910:	232d      	movs	r3, #45	; 0x2d
 8007912:	4276      	negs	r6, r6
 8007914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007918:	485e      	ldr	r0, [pc, #376]	; (8007a94 <_printf_i+0x244>)
 800791a:	230a      	movs	r3, #10
 800791c:	e019      	b.n	8007952 <_printf_i+0x102>
 800791e:	680e      	ldr	r6, [r1, #0]
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007926:	bf18      	it	ne
 8007928:	b236      	sxthne	r6, r6
 800792a:	e7ef      	b.n	800790c <_printf_i+0xbc>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	6820      	ldr	r0, [r4, #0]
 8007930:	1d19      	adds	r1, r3, #4
 8007932:	6029      	str	r1, [r5, #0]
 8007934:	0601      	lsls	r1, r0, #24
 8007936:	d501      	bpl.n	800793c <_printf_i+0xec>
 8007938:	681e      	ldr	r6, [r3, #0]
 800793a:	e002      	b.n	8007942 <_printf_i+0xf2>
 800793c:	0646      	lsls	r6, r0, #25
 800793e:	d5fb      	bpl.n	8007938 <_printf_i+0xe8>
 8007940:	881e      	ldrh	r6, [r3, #0]
 8007942:	4854      	ldr	r0, [pc, #336]	; (8007a94 <_printf_i+0x244>)
 8007944:	2f6f      	cmp	r7, #111	; 0x6f
 8007946:	bf0c      	ite	eq
 8007948:	2308      	moveq	r3, #8
 800794a:	230a      	movne	r3, #10
 800794c:	2100      	movs	r1, #0
 800794e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007952:	6865      	ldr	r5, [r4, #4]
 8007954:	60a5      	str	r5, [r4, #8]
 8007956:	2d00      	cmp	r5, #0
 8007958:	bfa2      	ittt	ge
 800795a:	6821      	ldrge	r1, [r4, #0]
 800795c:	f021 0104 	bicge.w	r1, r1, #4
 8007960:	6021      	strge	r1, [r4, #0]
 8007962:	b90e      	cbnz	r6, 8007968 <_printf_i+0x118>
 8007964:	2d00      	cmp	r5, #0
 8007966:	d04d      	beq.n	8007a04 <_printf_i+0x1b4>
 8007968:	4615      	mov	r5, r2
 800796a:	fbb6 f1f3 	udiv	r1, r6, r3
 800796e:	fb03 6711 	mls	r7, r3, r1, r6
 8007972:	5dc7      	ldrb	r7, [r0, r7]
 8007974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007978:	4637      	mov	r7, r6
 800797a:	42bb      	cmp	r3, r7
 800797c:	460e      	mov	r6, r1
 800797e:	d9f4      	bls.n	800796a <_printf_i+0x11a>
 8007980:	2b08      	cmp	r3, #8
 8007982:	d10b      	bne.n	800799c <_printf_i+0x14c>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	07de      	lsls	r6, r3, #31
 8007988:	d508      	bpl.n	800799c <_printf_i+0x14c>
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	6861      	ldr	r1, [r4, #4]
 800798e:	4299      	cmp	r1, r3
 8007990:	bfde      	ittt	le
 8007992:	2330      	movle	r3, #48	; 0x30
 8007994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800799c:	1b52      	subs	r2, r2, r5
 800799e:	6122      	str	r2, [r4, #16]
 80079a0:	f8cd a000 	str.w	sl, [sp]
 80079a4:	464b      	mov	r3, r9
 80079a6:	aa03      	add	r2, sp, #12
 80079a8:	4621      	mov	r1, r4
 80079aa:	4640      	mov	r0, r8
 80079ac:	f7ff fee2 	bl	8007774 <_printf_common>
 80079b0:	3001      	adds	r0, #1
 80079b2:	d14c      	bne.n	8007a4e <_printf_i+0x1fe>
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	b004      	add	sp, #16
 80079ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079be:	4835      	ldr	r0, [pc, #212]	; (8007a94 <_printf_i+0x244>)
 80079c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079c4:	6829      	ldr	r1, [r5, #0]
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80079cc:	6029      	str	r1, [r5, #0]
 80079ce:	061d      	lsls	r5, r3, #24
 80079d0:	d514      	bpl.n	80079fc <_printf_i+0x1ac>
 80079d2:	07df      	lsls	r7, r3, #31
 80079d4:	bf44      	itt	mi
 80079d6:	f043 0320 	orrmi.w	r3, r3, #32
 80079da:	6023      	strmi	r3, [r4, #0]
 80079dc:	b91e      	cbnz	r6, 80079e6 <_printf_i+0x196>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	f023 0320 	bic.w	r3, r3, #32
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	2310      	movs	r3, #16
 80079e8:	e7b0      	b.n	800794c <_printf_i+0xfc>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	f043 0320 	orr.w	r3, r3, #32
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	2378      	movs	r3, #120	; 0x78
 80079f4:	4828      	ldr	r0, [pc, #160]	; (8007a98 <_printf_i+0x248>)
 80079f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079fa:	e7e3      	b.n	80079c4 <_printf_i+0x174>
 80079fc:	0659      	lsls	r1, r3, #25
 80079fe:	bf48      	it	mi
 8007a00:	b2b6      	uxthmi	r6, r6
 8007a02:	e7e6      	b.n	80079d2 <_printf_i+0x182>
 8007a04:	4615      	mov	r5, r2
 8007a06:	e7bb      	b.n	8007980 <_printf_i+0x130>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	6826      	ldr	r6, [r4, #0]
 8007a0c:	6961      	ldr	r1, [r4, #20]
 8007a0e:	1d18      	adds	r0, r3, #4
 8007a10:	6028      	str	r0, [r5, #0]
 8007a12:	0635      	lsls	r5, r6, #24
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	d501      	bpl.n	8007a1c <_printf_i+0x1cc>
 8007a18:	6019      	str	r1, [r3, #0]
 8007a1a:	e002      	b.n	8007a22 <_printf_i+0x1d2>
 8007a1c:	0670      	lsls	r0, r6, #25
 8007a1e:	d5fb      	bpl.n	8007a18 <_printf_i+0x1c8>
 8007a20:	8019      	strh	r1, [r3, #0]
 8007a22:	2300      	movs	r3, #0
 8007a24:	6123      	str	r3, [r4, #16]
 8007a26:	4615      	mov	r5, r2
 8007a28:	e7ba      	b.n	80079a0 <_printf_i+0x150>
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	1d1a      	adds	r2, r3, #4
 8007a2e:	602a      	str	r2, [r5, #0]
 8007a30:	681d      	ldr	r5, [r3, #0]
 8007a32:	6862      	ldr	r2, [r4, #4]
 8007a34:	2100      	movs	r1, #0
 8007a36:	4628      	mov	r0, r5
 8007a38:	f7f8 fbda 	bl	80001f0 <memchr>
 8007a3c:	b108      	cbz	r0, 8007a42 <_printf_i+0x1f2>
 8007a3e:	1b40      	subs	r0, r0, r5
 8007a40:	6060      	str	r0, [r4, #4]
 8007a42:	6863      	ldr	r3, [r4, #4]
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	2300      	movs	r3, #0
 8007a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a4c:	e7a8      	b.n	80079a0 <_printf_i+0x150>
 8007a4e:	6923      	ldr	r3, [r4, #16]
 8007a50:	462a      	mov	r2, r5
 8007a52:	4649      	mov	r1, r9
 8007a54:	4640      	mov	r0, r8
 8007a56:	47d0      	blx	sl
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d0ab      	beq.n	80079b4 <_printf_i+0x164>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	079b      	lsls	r3, r3, #30
 8007a60:	d413      	bmi.n	8007a8a <_printf_i+0x23a>
 8007a62:	68e0      	ldr	r0, [r4, #12]
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	4298      	cmp	r0, r3
 8007a68:	bfb8      	it	lt
 8007a6a:	4618      	movlt	r0, r3
 8007a6c:	e7a4      	b.n	80079b8 <_printf_i+0x168>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4632      	mov	r2, r6
 8007a72:	4649      	mov	r1, r9
 8007a74:	4640      	mov	r0, r8
 8007a76:	47d0      	blx	sl
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d09b      	beq.n	80079b4 <_printf_i+0x164>
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	9903      	ldr	r1, [sp, #12]
 8007a82:	1a5b      	subs	r3, r3, r1
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	dcf2      	bgt.n	8007a6e <_printf_i+0x21e>
 8007a88:	e7eb      	b.n	8007a62 <_printf_i+0x212>
 8007a8a:	2500      	movs	r5, #0
 8007a8c:	f104 0619 	add.w	r6, r4, #25
 8007a90:	e7f5      	b.n	8007a7e <_printf_i+0x22e>
 8007a92:	bf00      	nop
 8007a94:	08007eb5 	.word	0x08007eb5
 8007a98:	08007ec6 	.word	0x08007ec6

08007a9c <_read_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d07      	ldr	r5, [pc, #28]	; (8007abc <_read_r+0x20>)
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	602a      	str	r2, [r5, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f7f9 fa00 	bl	8000eb0 <_read>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_read_r+0x1e>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_read_r+0x1e>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20002eac 	.word	0x20002eac

08007ac0 <__swbuf_r>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	460e      	mov	r6, r1
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b118      	cbz	r0, 8007ad2 <__swbuf_r+0x12>
 8007aca:	6983      	ldr	r3, [r0, #24]
 8007acc:	b90b      	cbnz	r3, 8007ad2 <__swbuf_r+0x12>
 8007ace:	f7ff f963 	bl	8006d98 <__sinit>
 8007ad2:	4b21      	ldr	r3, [pc, #132]	; (8007b58 <__swbuf_r+0x98>)
 8007ad4:	429c      	cmp	r4, r3
 8007ad6:	d12b      	bne.n	8007b30 <__swbuf_r+0x70>
 8007ad8:	686c      	ldr	r4, [r5, #4]
 8007ada:	69a3      	ldr	r3, [r4, #24]
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	071a      	lsls	r2, r3, #28
 8007ae2:	d52f      	bpl.n	8007b44 <__swbuf_r+0x84>
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b36b      	cbz	r3, 8007b44 <__swbuf_r+0x84>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	1ac0      	subs	r0, r0, r3
 8007aee:	6963      	ldr	r3, [r4, #20]
 8007af0:	b2f6      	uxtb	r6, r6
 8007af2:	4283      	cmp	r3, r0
 8007af4:	4637      	mov	r7, r6
 8007af6:	dc04      	bgt.n	8007b02 <__swbuf_r+0x42>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4628      	mov	r0, r5
 8007afc:	f7ff fc86 	bl	800740c <_fflush_r>
 8007b00:	bb30      	cbnz	r0, 8007b50 <__swbuf_r+0x90>
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	60a3      	str	r3, [r4, #8]
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	701e      	strb	r6, [r3, #0]
 8007b10:	6963      	ldr	r3, [r4, #20]
 8007b12:	3001      	adds	r0, #1
 8007b14:	4283      	cmp	r3, r0
 8007b16:	d004      	beq.n	8007b22 <__swbuf_r+0x62>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	07db      	lsls	r3, r3, #31
 8007b1c:	d506      	bpl.n	8007b2c <__swbuf_r+0x6c>
 8007b1e:	2e0a      	cmp	r6, #10
 8007b20:	d104      	bne.n	8007b2c <__swbuf_r+0x6c>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f7ff fc71 	bl	800740c <_fflush_r>
 8007b2a:	b988      	cbnz	r0, 8007b50 <__swbuf_r+0x90>
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <__swbuf_r+0x9c>)
 8007b32:	429c      	cmp	r4, r3
 8007b34:	d101      	bne.n	8007b3a <__swbuf_r+0x7a>
 8007b36:	68ac      	ldr	r4, [r5, #8]
 8007b38:	e7cf      	b.n	8007ada <__swbuf_r+0x1a>
 8007b3a:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <__swbuf_r+0xa0>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	bf08      	it	eq
 8007b40:	68ec      	ldreq	r4, [r5, #12]
 8007b42:	e7ca      	b.n	8007ada <__swbuf_r+0x1a>
 8007b44:	4621      	mov	r1, r4
 8007b46:	4628      	mov	r0, r5
 8007b48:	f000 f80c 	bl	8007b64 <__swsetup_r>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d0cb      	beq.n	8007ae8 <__swbuf_r+0x28>
 8007b50:	f04f 37ff 	mov.w	r7, #4294967295
 8007b54:	e7ea      	b.n	8007b2c <__swbuf_r+0x6c>
 8007b56:	bf00      	nop
 8007b58:	08007e60 	.word	0x08007e60
 8007b5c:	08007e80 	.word	0x08007e80
 8007b60:	08007e40 	.word	0x08007e40

08007b64 <__swsetup_r>:
 8007b64:	4b32      	ldr	r3, [pc, #200]	; (8007c30 <__swsetup_r+0xcc>)
 8007b66:	b570      	push	{r4, r5, r6, lr}
 8007b68:	681d      	ldr	r5, [r3, #0]
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b125      	cbz	r5, 8007b7a <__swsetup_r+0x16>
 8007b70:	69ab      	ldr	r3, [r5, #24]
 8007b72:	b913      	cbnz	r3, 8007b7a <__swsetup_r+0x16>
 8007b74:	4628      	mov	r0, r5
 8007b76:	f7ff f90f 	bl	8006d98 <__sinit>
 8007b7a:	4b2e      	ldr	r3, [pc, #184]	; (8007c34 <__swsetup_r+0xd0>)
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	d10f      	bne.n	8007ba0 <__swsetup_r+0x3c>
 8007b80:	686c      	ldr	r4, [r5, #4]
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	d42c      	bmi.n	8007be6 <__swsetup_r+0x82>
 8007b8c:	06dd      	lsls	r5, r3, #27
 8007b8e:	d411      	bmi.n	8007bb4 <__swsetup_r+0x50>
 8007b90:	2309      	movs	r3, #9
 8007b92:	6033      	str	r3, [r6, #0]
 8007b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9e:	e03e      	b.n	8007c1e <__swsetup_r+0xba>
 8007ba0:	4b25      	ldr	r3, [pc, #148]	; (8007c38 <__swsetup_r+0xd4>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d101      	bne.n	8007baa <__swsetup_r+0x46>
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	e7eb      	b.n	8007b82 <__swsetup_r+0x1e>
 8007baa:	4b24      	ldr	r3, [pc, #144]	; (8007c3c <__swsetup_r+0xd8>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	bf08      	it	eq
 8007bb0:	68ec      	ldreq	r4, [r5, #12]
 8007bb2:	e7e6      	b.n	8007b82 <__swsetup_r+0x1e>
 8007bb4:	0758      	lsls	r0, r3, #29
 8007bb6:	d512      	bpl.n	8007bde <__swsetup_r+0x7a>
 8007bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bba:	b141      	cbz	r1, 8007bce <__swsetup_r+0x6a>
 8007bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bc0:	4299      	cmp	r1, r3
 8007bc2:	d002      	beq.n	8007bca <__swsetup_r+0x66>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff f9c3 	bl	8006f50 <_free_r>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	f043 0308 	orr.w	r3, r3, #8
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	b94b      	cbnz	r3, 8007bfe <__swsetup_r+0x9a>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf4:	d003      	beq.n	8007bfe <__swsetup_r+0x9a>
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 f847 	bl	8007c8c <__smakebuf_r>
 8007bfe:	89a0      	ldrh	r0, [r4, #12]
 8007c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c04:	f010 0301 	ands.w	r3, r0, #1
 8007c08:	d00a      	beq.n	8007c20 <__swsetup_r+0xbc>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	6963      	ldr	r3, [r4, #20]
 8007c10:	425b      	negs	r3, r3
 8007c12:	61a3      	str	r3, [r4, #24]
 8007c14:	6923      	ldr	r3, [r4, #16]
 8007c16:	b943      	cbnz	r3, 8007c2a <__swsetup_r+0xc6>
 8007c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c1c:	d1ba      	bne.n	8007b94 <__swsetup_r+0x30>
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	0781      	lsls	r1, r0, #30
 8007c22:	bf58      	it	pl
 8007c24:	6963      	ldrpl	r3, [r4, #20]
 8007c26:	60a3      	str	r3, [r4, #8]
 8007c28:	e7f4      	b.n	8007c14 <__swsetup_r+0xb0>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e7f7      	b.n	8007c1e <__swsetup_r+0xba>
 8007c2e:	bf00      	nop
 8007c30:	20000010 	.word	0x20000010
 8007c34:	08007e60 	.word	0x08007e60
 8007c38:	08007e80 	.word	0x08007e80
 8007c3c:	08007e40 	.word	0x08007e40

08007c40 <__swhatbuf_r>:
 8007c40:	b570      	push	{r4, r5, r6, lr}
 8007c42:	460e      	mov	r6, r1
 8007c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	b096      	sub	sp, #88	; 0x58
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	461d      	mov	r5, r3
 8007c50:	da08      	bge.n	8007c64 <__swhatbuf_r+0x24>
 8007c52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	602a      	str	r2, [r5, #0]
 8007c5a:	061a      	lsls	r2, r3, #24
 8007c5c:	d410      	bmi.n	8007c80 <__swhatbuf_r+0x40>
 8007c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c62:	e00e      	b.n	8007c82 <__swhatbuf_r+0x42>
 8007c64:	466a      	mov	r2, sp
 8007c66:	f000 f851 	bl	8007d0c <_fstat_r>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	dbf1      	blt.n	8007c52 <__swhatbuf_r+0x12>
 8007c6e:	9a01      	ldr	r2, [sp, #4]
 8007c70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c78:	425a      	negs	r2, r3
 8007c7a:	415a      	adcs	r2, r3
 8007c7c:	602a      	str	r2, [r5, #0]
 8007c7e:	e7ee      	b.n	8007c5e <__swhatbuf_r+0x1e>
 8007c80:	2340      	movs	r3, #64	; 0x40
 8007c82:	2000      	movs	r0, #0
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	b016      	add	sp, #88	; 0x58
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c8c <__smakebuf_r>:
 8007c8c:	898b      	ldrh	r3, [r1, #12]
 8007c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c90:	079d      	lsls	r5, r3, #30
 8007c92:	4606      	mov	r6, r0
 8007c94:	460c      	mov	r4, r1
 8007c96:	d507      	bpl.n	8007ca8 <__smakebuf_r+0x1c>
 8007c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c9c:	6023      	str	r3, [r4, #0]
 8007c9e:	6123      	str	r3, [r4, #16]
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	6163      	str	r3, [r4, #20]
 8007ca4:	b002      	add	sp, #8
 8007ca6:	bd70      	pop	{r4, r5, r6, pc}
 8007ca8:	ab01      	add	r3, sp, #4
 8007caa:	466a      	mov	r2, sp
 8007cac:	f7ff ffc8 	bl	8007c40 <__swhatbuf_r>
 8007cb0:	9900      	ldr	r1, [sp, #0]
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f7ff f9b7 	bl	8007028 <_malloc_r>
 8007cba:	b948      	cbnz	r0, 8007cd0 <__smakebuf_r+0x44>
 8007cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc0:	059a      	lsls	r2, r3, #22
 8007cc2:	d4ef      	bmi.n	8007ca4 <__smakebuf_r+0x18>
 8007cc4:	f023 0303 	bic.w	r3, r3, #3
 8007cc8:	f043 0302 	orr.w	r3, r3, #2
 8007ccc:	81a3      	strh	r3, [r4, #12]
 8007cce:	e7e3      	b.n	8007c98 <__smakebuf_r+0xc>
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <__smakebuf_r+0x7c>)
 8007cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cd4:	89a3      	ldrh	r3, [r4, #12]
 8007cd6:	6020      	str	r0, [r4, #0]
 8007cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	9b00      	ldr	r3, [sp, #0]
 8007ce0:	6163      	str	r3, [r4, #20]
 8007ce2:	9b01      	ldr	r3, [sp, #4]
 8007ce4:	6120      	str	r0, [r4, #16]
 8007ce6:	b15b      	cbz	r3, 8007d00 <__smakebuf_r+0x74>
 8007ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cec:	4630      	mov	r0, r6
 8007cee:	f000 f81f 	bl	8007d30 <_isatty_r>
 8007cf2:	b128      	cbz	r0, 8007d00 <__smakebuf_r+0x74>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f023 0303 	bic.w	r3, r3, #3
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	81a3      	strh	r3, [r4, #12]
 8007d00:	89a0      	ldrh	r0, [r4, #12]
 8007d02:	4305      	orrs	r5, r0
 8007d04:	81a5      	strh	r5, [r4, #12]
 8007d06:	e7cd      	b.n	8007ca4 <__smakebuf_r+0x18>
 8007d08:	08006d31 	.word	0x08006d31

08007d0c <_fstat_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4d07      	ldr	r5, [pc, #28]	; (8007d2c <_fstat_r+0x20>)
 8007d10:	2300      	movs	r3, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	4608      	mov	r0, r1
 8007d16:	4611      	mov	r1, r2
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	f7f9 f90e 	bl	8000f3a <_fstat>
 8007d1e:	1c43      	adds	r3, r0, #1
 8007d20:	d102      	bne.n	8007d28 <_fstat_r+0x1c>
 8007d22:	682b      	ldr	r3, [r5, #0]
 8007d24:	b103      	cbz	r3, 8007d28 <_fstat_r+0x1c>
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	bd38      	pop	{r3, r4, r5, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20002eac 	.word	0x20002eac

08007d30 <_isatty_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d06      	ldr	r5, [pc, #24]	; (8007d4c <_isatty_r+0x1c>)
 8007d34:	2300      	movs	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7f9 f90d 	bl	8000f5a <_isatty>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_isatty_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_isatty_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	20002eac 	.word	0x20002eac

08007d50 <_init>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr

08007d5c <_fini>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr
