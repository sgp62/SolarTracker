
SolarTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006cc0  08006cc0  00016cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc8  08006dc8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd0  08006dd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e30  20000074  08006e4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ea4  08006e4c  00022ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001adeb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fd  00000000  00000000  0003ae8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  0003f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f6e  00000000  00000000  00040d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001886d  00000000  00000000  00044ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e3c  00000000  00000000  0005d513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013434f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb0  00000000  00000000  001343a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ca8 	.word	0x08006ca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006ca8 	.word	0x08006ca8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <vApplicationGetIdleTaskMemory+0x2c>)
 80004f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <vApplicationGetIdleTaskMemory+0x30>)
 80004fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000090 	.word	0x20000090
 8000518:	20000144 	.word	0x20000144

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b5b0      	push	{r4, r5, r7, lr}
 800051e:	b092      	sub	sp, #72	; 0x48
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fc86 	bl	8000e32 <HAL_Init>
  /* USER CODE BEGIN Init */
//  BSP_LED_Init(LED3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f925 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f9dd 	bl	80008e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800052e:	f000 f9ab 	bl	8000888 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000532:	f000 f965 	bl	8000800 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 7, 6);
 8000536:	2206      	movs	r2, #6
 8000538:	2107      	movs	r1, #7
 800053a:	2025      	movs	r0, #37	; 0x25
 800053c:	f000 fd6a 	bl	8001014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 8000540:	2025      	movs	r0, #37	; 0x25
 8000542:	f000 fd83 	bl	800104c <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 8000546:	4b7b      	ldr	r3, [pc, #492]	; (8000734 <main+0x218>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a7a      	ldr	r2, [pc, #488]	; (8000734 <main+0x218>)
 800054c:	f043 0320 	orr.w	r3, r3, #32
 8000550:	6013      	str	r3, [r2, #0]

  //SPI Initialization **************************
  //Write CS Pin high
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2110      	movs	r1, #16
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f000 feef 	bl	800133c <HAL_GPIO_WritePin>

  // Enable write enable latch (allow write operations)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2110      	movs	r1, #16
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f000 fee9 	bl	800133c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&WREN, 1, 100);
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	2201      	movs	r2, #1
 800056e:	4972      	ldr	r1, [pc, #456]	; (8000738 <main+0x21c>)
 8000570:	4872      	ldr	r0, [pc, #456]	; (800073c <main+0x220>)
 8000572:	f002 f954 	bl	800281e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2110      	movs	r1, #16
 800057a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057e:	f000 fedd 	bl	800133c <HAL_GPIO_WritePin>

  //while(1){

	  // Test bytes to write to EEPROM
	  spi_mout_buf[0] = 0xAB;
 8000582:	4b6f      	ldr	r3, [pc, #444]	; (8000740 <main+0x224>)
 8000584:	22ab      	movs	r2, #171	; 0xab
 8000586:	701a      	strb	r2, [r3, #0]
	  spi_mout_buf[1] = 0xCD;
 8000588:	4b6d      	ldr	r3, [pc, #436]	; (8000740 <main+0x224>)
 800058a:	22cd      	movs	r2, #205	; 0xcd
 800058c:	705a      	strb	r2, [r3, #1]
	  spi_mout_buf[2] = 0xEF;
 800058e:	4b6c      	ldr	r3, [pc, #432]	; (8000740 <main+0x224>)
 8000590:	22ef      	movs	r2, #239	; 0xef
 8000592:	709a      	strb	r2, [r3, #2]

	  // Set starting address
	  spi_addr = 0x05;
 8000594:	4b6b      	ldr	r3, [pc, #428]	; (8000744 <main+0x228>)
 8000596:	2205      	movs	r2, #5
 8000598:	701a      	strb	r2, [r3, #0]

	  // Write 3 bytes starting at given address
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2110      	movs	r1, #16
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f000 fecb 	bl	800133c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&WRITE, 1, 100);
 80005a6:	2364      	movs	r3, #100	; 0x64
 80005a8:	2201      	movs	r2, #1
 80005aa:	4967      	ldr	r1, [pc, #412]	; (8000748 <main+0x22c>)
 80005ac:	4863      	ldr	r0, [pc, #396]	; (800073c <main+0x220>)
 80005ae:	f002 f936 	bl	800281e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 1, 100);
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	2201      	movs	r2, #1
 80005b6:	4963      	ldr	r1, [pc, #396]	; (8000744 <main+0x228>)
 80005b8:	4860      	ldr	r0, [pc, #384]	; (800073c <main+0x220>)
 80005ba:	f002 f930 	bl	800281e <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_mout_buf, 3, 100);
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	2203      	movs	r2, #3
 80005c2:	495f      	ldr	r1, [pc, #380]	; (8000740 <main+0x224>)
 80005c4:	485d      	ldr	r0, [pc, #372]	; (800073c <main+0x220>)
 80005c6:	f002 f92a 	bl	800281e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2110      	movs	r1, #16
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f000 feb3 	bl	800133c <HAL_GPIO_WritePin>

	  // Clear buffer
	  spi_mout_buf[0] = 0;
 80005d6:	4b5a      	ldr	r3, [pc, #360]	; (8000740 <main+0x224>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	  spi_mout_buf[1] = 0;
 80005dc:	4b58      	ldr	r3, [pc, #352]	; (8000740 <main+0x224>)
 80005de:	2200      	movs	r2, #0
 80005e0:	705a      	strb	r2, [r3, #1]
	  spi_mout_buf[2] = 0;
 80005e2:	4b57      	ldr	r3, [pc, #348]	; (8000740 <main+0x224>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	709a      	strb	r2, [r3, #2]

	  // Wait until WIP bit is cleared
	   spi_wip = 1;
 80005e8:	4b58      	ldr	r3, [pc, #352]	; (800074c <main+0x230>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
	   while (spi_wip)
 80005ee:	e01e      	b.n	800062e <main+0x112>
	   {
		 // Read status register
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f000 fea0 	bl	800133c <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	2201      	movs	r2, #1
 8000600:	4953      	ldr	r1, [pc, #332]	; (8000750 <main+0x234>)
 8000602:	484e      	ldr	r0, [pc, #312]	; (800073c <main+0x220>)
 8000604:	f002 f90b 	bl	800281e <HAL_SPI_Transmit>
		 HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 1, 100);
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	2201      	movs	r2, #1
 800060c:	494c      	ldr	r1, [pc, #304]	; (8000740 <main+0x224>)
 800060e:	484b      	ldr	r0, [pc, #300]	; (800073c <main+0x220>)
 8000610:	f002 fa73 	bl	8002afa <HAL_SPI_Receive>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f000 fe8e 	bl	800133c <HAL_GPIO_WritePin>

		 // Mask out WIP bit
		 spi_wip = spi_mout_buf[0] & 0b00000001;
 8000620:	4b47      	ldr	r3, [pc, #284]	; (8000740 <main+0x224>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b48      	ldr	r3, [pc, #288]	; (800074c <main+0x230>)
 800062c:	701a      	strb	r2, [r3, #0]
	   while (spi_wip)
 800062e:	4b47      	ldr	r3, [pc, #284]	; (800074c <main+0x230>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1dc      	bne.n	80005f0 <main+0xd4>
	   }

	   // Read the 3 bytes back
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063e:	f000 fe7d 	bl	800133c <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, (uint8_t *)&READ, 1, 100);
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	2201      	movs	r2, #1
 8000646:	4943      	ldr	r1, [pc, #268]	; (8000754 <main+0x238>)
 8000648:	483c      	ldr	r0, [pc, #240]	; (800073c <main+0x220>)
 800064a:	f002 f8e8 	bl	800281e <HAL_SPI_Transmit>
	   HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_addr, 1, 100);
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	2201      	movs	r2, #1
 8000652:	493c      	ldr	r1, [pc, #240]	; (8000744 <main+0x228>)
 8000654:	4839      	ldr	r0, [pc, #228]	; (800073c <main+0x220>)
 8000656:	f002 f8e2 	bl	800281e <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 3, 100);
 800065a:	2364      	movs	r3, #100	; 0x64
 800065c:	2203      	movs	r2, #3
 800065e:	4938      	ldr	r1, [pc, #224]	; (8000740 <main+0x224>)
 8000660:	4836      	ldr	r0, [pc, #216]	; (800073c <main+0x220>)
 8000662:	f002 fa4a 	bl	8002afa <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2110      	movs	r1, #16
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fe65 	bl	800133c <HAL_GPIO_WritePin>

	   // Read status register
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fe5f 	bl	800133c <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, (uint8_t *)&RDSR, 1, 100);
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	2201      	movs	r2, #1
 8000682:	4933      	ldr	r1, [pc, #204]	; (8000750 <main+0x234>)
 8000684:	482d      	ldr	r0, [pc, #180]	; (800073c <main+0x220>)
 8000686:	f002 f8ca 	bl	800281e <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi1, (uint8_t *)spi_mout_buf, 1, 100);
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2201      	movs	r2, #1
 800068e:	492c      	ldr	r1, [pc, #176]	; (8000740 <main+0x224>)
 8000690:	482a      	ldr	r0, [pc, #168]	; (800073c <main+0x220>)
 8000692:	f002 fa32 	bl	8002afa <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2110      	movs	r1, #16
 800069a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069e:	f000 fe4d 	bl	800133c <HAL_GPIO_WritePin>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SPI_sem */
  osSemaphoreDef(SPI_sem);
 80006a2:	2300      	movs	r3, #0
 80006a4:	643b      	str	r3, [r7, #64]	; 0x40
 80006a6:	2300      	movs	r3, #0
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  SPI_semHandle = osSemaphoreCreate(osSemaphore(SPI_sem), 1);
 80006aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fe49 	bl	8004348 <osSemaphoreCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <main+0x23c>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_sem */
  osSemaphoreDef(UART_sem);
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  UART_semHandle = osSemaphoreCreate(osSemaphore(UART_sem), 1);
 80006c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c8:	2101      	movs	r1, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fe3c 	bl	8004348 <osSemaphoreCreate>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a22      	ldr	r2, [pc, #136]	; (800075c <main+0x240>)
 80006d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 80006d6:	2200      	movs	r2, #0
 80006d8:	2164      	movs	r1, #100	; 0x64
 80006da:	2002      	movs	r0, #2
 80006dc:	f004 f808 	bl	80046f0 <xQueueGenericCreate>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a1f      	ldr	r2, [pc, #124]	; (8000760 <main+0x244>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, uartTaskFunc, osPriorityNormal, 0, 512);
 80006e6:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <main+0x248>)
 80006e8:	f107 041c 	add.w	r4, r7, #28
 80006ec:	461d      	mov	r5, r3
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fdc1 	bl	8004288 <osThreadCreate>
 8000706:	4603      	mov	r3, r0
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <main+0x24c>)
 800070a:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiTask */
  osThreadDef(spiTask, spiTaskFunc, osPriorityNormal, 0, 512);
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <main+0x250>)
 800070e:	463c      	mov	r4, r7
 8000710:	461d      	mov	r5, r3
 8000712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000716:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spiTaskHandle = osThreadCreate(osThread(spiTask), NULL);
 800071e:	463b      	mov	r3, r7
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fdb0 	bl	8004288 <osThreadCreate>
 8000728:	4603      	mov	r3, r0
 800072a:	4a11      	ldr	r2, [pc, #68]	; (8000770 <main+0x254>)
 800072c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800072e:	f003 fda4 	bl	800427a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000732:	e7fe      	b.n	8000732 <main+0x216>
 8000734:	40013800 	.word	0x40013800
 8000738:	08006d1b 	.word	0x08006d1b
 800073c:	200003b8 	.word	0x200003b8
 8000740:	20000350 	.word	0x20000350
 8000744:	200003b4 	.word	0x200003b4
 8000748:	08006d1a 	.word	0x08006d1a
 800074c:	200003b5 	.word	0x200003b5
 8000750:	08006d1c 	.word	0x08006d1c
 8000754:	08006d19 	.word	0x08006d19
 8000758:	200004a8 	.word	0x200004a8
 800075c:	200004ac 	.word	0x200004ac
 8000760:	20000514 	.word	0x20000514
 8000764:	08006cd4 	.word	0x08006cd4
 8000768:	200004a0 	.word	0x200004a0
 800076c:	08006cf0 	.word	0x08006cf0
 8000770:	200004a4 	.word	0x200004a4

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b096      	sub	sp, #88	; 0x58
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2244      	movs	r2, #68	; 0x44
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f006 f9c6 	bl	8006b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f000 fdf5 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a4:	f000 f9cc 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007a8:	2310      	movs	r3, #16
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fe37 	bl	8001434 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007cc:	f000 f9b8 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fa37 	bl	8001c5c <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007f4:	f000 f9a4 	bl	8000b40 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3758      	adds	r7, #88	; 0x58
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_SPI1_Init+0x80>)
 8000806:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <MX_SPI1_Init+0x84>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_SPI1_Init+0x80>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_SPI1_Init+0x80>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_SPI1_Init+0x80>)
 800081a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800081e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_SPI1_Init+0x80>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_SPI1_Init+0x80>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_SPI1_Init+0x80>)
 800082e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000832:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_SPI1_Init+0x80>)
 8000836:	2228      	movs	r2, #40	; 0x28
 8000838:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_SPI1_Init+0x80>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_SPI1_Init+0x80>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_SPI1_Init+0x80>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_SPI1_Init+0x80>)
 800084e:	2207      	movs	r2, #7
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_SPI1_Init+0x80>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_SPI1_Init+0x80>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085e:	4808      	ldr	r0, [pc, #32]	; (8000880 <MX_SPI1_Init+0x80>)
 8000860:	f001 ff3a 	bl	80026d8 <HAL_SPI_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f969 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  SPI1->CR1 |= SPI_CR1_SSI;
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_SPI1_Init+0x84>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <MX_SPI1_Init+0x84>)
 8000874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000878:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200003b8 	.word	0x200003b8
 8000884:	40013000 	.word	0x40013000

08000888 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 800088e:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_USART1_UART_Init+0x5c>)
 8000890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 8000894:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USART1_UART_Init+0x58>)
 80008cc:	f003 f894 	bl	80039f8 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f933 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	2000041c 	.word	0x2000041c
 80008e4:	40013800 	.word	0x40013800

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_GPIO_Init+0x5c>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MX_GPIO_Init+0x5c>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_GPIO_Init+0x5c>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2110      	movs	r1, #16
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fd0e 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000920:	2310      	movs	r3, #16
 8000922:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 fb96 	bl	8001068 <HAL_GPIO_Init>

}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000

08000948 <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 8000952:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <USART1_IRQHandler+0xc4>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	2b00      	cmp	r3, #0
 800095c:	d002      	beq.n	8000964 <USART1_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <USART1_IRQHandler+0xc4>)
 8000960:	2208      	movs	r2, #8
 8000962:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 8000964:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <USART1_IRQHandler+0xc4>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <USART1_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 8000970:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <USART1_IRQHandler+0xc4>)
 8000972:	2204      	movs	r2, #4
 8000974:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <USART1_IRQHandler+0xc4>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <USART1_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <USART1_IRQHandler+0xc4>)
 8000984:	2202      	movs	r2, #2
 8000986:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <USART1_IRQHandler+0xc4>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	f003 0320 	and.w	r3, r3, #32
 8000990:	2b00      	cmp	r3, #0
 8000992:	d036      	beq.n	8000a02 <USART1_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <USART1_IRQHandler+0xc4>)
 8000996:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000998:	b29b      	uxth	r3, r3
 800099a:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b0d      	cmp	r3, #13
 80009a0:	d002      	beq.n	80009a8 <USART1_IRQHandler+0x60>
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b0a      	cmp	r3, #10
 80009a6:	d119      	bne.n	80009dc <USART1_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <USART1_IRQHandler+0xc8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d028      	beq.n	8000a02 <USART1_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <USART1_IRQHandler+0xc8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	4916      	ldr	r1, [pc, #88]	; (8000a10 <USART1_IRQHandler+0xc8>)
 80009b8:	600a      	str	r2, [r1, #0]
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <USART1_IRQHandler+0xcc>)
 80009bc:	2100      	movs	r1, #0
 80009be:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <USART1_IRQHandler+0xd0>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	463a      	mov	r2, r7
 80009c6:	2300      	movs	r3, #0
 80009c8:	4912      	ldr	r1, [pc, #72]	; (8000a14 <USART1_IRQHandler+0xcc>)
 80009ca:	f004 f853 	bl	8004a74 <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <USART1_IRQHandler+0xc8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <USART1_IRQHandler+0xd4>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 80009da:	e012      	b.n	8000a02 <USART1_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b24      	cmp	r3, #36	; 0x24
 80009e0:	d003      	beq.n	80009ea <USART1_IRQHandler+0xa2>
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <USART1_IRQHandler+0xc8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2bc8      	cmp	r3, #200	; 0xc8
 80009e8:	d102      	bne.n	80009f0 <USART1_IRQHandler+0xa8>
				rx_index = 0;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <USART1_IRQHandler+0xc8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <USART1_IRQHandler+0xc8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	4906      	ldr	r1, [pc, #24]	; (8000a10 <USART1_IRQHandler+0xc8>)
 80009f8:	600a      	str	r2, [r1, #0]
 80009fa:	4906      	ldr	r1, [pc, #24]	; (8000a14 <USART1_IRQHandler+0xcc>)
 80009fc:	79fa      	ldrb	r2, [r7, #7]
 80009fe:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8000a00:	e7ff      	b.n	8000a02 <USART1_IRQHandler+0xba>
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	20000518 	.word	0x20000518
 8000a14:	2000051c 	.word	0x2000051c
 8000a18:	20000514 	.word	0x20000514
 8000a1c:	20000344 	.word	0x20000344

08000a20 <uartTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_uartTaskFunc */
void uartTaskFunc(void const * argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	static uint8_t valid_count = 0;

  /* Infinite loop */
  for(;;)
  {
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <uartTaskFunc+0xa8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 faa9 	bl	8004f84 <uxQueueMessagesWaitingFromISR>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0f7      	beq.n	8000a28 <uartTaskFunc+0x8>
	  {
		  if(valid_count == 0) {
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <uartTaskFunc+0xac>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d106      	bne.n	8000a4e <uartTaskFunc+0x2e>
			  //osSemaphoreAcquire(UART_semHandle, osWaitForever); //Grab semaphore for new message
			  xSemaphoreTake(UART_semHandle, portMAX_DELAY);
 8000a40:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <uartTaskFunc+0xb0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f004 f98f 	bl	8004d6c <xQueueSemaphoreTake>
		  }

	      xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <uartTaskFunc+0xa8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2201      	movs	r2, #1
 8000a54:	491f      	ldr	r1, [pc, #124]	; (8000ad4 <uartTaskFunc+0xb4>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f004 f8a8 	bl	8004bac <xQueueReceive>
	      valid_count++;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <uartTaskFunc+0xac>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <uartTaskFunc+0xac>)
 8000a66:	701a      	strb	r2, [r3, #0]
	      //Fill and check header
	      for(int c = 0; c < 6; c++){
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e00b      	b.n	8000a86 <uartTaskFunc+0x66>
	    	  nmea_header[c] = SerialBufferReceived.Buffer[c];
 8000a6e:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <uartTaskFunc+0xb4>)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	7819      	ldrb	r1, [r3, #0]
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <uartTaskFunc+0xb8>)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	701a      	strb	r2, [r3, #0]
	      for(int c = 0; c < 6; c++){
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	ddf0      	ble.n	8000a6e <uartTaskFunc+0x4e>
	      }
	      if(!strcmp(nmea_header, "$GPRMC")){
 8000a8c:	4913      	ldr	r1, [pc, #76]	; (8000adc <uartTaskFunc+0xbc>)
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <uartTaskFunc+0xb8>)
 8000a90:	f7ff fb9e 	bl	80001d0 <strcmp>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d111      	bne.n	8000abe <uartTaskFunc+0x9e>
		      if(SerialBufferReceived.Buffer[18] == 'A'){
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <uartTaskFunc+0xb4>)
 8000a9c:	7c9b      	ldrb	r3, [r3, #18]
 8000a9e:	2b41      	cmp	r3, #65	; 0x41
 8000aa0:	d10d      	bne.n	8000abe <uartTaskFunc+0x9e>
		    	  //Got a fix0000
		    	  if(valid_count >= 47){ //Length of NMEA message
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <uartTaskFunc+0xac>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8000aa8:	d909      	bls.n	8000abe <uartTaskFunc+0x9e>
			    	  valid_count = 0;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <uartTaskFunc+0xac>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
			    	  //Post SPI write semaphore when received full valid message
			    	  //osSemaphoreRelease(SPI_semHandle);
			    	  xSemaphoreGive(SPI_semHandle);
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <uartTaskFunc+0xc0>)
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f003 fedd 	bl	8004878 <xQueueGenericSend>
		    	  }
		      }
	      }
	      got_nmea=0;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <uartTaskFunc+0xc4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8000ac4:	e7b0      	b.n	8000a28 <uartTaskFunc+0x8>
 8000ac6:	bf00      	nop
 8000ac8:	20000514 	.word	0x20000514
 8000acc:	200005e5 	.word	0x200005e5
 8000ad0:	200004ac 	.word	0x200004ac
 8000ad4:	200004b0 	.word	0x200004b0
 8000ad8:	20000348 	.word	0x20000348
 8000adc:	08006d0c 	.word	0x08006d0c
 8000ae0:	200004a8 	.word	0x200004a8
 8000ae4:	20000344 	.word	0x20000344

08000ae8 <spiTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spiTaskFunc */
void spiTaskFunc(void const * argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spiTaskFunc */
  /* Infinite loop */
  for(;;)
  {
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
	  xSemaphoreTake(SPI_semHandle, portMAX_DELAY);
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <spiTaskFunc+0x2c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 f937 	bl	8004d6c <xQueueSemaphoreTake>
	  osDelay(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f003 fc0e 	bl	8004320 <osDelay>
	  //Send over SPI to FRAM

	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data
	  xSemaphoreGive(UART_semHandle);
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <spiTaskFunc+0x30>)
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f003 feb3 	bl	8004878 <xQueueGenericSend>
	  xSemaphoreTake(SPI_semHandle, portMAX_DELAY);
 8000b12:	e7ed      	b.n	8000af0 <spiTaskFunc+0x8>
 8000b14:	200004a8 	.word	0x200004a8
 8000b18:	200004ac 	.word	0x200004ac

08000b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2e:	f000 f999 	bl	8000e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40012c00 	.word	0x40012c00

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	f06f 0001 	mvn.w	r0, #1
 8000b8a:	f000 fa43 	bl	8001014 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_SPI_MspInit+0x7c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d128      	bne.n	8000c10 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_SPI_MspInit+0x80>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_SPI_MspInit+0x80>)
 8000bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_SPI_MspInit+0x80>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_SPI_MspInit+0x80>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_SPI_MspInit+0x80>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_SPI_MspInit+0x80>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000bee:	23c2      	movs	r3, #194	; 0xc2
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f000 fa2c 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40013000 	.word	0x40013000
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09e      	sub	sp, #120	; 0x78
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2254      	movs	r2, #84	; 0x54
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f005 ff67 	bl	8006b14 <memset>
  if(huart->Instance==USART1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <HAL_UART_MspInit+0xa8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d137      	bne.n	8000cc0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fa53 	bl	8002108 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c68:	f7ff ff6a 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6c:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6613      	str	r3, [r2, #96]	; 0x60
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_UART_MspInit+0xac>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ca0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbc:	f000 f9d4 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3778      	adds	r7, #120	; 0x78
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013800 	.word	0x40013800
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	2019      	movs	r0, #25
 8000ce6:	f000 f995 	bl	8001014 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000cea:	2019      	movs	r0, #25
 8000cec:	f000 f9ae 	bl	800104c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_InitTick+0x9c>)
 8000cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <HAL_InitTick+0x9c>)
 8000cf6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <HAL_InitTick+0x9c>)
 8000cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d08:	f107 0210 	add.w	r2, r7, #16
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f966 	bl	8001fe4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d18:	f001 f94e 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8000d1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_InitTick+0xa0>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_InitTick+0xa4>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <HAL_InitTick+0xa8>)
 8000d30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_InitTick+0xa4>)
 8000d34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_InitTick+0xa4>)
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_InitTick+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_InitTick+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <HAL_InitTick+0xa4>)
 8000d4e:	f002 fbd3 	bl	80034f8 <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d104      	bne.n	8000d62 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000d58:	4806      	ldr	r0, [pc, #24]	; (8000d74 <HAL_InitTick+0xa4>)
 8000d5a:	f002 fc2f 	bl	80035bc <HAL_TIM_Base_Start_IT>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3730      	adds	r7, #48	; 0x30
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	431bde83 	.word	0x431bde83
 8000d74:	200005e8 	.word	0x200005e8
 8000d78:	40012c00 	.word	0x40012c00

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dae:	f002 fc59 	bl	8003664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200005e8 	.word	0x200005e8

08000dbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	; (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	; (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f005 fe4d 	bl	8006aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff fb83 	bl	800051c <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e24:	08006dd8 	.word	0x08006dd8
  ldr r2, =_sbss
 8000e28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e2c:	20002ea4 	.word	0x20002ea4

08000e30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_IRQHandler>

08000e32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f8de 	bl	8000ffe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	200f      	movs	r0, #15
 8000e44:	f7ff ff44 	bl	8000cd0 <HAL_InitTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	71fb      	strb	r3, [r7, #7]
 8000e52:	e001      	b.n	8000e58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e54:	f7ff fe7a 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000634 	.word	0x20000634

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000634 	.word	0x20000634

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <__NVIC_EnableIRQ+0x38>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff4c 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001026:	f7ff ff61 	bl	8000eec <__NVIC_GetPriorityGrouping>
 800102a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f7ff ffb1 	bl	8000f98 <NVIC_EncodePriority>
 8001036:	4602      	mov	r2, r0
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff80 	bl	8000f44 <__NVIC_SetPriority>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff54 	bl	8000f08 <__NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001076:	e148      	b.n	800130a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	2101      	movs	r1, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 813a 	beq.w	8001304 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b01      	cmp	r3, #1
 800109a:	d005      	beq.n	80010a8 <HAL_GPIO_Init+0x40>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d130      	bne.n	800110a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010de:	2201      	movs	r2, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	f003 0201 	and.w	r2, r3, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b03      	cmp	r3, #3
 8001114:	d017      	beq.n	8001146 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d123      	bne.n	800119a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	6939      	ldr	r1, [r7, #16]
 8001196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0203 	and.w	r2, r3, #3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 8094 	beq.w	8001304 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011dc:	4b52      	ldr	r3, [pc, #328]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80011de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e0:	4a51      	ldr	r2, [pc, #324]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	6613      	str	r3, [r2, #96]	; 0x60
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <HAL_GPIO_Init+0x2c0>)
 80011ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x2c4>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800121e:	d00d      	beq.n	800123c <HAL_GPIO_Init+0x1d4>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a43      	ldr	r2, [pc, #268]	; (8001330 <HAL_GPIO_Init+0x2c8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d007      	beq.n	8001238 <HAL_GPIO_Init+0x1d0>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a42      	ldr	r2, [pc, #264]	; (8001334 <HAL_GPIO_Init+0x2cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d101      	bne.n	8001234 <HAL_GPIO_Init+0x1cc>
 8001230:	2302      	movs	r3, #2
 8001232:	e004      	b.n	800123e <HAL_GPIO_Init+0x1d6>
 8001234:	2307      	movs	r3, #7
 8001236:	e002      	b.n	800123e <HAL_GPIO_Init+0x1d6>
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <HAL_GPIO_Init+0x1d6>
 800123c:	2300      	movs	r3, #0
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	f002 0203 	and.w	r2, r2, #3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	4093      	lsls	r3, r2
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800124e:	4937      	ldr	r1, [pc, #220]	; (800132c <HAL_GPIO_Init+0x2c4>)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001280:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001286:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012aa:	4a23      	ldr	r2, [pc, #140]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_GPIO_Init+0x2d0>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	f47f aeaf 	bne.w	8001078 <HAL_GPIO_Init+0x10>
  }
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	48000400 	.word	0x48000400
 8001334:	48000800 	.word	0x48000800
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001358:	e002      	b.n	8001360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800135a:	887a      	ldrh	r2, [r7, #2]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_PWREx_GetVoltageRange+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40007000 	.word	0x40007000

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001396:	d130      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a4:	d038      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2232      	movs	r2, #50	; 0x32
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9b      	lsrs	r3, r3, #18
 80013c8:	3301      	adds	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013cc:	e002      	b.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d102      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f2      	bne.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f4:	d110      	bne.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e00f      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001406:	d007      	beq.n	8001418 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001410:	4a05      	ldr	r2, [pc, #20]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001416:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40007000 	.word	0x40007000
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	f000 bc02 	b.w	8001c4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001448:	4b96      	ldr	r3, [pc, #600]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001452:	4b94      	ldr	r3, [pc, #592]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80e4 	beq.w	8001632 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_RCC_OscConfig+0x4c>
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	f040 808b 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b01      	cmp	r3, #1
 800147c:	f040 8087 	bne.w	800158e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x64>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e3d9      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_RCC_OscConfig+0x7e>
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b0:	e005      	b.n	80014be <HAL_RCC_OscConfig+0x8a>
 80014b2:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014be:	4293      	cmp	r3, r2
 80014c0:	d223      	bcs.n	800150a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fdbe 	bl	8002048 <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e3ba      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	496d      	ldr	r1, [pc, #436]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4968      	ldr	r1, [pc, #416]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e025      	b.n	8001556 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800150a:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a65      	ldr	r2, [pc, #404]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4960      	ldr	r1, [pc, #384]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001528:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	495b      	ldr	r1, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fd7e 	bl	8002048 <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e37a      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001556:	f000 fc81 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4950      	ldr	r1, [pc, #320]	; (80016a8 <HAL_RCC_OscConfig+0x274>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	f003 031f 	and.w	r3, r3, #31
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	4a4e      	ldr	r2, [pc, #312]	; (80016ac <HAL_RCC_OscConfig+0x278>)
 8001574:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001576:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fba8 	bl	8000cd0 <HAL_InitTick>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d052      	beq.n	8001630 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	e35e      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d032      	beq.n	80015fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a42      	ldr	r2, [pc, #264]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fc73 	bl	8000e8c <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015aa:	f7ff fc6f 	bl	8000e8c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e347      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a35      	ldr	r2, [pc, #212]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4930      	ldr	r1, [pc, #192]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	492b      	ldr	r1, [pc, #172]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e01a      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a28      	ldr	r2, [pc, #160]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001608:	f7ff fc40 	bl	8000e8c <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001610:	f7ff fc3c 	bl	8000e8c <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e314      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x1dc>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d073      	beq.n	8001726 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x21c>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d10e      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d10b      	bne.n	8001668 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d063      	beq.n	8001724 <HAL_RCC_OscConfig+0x2f0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d15f      	bne.n	8001724 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e2f1      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d106      	bne.n	8001680 <HAL_RCC_OscConfig+0x24c>
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e025      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001688:	d114      	bne.n	80016b4 <HAL_RCC_OscConfig+0x280>
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <HAL_RCC_OscConfig+0x270>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e013      	b.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016a4:	40021000 	.word	0x40021000
 80016a8:	08006d20 	.word	0x08006d20
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000004 	.word	0x20000004
 80016b4:	4ba0      	ldr	r3, [pc, #640]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9f      	ldr	r2, [pc, #636]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b9d      	ldr	r3, [pc, #628]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a9c      	ldr	r2, [pc, #624]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fbda 	bl	8000e8c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fbd6 	bl	8000e8c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e2ae      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2a8>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fbc6 	bl	8000e8c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fbc2 	bl	8000e8c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e29a      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001716:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x310>
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d119      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x328>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e277      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4973      	ldr	r1, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001770:	e040      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d023      	beq.n	80017c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fb81 	bl	8000e8c <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fb7d 	bl	8000e8c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e255      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	495f      	ldr	r1, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a5c      	ldr	r2, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb5d 	bl	8000e8c <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff fb59 	bl	8000e8c <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e231      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d03c      	beq.n	800187a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d01c      	beq.n	8001842 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001808:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	4a4a      	ldr	r2, [pc, #296]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fb38 	bl	8000e8c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fb34 	bl	8000e8c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e20c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0ef      	beq.n	8001820 <HAL_RCC_OscConfig+0x3ec>
 8001840:	e01b      	b.n	800187a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fb1b 	bl	8000e8c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fb17 	bl	8000e8c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1ef      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80a6 	beq.w	80019d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10d      	bne.n	80018b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800189e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a2:	6593      	str	r3, [r2, #88]	; 0x58
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d118      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018cc:	f7ff fade 	bl	8000e8c <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d4:	f7ff fada 	bl	8000e8c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e1b2      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x4d8>
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800190a:	e029      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d115      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x52c>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	4b9a      	ldr	r3, [pc, #616]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	4a99      	ldr	r2, [pc, #612]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001950:	4b96      	ldr	r3, [pc, #600]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001956:	4a95      	ldr	r2, [pc, #596]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001968:	f7ff fa90 	bl	8000e8c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff fa8c 	bl	8000e8c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e162      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	4b89      	ldr	r3, [pc, #548]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ed      	beq.n	8001970 <HAL_RCC_OscConfig+0x53c>
 8001994:	e015      	b.n	80019c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff fa79 	bl	8000e8c <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fa75 	bl	8000e8c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e14b      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ed      	bne.n	800199e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c2:	7ffb      	ldrb	r3, [r7, #31]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c8:	4b78      	ldr	r3, [pc, #480]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	4a77      	ldr	r2, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d03c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019e8:	4b70      	ldr	r3, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ee:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa48 	bl	8000e8c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a00:	f7ff fa44 	bl	8000e8c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e11c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ef      	beq.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
 8001a20:	e01b      	b.n	8001a5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a22:	4b62      	ldr	r3, [pc, #392]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a28:	4a60      	ldr	r2, [pc, #384]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7ff fa2b 	bl	8000e8c <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a3a:	f7ff fa27 	bl	8000e8c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ff      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ef      	bne.n	8001a3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80f3 	beq.w	8001c4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	f040 80c9 	bne.w	8001c00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a6e:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d12c      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d123      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11b      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d113      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d109      	bne.n	8001adc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d06b      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d062      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ae2:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0ac      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afe:	f7ff f9c5 	bl	8000e8c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b06:	f7ff f9c1 	bl	8000e8c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e099      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x77c>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b34:	3a01      	subs	r2, #1
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	4311      	orrs	r1, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b3e:	0212      	lsls	r2, r2, #8
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b46:	0852      	lsrs	r2, r2, #1
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	0552      	lsls	r2, r2, #21
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b52:	0852      	lsrs	r2, r2, #1
 8001b54:	3a01      	subs	r2, #1
 8001b56:	0652      	lsls	r2, r2, #25
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b5e:	06d2      	lsls	r2, r2, #27
 8001b60:	430a      	orrs	r2, r1
 8001b62:	4912      	ldr	r1, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7ff f984 	bl	8000e8c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f980 	bl	8000e8c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e058      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_RCC_OscConfig+0x778>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba6:	e050      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e04f      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d144      	bne.n	8001c4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd8:	f7ff f958 	bl	8000e8c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff f954 	bl	8000e8c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e02c      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x7ac>
 8001bfe:	e024      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	d01f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f93b 	bl	8000e8c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f937 	bl	8000e8c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4905      	ldr	r1, [pc, #20]	; (8001c54 <HAL_RCC_OscConfig+0x820>)
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x824>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e001      	b.n	8001c4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	feeefffc 	.word	0xfeeefffc

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0e7      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d910      	bls.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 0207 	bic.w	r2, r3, #7
 8001c86:	4970      	ldr	r1, [pc, #448]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0cf      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d010      	beq.n	8001cce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d908      	bls.n	8001cce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4960      	ldr	r1, [pc, #384]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d04c      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d121      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0a6      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d115      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e09a      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d12:	4b4e      	ldr	r3, [pc, #312]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08e      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e086      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f023 0203 	bic.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4943      	ldr	r1, [pc, #268]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d44:	f7ff f8a2 	bl	8000e8c <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7ff f89e 	bl	8000e8c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e06e      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 020c 	and.w	r2, r3, #12
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1eb      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d010      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d208      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b2e      	ldr	r3, [pc, #184]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	492b      	ldr	r1, [pc, #172]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d210      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 0207 	bic.w	r2, r3, #7
 8001db8:	4923      	ldr	r1, [pc, #140]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e036      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4918      	ldr	r1, [pc, #96]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4910      	ldr	r1, [pc, #64]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e10:	f000 f824 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e14:	4602      	mov	r2, r0
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	490b      	ldr	r1, [pc, #44]	; (8001e50 <HAL_RCC_ClockConfig+0x1f4>)
 8001e22:	5ccb      	ldrb	r3, [r1, r3]
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1f8>)
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1fc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe ff4b 	bl	8000cd0 <HAL_InitTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40022000 	.word	0x40022000
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08006d20 	.word	0x08006d20
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d11e      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	e004      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d134      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d003      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0xac>
 8001f00:	e005      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f04:	617b      	str	r3, [r7, #20]
      break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0a:	617b      	str	r3, [r7, #20]
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	617b      	str	r3, [r7, #20]
      break;
 8001f12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	3301      	adds	r3, #1
 8001f20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0e5b      	lsrs	r3, r3, #25
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	3301      	adds	r3, #1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f54:	69bb      	ldr	r3, [r7, #24]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08006d38 	.word	0x08006d38
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08006d30 	.word	0x08006d30

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fbc:	f7ff ffda 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4904      	ldr	r1, [pc, #16]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08006d30 	.word	0x08006d30

08001fe4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_GetClockConfig+0x5c>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_RCC_GetClockConfig+0x5c>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_RCC_GetClockConfig+0x5c>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_RCC_GetClockConfig+0x5c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	08db      	lsrs	r3, r3, #3
 800201e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCC_GetClockConfig+0x60>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0207 	and.w	r2, r3, #7
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	601a      	str	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40022000 	.word	0x40022000

08002048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002050:	2300      	movs	r3, #0
 8002052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002060:	f7ff f984 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8002064:	6178      	str	r0, [r7, #20]
 8002066:	e014      	b.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002068:	4b25      	ldr	r3, [pc, #148]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	4a24      	ldr	r2, [pc, #144]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002072:	6593      	str	r3, [r2, #88]	; 0x58
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002080:	f7ff f974 	bl	800136c <HAL_PWREx_GetVoltageRange>
 8002084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002098:	d10b      	bne.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b80      	cmp	r3, #128	; 0x80
 800209e:	d919      	bls.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2ba0      	cmp	r3, #160	; 0xa0
 80020a4:	d902      	bls.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020a6:	2302      	movs	r3, #2
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	e013      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ac:	2301      	movs	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	e010      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b80      	cmp	r3, #128	; 0x80
 80020b6:	d902      	bls.n	80020be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020b8:	2303      	movs	r3, #3
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	e00a      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d102      	bne.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c4:	2302      	movs	r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e004      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b70      	cmp	r3, #112	; 0x70
 80020ce:	d101      	bne.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d0:	2301      	movs	r3, #1
 80020d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 0207 	bic.w	r2, r3, #7
 80020dc:	4909      	ldr	r1, [pc, #36]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d001      	beq.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	40022000 	.word	0x40022000

08002108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002110:	2300      	movs	r3, #0
 8002112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002114:	2300      	movs	r3, #0
 8002116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002128:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800212c:	d01a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800212e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002132:	d814      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002134:	2b00      	cmp	r3, #0
 8002136:	d009      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800213c:	d10f      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4a5c      	ldr	r2, [pc, #368]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800214a:	e00c      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f9ce 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800215c:	e003      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	74fb      	strb	r3, [r7, #19]
      break;
 8002162:	e000      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800216c:	4b51      	ldr	r3, [pc, #324]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	494e      	ldr	r1, [pc, #312]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002182:	e001      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 809e 	beq.w	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800219a:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80021aa:	2300      	movs	r3, #0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00d      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	4a3f      	ldr	r2, [pc, #252]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6593      	str	r3, [r2, #88]	; 0x58
 80021bc:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021cc:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fe58 	bl	8000e8c <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021de:	e009      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e0:	f7fe fe54 	bl	8000e8c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d902      	bls.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	74fb      	strb	r3, [r7, #19]
        break;
 80021f2:	e005      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ef      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d15a      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002210:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01e      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	429a      	cmp	r2, r3
 8002220:	d019      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002222:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002234:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800224e:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d016      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fe14 	bl	8000e8c <HAL_GetTick>
 8002264:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002266:	e00b      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fe10 	bl	8000e8c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d902      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	74fb      	strb	r3, [r7, #19]
            break;
 800227e:	e006      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ec      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a2:	4904      	ldr	r1, [pc, #16]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022aa:	e009      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
 80022b0:	e006      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022c0:	7c7b      	ldrb	r3, [r7, #17]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d105      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c6:	4b8a      	ldr	r3, [pc, #552]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a89      	ldr	r2, [pc, #548]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022de:	4b84      	ldr	r3, [pc, #528]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 0203 	bic.w	r2, r3, #3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4980      	ldr	r1, [pc, #512]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002300:	4b7b      	ldr	r3, [pc, #492]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 020c 	bic.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	4978      	ldr	r1, [pc, #480]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002322:	4b73      	ldr	r3, [pc, #460]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	496f      	ldr	r1, [pc, #444]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002344:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	4967      	ldr	r1, [pc, #412]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002366:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	495e      	ldr	r1, [pc, #376]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	4956      	ldr	r1, [pc, #344]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023aa:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d028      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023cc:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	4945      	ldr	r1, [pc, #276]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ea:	d106      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ec:	4b40      	ldr	r3, [pc, #256]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a3f      	ldr	r2, [pc, #252]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f6:	60d3      	str	r3, [r2, #12]
 80023f8:	e011      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002402:	d10c      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	2101      	movs	r1, #1
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f872 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d028      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002430:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	492d      	ldr	r1, [pc, #180]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002448:	d106      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244a:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002454:	60d3      	str	r3, [r2, #12]
 8002456:	e011      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3304      	adds	r3, #4
 8002466:	2101      	movs	r1, #1
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f843 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 800246e:	4603      	mov	r3, r0
 8002470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01c      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002496:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a6:	d10c      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f820 	bl	80024f4 <RCCEx_PLLSAI1_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002502:	4b74      	ldr	r3, [pc, #464]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d018      	beq.n	8002540 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800250e:	4b71      	ldr	r3, [pc, #452]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 0203 	and.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d10d      	bne.n	800253a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
       ||
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002526:	4b6b      	ldr	r3, [pc, #428]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
       ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d047      	beq.n	80025ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	e044      	b.n	80025ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d018      	beq.n	800257a <RCCEx_PLLSAI1_Config+0x86>
 8002548:	2b03      	cmp	r3, #3
 800254a:	d825      	bhi.n	8002598 <RCCEx_PLLSAI1_Config+0xa4>
 800254c:	2b01      	cmp	r3, #1
 800254e:	d002      	beq.n	8002556 <RCCEx_PLLSAI1_Config+0x62>
 8002550:	2b02      	cmp	r3, #2
 8002552:	d009      	beq.n	8002568 <RCCEx_PLLSAI1_Config+0x74>
 8002554:	e020      	b.n	8002598 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002556:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11d      	bne.n	800259e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002566:	e01a      	b.n	800259e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002568:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002578:	e013      	b.n	80025a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800257a:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002586:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002596:	e006      	b.n	80025a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
      break;
 800259c:	e004      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800259e:	bf00      	nop
 80025a0:	e002      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a2:	bf00      	nop
 80025a4:	e000      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10d      	bne.n	80025ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ae:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	430b      	orrs	r3, r1
 80025c4:	4943      	ldr	r1, [pc, #268]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d17c      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025d0:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a3f      	ldr	r2, [pc, #252]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025dc:	f7fe fc56 	bl	8000e8c <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e2:	e009      	b.n	80025f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025e4:	f7fe fc52 	bl	8000e8c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	73fb      	strb	r3, [r7, #15]
        break;
 80025f6:	e005      	b.n	8002604 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ef      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d15f      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d110      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002610:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002618:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6892      	ldr	r2, [r2, #8]
 8002620:	0211      	lsls	r1, r2, #8
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	06d2      	lsls	r2, r2, #27
 8002628:	430a      	orrs	r2, r1
 800262a:	492a      	ldr	r1, [pc, #168]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	610b      	str	r3, [r1, #16]
 8002630:	e027      	b.n	8002682 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d112      	bne.n	800265e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002638:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002640:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6892      	ldr	r2, [r2, #8]
 8002648:	0211      	lsls	r1, r2, #8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6912      	ldr	r2, [r2, #16]
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0552      	lsls	r2, r2, #21
 8002654:	430a      	orrs	r2, r1
 8002656:	491f      	ldr	r1, [pc, #124]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	610b      	str	r3, [r1, #16]
 800265c:	e011      	b.n	8002682 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002666:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6892      	ldr	r2, [r2, #8]
 800266e:	0211      	lsls	r1, r2, #8
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6952      	ldr	r2, [r2, #20]
 8002674:	0852      	lsrs	r2, r2, #1
 8002676:	3a01      	subs	r2, #1
 8002678:	0652      	lsls	r2, r2, #25
 800267a:	430a      	orrs	r2, r1
 800267c:	4915      	ldr	r1, [pc, #84]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800268c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7fe fbfd 	bl	8000e8c <HAL_GetTick>
 8002692:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002694:	e009      	b.n	80026aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002696:	f7fe fbf9 	bl	8000e8c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d902      	bls.n	80026aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	73fb      	strb	r3, [r7, #15]
          break;
 80026a8:	e005      	b.n	80026b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ef      	beq.n	8002696 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4903      	ldr	r1, [pc, #12]	; (80026d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e095      	b.n	8002816 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fa:	d009      	beq.n	8002710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
 8002702:	e005      	b.n	8002710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fa36 	bl	8000b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002746:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002750:	d902      	bls.n	8002758 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e002      	b.n	800275e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002766:	d007      	beq.n	8002778 <HAL_SPI_Init+0xa0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002770:	d002      	beq.n	8002778 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	ea42 0103 	orr.w	r1, r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	0c1b      	lsrs	r3, r3, #16
 80027d4:	f003 0204 	and.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80027f4:	ea42 0103 	orr.w	r1, r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b088      	sub	sp, #32
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_SPI_Transmit+0x22>
 800283c:	2302      	movs	r3, #2
 800283e:	e158      	b.n	8002af2 <HAL_SPI_Transmit+0x2d4>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002848:	f7fe fb20 	bl	8000e8c <HAL_GetTick>
 800284c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b01      	cmp	r3, #1
 800285c:	d002      	beq.n	8002864 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002862:	e13d      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Transmit+0x52>
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002874:	e134      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c0:	d10f      	bne.n	80028e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d007      	beq.n	8002900 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002908:	d94b      	bls.n	80029a2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_SPI_Transmit+0xfa>
 8002912:	8afb      	ldrh	r3, [r7, #22]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d13e      	bne.n	8002996 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002932:	b29b      	uxth	r3, r3
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800293c:	e02b      	b.n	8002996 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d112      	bne.n	8002972 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002970:	e011      	b.n	8002996 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002972:	f7fe fa8b 	bl	8000e8c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d803      	bhi.n	800298a <HAL_SPI_Transmit+0x16c>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d102      	bne.n	8002990 <HAL_SPI_Transmit+0x172>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002994:	e0a4      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ce      	bne.n	800293e <HAL_SPI_Transmit+0x120>
 80029a0:	e07c      	b.n	8002a9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_SPI_Transmit+0x192>
 80029aa:	8afb      	ldrh	r3, [r7, #22]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d170      	bne.n	8002a92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d912      	bls.n	80029e0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	1c9a      	adds	r2, r3, #2
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b02      	subs	r3, #2
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029de:	e058      	b.n	8002a92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	330c      	adds	r3, #12
 80029ea:	7812      	ldrb	r2, [r2, #0]
 80029ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a06:	e044      	b.n	8002a92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d12b      	bne.n	8002a6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d912      	bls.n	8002a46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b02      	subs	r3, #2
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a44:	e025      	b.n	8002a92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	330c      	adds	r3, #12
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a6c:	e011      	b.n	8002a92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a6e:	f7fe fa0d 	bl	8000e8c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d803      	bhi.n	8002a86 <HAL_SPI_Transmit+0x268>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d102      	bne.n	8002a8c <HAL_SPI_Transmit+0x26e>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a90:	e026      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1b5      	bne.n	8002a08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fce3 	bl	800346c <SPI_EndRxTxTransaction>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	e000      	b.n	8002ae0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ade:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b088      	sub	sp, #32
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b16:	d112      	bne.n	8002b3e <HAL_SPI_Receive+0x44>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10e      	bne.n	8002b3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2204      	movs	r2, #4
 8002b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b28:	88fa      	ldrh	r2, [r7, #6]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f910 	bl	8002d5a <HAL_SPI_TransmitReceive>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	e109      	b.n	8002d52 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_SPI_Receive+0x52>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e102      	b.n	8002d52 <HAL_SPI_Receive+0x258>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b54:	f7fe f99a 	bl	8000e8c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d002      	beq.n	8002b6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b6a:	e0e9      	b.n	8002d40 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <HAL_SPI_Receive+0x7e>
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b7c:	e0e0      	b.n	8002d40 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2204      	movs	r2, #4
 8002b82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	88fa      	ldrh	r2, [r7, #6]
 8002b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	88fa      	ldrh	r2, [r7, #6]
 8002b9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bc8:	d908      	bls.n	8002bdc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	e007      	b.n	8002bec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf4:	d10f      	bne.n	8002c16 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d007      	beq.n	8002c34 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c3c:	d867      	bhi.n	8002d0e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c3e:	e030      	b.n	8002ca2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d117      	bne.n	8002c7e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f103 020c 	add.w	r2, r3, #12
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	7812      	ldrb	r2, [r2, #0]
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c7c:	e011      	b.n	8002ca2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c7e:	f7fe f905 	bl	8000e8c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d803      	bhi.n	8002c96 <HAL_SPI_Receive+0x19c>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d102      	bne.n	8002c9c <HAL_SPI_Receive+0x1a2>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ca0:	e04e      	b.n	8002d40 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1c8      	bne.n	8002c40 <HAL_SPI_Receive+0x146>
 8002cae:	e034      	b.n	8002d1a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d115      	bne.n	8002cea <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	1c9a      	adds	r2, r3, #2
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ce8:	e011      	b.n	8002d0e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cea:	f7fe f8cf 	bl	8000e8c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d803      	bhi.n	8002d02 <HAL_SPI_Receive+0x208>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d102      	bne.n	8002d08 <HAL_SPI_Receive+0x20e>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d0c:	e018      	b.n	8002d40 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ca      	bne.n	8002cb0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	6839      	ldr	r1, [r7, #0]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fb4c 	bl	80033bc <SPI_EndRxTransaction>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
 8002d3c:	e000      	b.n	8002d40 <HAL_SPI_Receive+0x246>
  }

error :
 8002d3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x26>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e1fb      	b.n	8003178 <HAL_SPI_TransmitReceive+0x41e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d88:	f7fe f880 	bl	8000e8c <HAL_GetTick>
 8002d8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002da4:	7efb      	ldrb	r3, [r7, #27]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00e      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x6e>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db0:	d106      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x66>
 8002dba:	7efb      	ldrb	r3, [r7, #27]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d003      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dc6:	e1cd      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_SPI_TransmitReceive+0x80>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_SPI_TransmitReceive+0x80>
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002de0:	e1c0      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d003      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2205      	movs	r2, #5
 8002df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	887a      	ldrh	r2, [r7, #2]
 8002e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	887a      	ldrh	r2, [r7, #2]
 8002e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e38:	d802      	bhi.n	8002e40 <HAL_SPI_TransmitReceive+0xe6>
 8002e3a:	8a3b      	ldrh	r3, [r7, #16]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d908      	bls.n	8002e52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	e007      	b.n	8002e62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d007      	beq.n	8002e80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e88:	d97c      	bls.n	8002f84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_TransmitReceive+0x13e>
 8002e92:	8a7b      	ldrh	r3, [r7, #18]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d169      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ebc:	e056      	b.n	8002f6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d11b      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x1aa>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_SPI_TransmitReceive+0x1aa>
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d113      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	1c9a      	adds	r2, r3, #2
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d11c      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x1f2>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f4c:	f7fd ff9e 	bl	8000e8c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d807      	bhi.n	8002f6c <HAL_SPI_TransmitReceive+0x212>
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d003      	beq.n	8002f6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f6a:	e0fb      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1a3      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x164>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d19d      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0x164>
 8002f82:	e0df      	b.n	8003144 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0x23a>
 8002f8c:	8a7b      	ldrh	r3, [r7, #18]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	f040 80cb 	bne.w	800312a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d912      	bls.n	8002fc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	1c9a      	adds	r2, r3, #2
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b02      	subs	r3, #2
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc2:	e0b2      	b.n	800312a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fea:	e09e      	b.n	800312a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d134      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x30a>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02f      	beq.n	8003064 <HAL_SPI_TransmitReceive+0x30a>
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	2b01      	cmp	r3, #1
 8003008:	d12c      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d912      	bls.n	800303a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	881a      	ldrh	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b02      	subs	r3, #2
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003038:	e012      	b.n	8003060 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	7812      	ldrb	r2, [r2, #0]
 8003046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d148      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x3aa>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d042      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	d923      	bls.n	80030d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	b292      	uxth	r2, r2
 8003096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	1c9a      	adds	r2, r3, #2
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b02      	subs	r3, #2
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d81f      	bhi.n	8003100 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e016      	b.n	8003100 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f103 020c 	add.w	r2, r3, #12
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	7812      	ldrb	r2, [r2, #0]
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003100:	2301      	movs	r3, #1
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003104:	f7fd fec2 	bl	8000e8c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003110:	429a      	cmp	r2, r3
 8003112:	d803      	bhi.n	800311c <HAL_SPI_TransmitReceive+0x3c2>
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311a:	d102      	bne.n	8003122 <HAL_SPI_TransmitReceive+0x3c8>
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003128:	e01c      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	f47f af5b 	bne.w	8002fec <HAL_SPI_TransmitReceive+0x292>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	f47f af54 	bne.w	8002fec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f98f 	bl	800346c <SPI_EndRxTxTransaction>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	661a      	str	r2, [r3, #96]	; 0x60
 8003160:	e000      	b.n	8003164 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	; 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003190:	f7fd fe7c 	bl	8000e8c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	4413      	add	r3, r2
 800319e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031a0:	f7fd fe74 	bl	8000e8c <HAL_GetTick>
 80031a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	015b      	lsls	r3, r3, #5
 80031ac:	0d1b      	lsrs	r3, r3, #20
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b6:	e054      	b.n	8003262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d050      	beq.n	8003262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031c0:	f7fd fe64 	bl	8000e8c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d902      	bls.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d13d      	bne.n	8003252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ee:	d111      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f8:	d004      	beq.n	8003204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003202:	d107      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321c:	d10f      	bne.n	800323e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800323c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e017      	b.n	8003282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3b01      	subs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	429a      	cmp	r2, r3
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	429a      	cmp	r2, r3
 800327e:	d19b      	bne.n	80031b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000000 	.word	0x20000000

08003290 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032a2:	f7fd fdf3 	bl	8000e8c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032b2:	f7fd fdeb 	bl	8000e8c <HAL_GetTick>
 80032b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032c0:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	00da      	lsls	r2, r3, #3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	0d1b      	lsrs	r3, r3, #20
 80032d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032d8:	e060      	b.n	800339c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032e0:	d107      	bne.n	80032f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d050      	beq.n	800339c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032fa:	f7fd fdc7 	bl	8000e8c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	429a      	cmp	r2, r3
 8003308:	d902      	bls.n	8003310 <SPI_WaitFifoStateUntilTimeout+0x80>
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	2b00      	cmp	r3, #0
 800330e:	d13d      	bne.n	800338c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800331e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003328:	d111      	bne.n	800334e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003332:	d004      	beq.n	800333e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	d107      	bne.n	800334e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	d10f      	bne.n	8003378 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003376:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e010      	b.n	80033ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3b01      	subs	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d196      	bne.n	80032da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3728      	adds	r7, #40	; 0x28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000000 	.word	0x20000000

080033bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033d0:	d111      	bne.n	80033f6 <SPI_EndRxTransaction+0x3a>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033da:	d004      	beq.n	80033e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e4:	d107      	bne.n	80033f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff febd 	bl	8003180 <SPI_WaitFlagStateUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e023      	b.n	8003464 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003424:	d11d      	bne.n	8003462 <SPI_EndRxTransaction+0xa6>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342e:	d004      	beq.n	800343a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d113      	bne.n	8003462 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff22 	bl	8003290 <SPI_WaitFifoStateUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e000      	b.n	8003464 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2200      	movs	r2, #0
 8003480:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff ff03 	bl	8003290 <SPI_WaitFifoStateUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e027      	b.n	80034f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2200      	movs	r2, #0
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff fe68 	bl	8003180 <SPI_WaitFlagStateUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e014      	b.n	80034f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff fedc 	bl	8003290 <SPI_WaitFifoStateUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e000      	b.n	80034f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e049      	b.n	800359e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f841 	bl	80035a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 f9dc 	bl	80038f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d001      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e03b      	b.n	800364c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_TIM_Base_Start_IT+0x9c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x4e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fe:	d004      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x4e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a15      	ldr	r2, [pc, #84]	; (800365c <HAL_TIM_Base_Start_IT+0xa0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d115      	bne.n	8003636 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_TIM_Base_Start_IT+0xa4>)
 8003612:	4013      	ands	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b06      	cmp	r3, #6
 800361a:	d015      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x8c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003622:	d011      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003634:	e008      	b.n	8003648 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e000      	b.n	800364a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40012c00 	.word	0x40012c00
 800365c:	40014000 	.word	0x40014000
 8003660:	00010007 	.word	0x00010007

08003664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0202 	mvn.w	r2, #2
 8003690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f905 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8f7 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f908 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d122      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d11b      	bne.n	8003714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0204 	mvn.w	r2, #4
 80036e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2202      	movs	r2, #2
 80036ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f8db 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003700:	e005      	b.n	800370e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8cd 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8de 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d122      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d11b      	bne.n	8003768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0208 	mvn.w	r2, #8
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8b1 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8a3 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f8b4 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	2b10      	cmp	r3, #16
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b10      	cmp	r3, #16
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0210 	mvn.w	r2, #16
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2208      	movs	r2, #8
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f887 	bl	80038b6 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f879 	bl	80038a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f88a 	bl	80038ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0201 	mvn.w	r2, #1
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd f99a 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b80      	cmp	r3, #128	; 0x80
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8de 	bl	80039d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003822:	d10e      	bne.n	8003842 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f8d1 	bl	80039e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d10e      	bne.n	800386e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d107      	bne.n	800386e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f838 	bl	80038de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b20      	cmp	r3, #32
 800387a:	d10e      	bne.n	800389a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f06f 0220 	mvn.w	r2, #32
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f891 	bl	80039bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <TIM_Base_SetConfig+0xbc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0x20>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d108      	bne.n	8003926 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <TIM_Base_SetConfig+0xbc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00b      	beq.n	8003946 <TIM_Base_SetConfig+0x52>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003934:	d007      	beq.n	8003946 <TIM_Base_SetConfig+0x52>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <TIM_Base_SetConfig+0xc0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d003      	beq.n	8003946 <TIM_Base_SetConfig+0x52>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <TIM_Base_SetConfig+0xc4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d108      	bne.n	8003958 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <TIM_Base_SetConfig+0xbc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0xa0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <TIM_Base_SetConfig+0xc0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0xa0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <TIM_Base_SetConfig+0xc4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d103      	bne.n	800399c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	615a      	str	r2, [r3, #20]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400

080039bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e040      	b.n	8003a8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd f900 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	; 0x24
 8003a24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f82c 	bl	8003a94 <UART_SetConfig>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e022      	b.n	8003a8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa4c 	bl	8003eec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fad3 	bl	8004030 <UART_CheckIdleState>
 8003a8a:	4603      	mov	r3, r0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b08a      	sub	sp, #40	; 0x28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4bb4      	ldr	r3, [pc, #720]	; (8003d94 <UART_SetConfig+0x300>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4aa9      	ldr	r2, [pc, #676]	; (8003d98 <UART_SetConfig+0x304>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d004      	beq.n	8003b00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afc:	4313      	orrs	r3, r2
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4aa0      	ldr	r2, [pc, #640]	; (8003d9c <UART_SetConfig+0x308>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d126      	bne.n	8003b6c <UART_SetConfig+0xd8>
 8003b1e:	4ba0      	ldr	r3, [pc, #640]	; (8003da0 <UART_SetConfig+0x30c>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d81b      	bhi.n	8003b64 <UART_SetConfig+0xd0>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <UART_SetConfig+0xa0>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b45 	.word	0x08003b45
 8003b38:	08003b55 	.word	0x08003b55
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b5d 	.word	0x08003b5d
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4a:	e080      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b52:	e07c      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003b54:	2304      	movs	r3, #4
 8003b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5a:	e078      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e074      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003b64:	2310      	movs	r3, #16
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6a:	e070      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a8c      	ldr	r2, [pc, #560]	; (8003da4 <UART_SetConfig+0x310>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d138      	bne.n	8003be8 <UART_SetConfig+0x154>
 8003b76:	4b8a      	ldr	r3, [pc, #552]	; (8003da0 <UART_SetConfig+0x30c>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b0c      	cmp	r3, #12
 8003b82:	d82d      	bhi.n	8003be0 <UART_SetConfig+0x14c>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <UART_SetConfig+0xf8>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bc1 	.word	0x08003bc1
 8003b90:	08003be1 	.word	0x08003be1
 8003b94:	08003be1 	.word	0x08003be1
 8003b98:	08003be1 	.word	0x08003be1
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003be1 	.word	0x08003be1
 8003ba4:	08003be1 	.word	0x08003be1
 8003ba8:	08003be1 	.word	0x08003be1
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003be1 	.word	0x08003be1
 8003bb4:	08003be1 	.word	0x08003be1
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003bd9 	.word	0x08003bd9
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e042      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e03e      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd6:	e03a      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003bd8:	2308      	movs	r3, #8
 8003bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bde:	e036      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003be0:	2310      	movs	r3, #16
 8003be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be6:	e032      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a6a      	ldr	r2, [pc, #424]	; (8003d98 <UART_SetConfig+0x304>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d12a      	bne.n	8003c48 <UART_SetConfig+0x1b4>
 8003bf2:	4b6b      	ldr	r3, [pc, #428]	; (8003da0 <UART_SetConfig+0x30c>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c00:	d01a      	beq.n	8003c38 <UART_SetConfig+0x1a4>
 8003c02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c06:	d81b      	bhi.n	8003c40 <UART_SetConfig+0x1ac>
 8003c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0c:	d00c      	beq.n	8003c28 <UART_SetConfig+0x194>
 8003c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c12:	d815      	bhi.n	8003c40 <UART_SetConfig+0x1ac>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <UART_SetConfig+0x18c>
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1c:	d008      	beq.n	8003c30 <UART_SetConfig+0x19c>
 8003c1e:	e00f      	b.n	8003c40 <UART_SetConfig+0x1ac>
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e012      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e00e      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003c30:	2304      	movs	r3, #4
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e00a      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003c38:	2308      	movs	r3, #8
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3e:	e006      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003c40:	2310      	movs	r3, #16
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c46:	e002      	b.n	8003c4e <UART_SetConfig+0x1ba>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a51      	ldr	r2, [pc, #324]	; (8003d98 <UART_SetConfig+0x304>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d17a      	bne.n	8003d4e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d824      	bhi.n	8003caa <UART_SetConfig+0x216>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0x1d4>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003cab 	.word	0x08003cab
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003cab 	.word	0x08003cab
 8003c78:	08003c9b 	.word	0x08003c9b
 8003c7c:	08003cab 	.word	0x08003cab
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cab 	.word	0x08003cab
 8003c88:	08003ca3 	.word	0x08003ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7fe f97e 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8003c90:	61f8      	str	r0, [r7, #28]
        break;
 8003c92:	e010      	b.n	8003cb6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c94:	4b44      	ldr	r3, [pc, #272]	; (8003da8 <UART_SetConfig+0x314>)
 8003c96:	61fb      	str	r3, [r7, #28]
        break;
 8003c98:	e00d      	b.n	8003cb6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7fe f8df 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8003c9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ca0:	e009      	b.n	8003cb6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca6:	61fb      	str	r3, [r7, #28]
        break;
 8003ca8:	e005      	b.n	8003cb6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8107 	beq.w	8003ecc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d305      	bcc.n	8003cda <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d903      	bls.n	8003ce2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ce0:	e0f4      	b.n	8003ecc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	461c      	mov	r4, r3
 8003ce8:	4615      	mov	r5, r2
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	022b      	lsls	r3, r5, #8
 8003cf4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cf8:	0222      	lsls	r2, r4, #8
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	6849      	ldr	r1, [r1, #4]
 8003cfe:	0849      	lsrs	r1, r1, #1
 8003d00:	2000      	movs	r0, #0
 8003d02:	4688      	mov	r8, r1
 8003d04:	4681      	mov	r9, r0
 8003d06:	eb12 0a08 	adds.w	sl, r2, r8
 8003d0a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d1c:	4650      	mov	r0, sl
 8003d1e:	4659      	mov	r1, fp
 8003d20:	f7fc fa60 	bl	80001e4 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d32:	d308      	bcc.n	8003d46 <UART_SetConfig+0x2b2>
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d204      	bcs.n	8003d46 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	e0c2      	b.n	8003ecc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d4c:	e0be      	b.n	8003ecc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d56:	d16a      	bne.n	8003e2e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003d58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d834      	bhi.n	8003dca <UART_SetConfig+0x336>
 8003d60:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x2d4>)
 8003d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d66:	bf00      	nop
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003db5 	.word	0x08003db5
 8003d74:	08003dcb 	.word	0x08003dcb
 8003d78:	08003dbb 	.word	0x08003dbb
 8003d7c:	08003dcb 	.word	0x08003dcb
 8003d80:	08003dcb 	.word	0x08003dcb
 8003d84:	08003dcb 	.word	0x08003dcb
 8003d88:	08003dc3 	.word	0x08003dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f7fe f8fe 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8003d90:	61f8      	str	r0, [r7, #28]
        break;
 8003d92:	e020      	b.n	8003dd6 <UART_SetConfig+0x342>
 8003d94:	efff69f3 	.word	0xefff69f3
 8003d98:	40008000 	.word	0x40008000
 8003d9c:	40013800 	.word	0x40013800
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40004400 	.word	0x40004400
 8003da8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7fe f904 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8003db0:	61f8      	str	r0, [r7, #28]
        break;
 8003db2:	e010      	b.n	8003dd6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b4c      	ldr	r3, [pc, #304]	; (8003ee8 <UART_SetConfig+0x454>)
 8003db6:	61fb      	str	r3, [r7, #28]
        break;
 8003db8:	e00d      	b.n	8003dd6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7fe f84f 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8003dbe:	61f8      	str	r0, [r7, #28]
        break;
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc6:	61fb      	str	r3, [r7, #28]
        break;
 8003dc8:	e005      	b.n	8003dd6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d077      	beq.n	8003ecc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005a      	lsls	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	d916      	bls.n	8003e26 <UART_SetConfig+0x392>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfe:	d212      	bcs.n	8003e26 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f023 030f 	bic.w	r3, r3, #15
 8003e08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	8afb      	ldrh	r3, [r7, #22]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	8afa      	ldrh	r2, [r7, #22]
 8003e22:	60da      	str	r2, [r3, #12]
 8003e24:	e052      	b.n	8003ecc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e2c:	e04e      	b.n	8003ecc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d827      	bhi.n	8003e86 <UART_SetConfig+0x3f2>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x3a8>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e87 	.word	0x08003e87
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e87 	.word	0x08003e87
 8003e54:	08003e87 	.word	0x08003e87
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003e7f 	.word	0x08003e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7fe f894 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8003e64:	61f8      	str	r0, [r7, #28]
        break;
 8003e66:	e014      	b.n	8003e92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e68:	f7fe f8a6 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8003e6c:	61f8      	str	r0, [r7, #28]
        break;
 8003e6e:	e010      	b.n	8003e92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <UART_SetConfig+0x454>)
 8003e72:	61fb      	str	r3, [r7, #28]
        break;
 8003e74:	e00d      	b.n	8003e92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e76:	f7fd fff1 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8003e7a:	61f8      	str	r0, [r7, #28]
        break;
 8003e7c:	e009      	b.n	8003e92 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e82:	61fb      	str	r3, [r7, #28]
        break;
 8003e84:	e005      	b.n	8003e92 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e90:	bf00      	nop
    }

    if (pclk != 0U)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d019      	beq.n	8003ecc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	085a      	lsrs	r2, r3, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b0f      	cmp	r3, #15
 8003eb0:	d909      	bls.n	8003ec6 <UART_SetConfig+0x432>
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb8:	d205      	bcs.n	8003ec6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60da      	str	r2, [r3, #12]
 8003ec4:	e002      	b.n	8003ecc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ed8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	; 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee6:	bf00      	nop
 8003ee8:	00f42400 	.word	0x00f42400

08003eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01a      	beq.n	8004002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fea:	d10a      	bne.n	8004002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af02      	add	r7, sp, #8
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004040:	f7fc ff24 	bl	8000e8c <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b08      	cmp	r3, #8
 8004052:	d10e      	bne.n	8004072 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f82d 	bl	80040c2 <UART_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e023      	b.n	80040ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b04      	cmp	r3, #4
 800407e:	d10e      	bne.n	800409e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f817 	bl	80040c2 <UART_WaitOnFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e00d      	b.n	80040ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b09c      	sub	sp, #112	; 0x70
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	4613      	mov	r3, r2
 80040d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d2:	e0a5      	b.n	8004220 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	f000 80a1 	beq.w	8004220 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7fc fed5 	bl	8000e8c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80040ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d13e      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004108:	667b      	str	r3, [r7, #100]	; 0x64
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004114:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004118:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e6      	bne.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3308      	adds	r3, #8
 800412c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	f023 0301 	bic.w	r3, r3, #1
 800413c:	663b      	str	r3, [r7, #96]	; 0x60
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004146:	64ba      	str	r2, [r7, #72]	; 0x48
 8004148:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800414c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e067      	b.n	8004242 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d04f      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418e:	d147      	bne.n	8004220 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004198:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e6      	bne.n	800419a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3308      	adds	r3, #8
 80041d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	613b      	str	r3, [r7, #16]
   return(result);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041ec:	623a      	str	r2, [r7, #32]
 80041ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	69f9      	ldr	r1, [r7, #28]
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2220      	movs	r2, #32
 800420a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e010      	b.n	8004242 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4013      	ands	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	429a      	cmp	r2, r3
 800423c:	f43f af4a 	beq.w	80040d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3770      	adds	r7, #112	; 0x70
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	4603      	mov	r3, r0
 8004252:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425c:	2b84      	cmp	r3, #132	; 0x84
 800425e:	d005      	beq.n	800426c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004260:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	3303      	adds	r3, #3
 800426a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800427e:	f001 f9a5 	bl	80055cc <vTaskStartScheduler>
  
  return osOK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}

08004288 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af04      	add	r7, sp, #16
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d020      	beq.n	80042dc <osThreadCreate+0x54>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01c      	beq.n	80042dc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685c      	ldr	r4, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681d      	ldr	r5, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691e      	ldr	r6, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ffc8 	bl	800424a <makeFreeRtosPriority>
 80042ba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042c4:	9202      	str	r2, [sp, #8]
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	9100      	str	r1, [sp, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	4632      	mov	r2, r6
 80042ce:	4629      	mov	r1, r5
 80042d0:	4620      	mov	r0, r4
 80042d2:	f000 ff9d 	bl	8005210 <xTaskCreateStatic>
 80042d6:	4603      	mov	r3, r0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e01c      	b.n	8004316 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685c      	ldr	r4, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042e8:	b29e      	uxth	r6, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ffaa 	bl	800424a <makeFreeRtosPriority>
 80042f6:	4602      	mov	r2, r0
 80042f8:	f107 030c 	add.w	r3, r7, #12
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	9200      	str	r2, [sp, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	4632      	mov	r2, r6
 8004304:	4629      	mov	r1, r5
 8004306:	4620      	mov	r0, r4
 8004308:	f000 ffdf 	bl	80052ca <xTaskCreate>
 800430c:	4603      	mov	r3, r0
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004320 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <osDelay+0x16>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	e000      	b.n	8004338 <osDelay+0x18>
 8004336:	2301      	movs	r3, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f913 	bl	8005564 <vTaskDelay>
  
  return osOK;
 800433e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <osSemaphoreCreate+0x40>
    if (count == 1) {
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10a      	bne.n	8004376 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2203      	movs	r2, #3
 8004366:	9200      	str	r2, [sp, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	2100      	movs	r1, #0
 800436c:	2001      	movs	r0, #1
 800436e:	f000 f947 	bl	8004600 <xQueueGenericCreateStatic>
 8004372:	4603      	mov	r3, r0
 8004374:	e023      	b.n	80043be <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	6839      	ldr	r1, [r7, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fa0f 	bl	80047a2 <xQueueCreateCountingSemaphoreStatic>
 8004384:	4603      	mov	r3, r0
 8004386:	e01a      	b.n	80043be <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d110      	bne.n	80043b0 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800438e:	2203      	movs	r2, #3
 8004390:	2100      	movs	r1, #0
 8004392:	2001      	movs	r0, #1
 8004394:	f000 f9ac 	bl	80046f0 <xQueueGenericCreate>
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <osSemaphoreCreate+0x64>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2200      	movs	r2, #0
 80043a4:	2100      	movs	r1, #0
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa66 	bl	8004878 <xQueueGenericSend>
      return sema;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	e006      	b.n	80043be <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fa2a 	bl	8004810 <xQueueCreateCountingSemaphore>
 80043bc:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f103 0208 	add.w	r2, r3, #8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f103 0208 	add.w	r2, r3, #8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f103 0208 	add.w	r2, r3, #8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	601a      	str	r2, [r3, #0]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d103      	bne.n	8004488 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e00c      	b.n	80044a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3308      	adds	r3, #8
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e002      	b.n	8004496 <vListInsert+0x2e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d2f6      	bcs.n	8004490 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6892      	ldr	r2, [r2, #8]
 80044f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6852      	ldr	r2, [r2, #4]
 80044fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d103      	bne.n	800450e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1e5a      	subs	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800455a:	f001 ff9b 	bl	8006494 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	441a      	add	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	3b01      	subs	r3, #1
 800458c:	68f9      	ldr	r1, [r7, #12]
 800458e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	441a      	add	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	22ff      	movs	r2, #255	; 0xff
 800459e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22ff      	movs	r2, #255	; 0xff
 80045a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d114      	bne.n	80045da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01a      	beq.n	80045ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3310      	adds	r3, #16
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 fa57 	bl	8005a70 <xTaskRemoveFromEventList>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d012      	beq.n	80045ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <xQueueGenericReset+0xcc>)
 80045ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	e009      	b.n	80045ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3310      	adds	r3, #16
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fef1 	bl	80043c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3324      	adds	r3, #36	; 0x24
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff feec 	bl	80043c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045ee:	f001 ff81 	bl	80064f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045f2:	2301      	movs	r3, #1
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	e000ed04 	.word	0xe000ed04

08004600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08e      	sub	sp, #56	; 0x38
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <xQueueGenericCreateStatic+0x52>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <xQueueGenericCreateStatic+0x56>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <xQueueGenericCreateStatic+0x58>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	623b      	str	r3, [r7, #32]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <xQueueGenericCreateStatic+0x7e>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <xQueueGenericCreateStatic+0x82>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <xQueueGenericCreateStatic+0x84>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468c:	f383 8811 	msr	BASEPRI, r3
 8004690:	f3bf 8f6f 	isb	sy
 8004694:	f3bf 8f4f 	dsb	sy
 8004698:	61fb      	str	r3, [r7, #28]
}
 800469a:	bf00      	nop
 800469c:	e7fe      	b.n	800469c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800469e:	2348      	movs	r3, #72	; 0x48
 80046a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b48      	cmp	r3, #72	; 0x48
 80046a6:	d00a      	beq.n	80046be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	61bb      	str	r3, [r7, #24]
}
 80046ba:	bf00      	nop
 80046bc:	e7fe      	b.n	80046bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80046be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4613      	mov	r3, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f83f 	bl	8004764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3730      	adds	r7, #48	; 0x30
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	613b      	str	r3, [r7, #16]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	3348      	adds	r3, #72	; 0x48
 8004728:	4618      	mov	r0, r3
 800472a:	f001 ffd5 	bl	80066d8 <pvPortMalloc>
 800472e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d011      	beq.n	800475a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	3348      	adds	r3, #72	; 0x48
 800473e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004748:	79fa      	ldrb	r2, [r7, #7]
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f805 	bl	8004764 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800475a:	69bb      	ldr	r3, [r7, #24]
	}
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e002      	b.n	8004786 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004792:	2101      	movs	r1, #1
 8004794:	69b8      	ldr	r0, [r7, #24]
 8004796:	f7ff fecb 	bl	8004530 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b08a      	sub	sp, #40	; 0x28
 80047a6:	af02      	add	r7, sp, #8
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	61bb      	str	r3, [r7, #24]
}
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90a      	bls.n	80047e8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	617b      	str	r3, [r7, #20]
}
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80047e8:	2302      	movs	r3, #2
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	2100      	movs	r1, #0
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff ff04 	bl	8004600 <xQueueGenericCreateStatic>
 80047f8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004806:	69fb      	ldr	r3, [r7, #28]
	}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	613b      	str	r3, [r7, #16]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	429a      	cmp	r2, r3
 800483c:	d90a      	bls.n	8004854 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60fb      	str	r3, [r7, #12]
}
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004854:	2202      	movs	r2, #2
 8004856:	2100      	movs	r1, #0
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff49 	bl	80046f0 <xQueueGenericCreate>
 800485e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800486c:	697b      	ldr	r3, [r7, #20]
	}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08e      	sub	sp, #56	; 0x38
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004886:	2300      	movs	r3, #0
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <xQueueGenericSend+0x32>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <xQueueGenericSend+0x40>
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <xQueueGenericSend+0x44>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <xQueueGenericSend+0x46>
 80048bc:	2300      	movs	r3, #0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <xQueueGenericSend+0x60>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d103      	bne.n	80048e6 <xQueueGenericSend+0x6e>
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <xQueueGenericSend+0x72>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <xQueueGenericSend+0x74>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericSend+0x8e>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	623b      	str	r3, [r7, #32]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004906:	f001 fa73 	bl	8005df0 <xTaskGetSchedulerState>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <xQueueGenericSend+0x9e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <xQueueGenericSend+0xa2>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <xQueueGenericSend+0xa4>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <xQueueGenericSend+0xbe>
	__asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	61fb      	str	r3, [r7, #28]
}
 8004932:	bf00      	nop
 8004934:	e7fe      	b.n	8004934 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004936:	f001 fdad 	bl	8006494 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <xQueueGenericSend+0xd4>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d129      	bne.n	80049a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004952:	f000 fb4d 	bl	8004ff0 <prvCopyDataToQueue>
 8004956:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2b00      	cmp	r3, #0
 800495e:	d010      	beq.n	8004982 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	3324      	adds	r3, #36	; 0x24
 8004964:	4618      	mov	r0, r3
 8004966:	f001 f883 	bl	8005a70 <xTaskRemoveFromEventList>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d013      	beq.n	8004998 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004970:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <xQueueGenericSend+0x1f8>)
 8004972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	e00a      	b.n	8004998 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004988:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <xQueueGenericSend+0x1f8>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004998:	f001 fdac 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 800499c:	2301      	movs	r3, #1
 800499e:	e063      	b.n	8004a68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049a6:	f001 fda5 	bl	80064f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e05c      	b.n	8004a68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 f8bb 	bl	8005b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049be:	2301      	movs	r3, #1
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049c2:	f001 fd97 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049c6:	f000 fe6b 	bl	80056a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049ca:	f001 fd63 	bl	8006494 <vPortEnterCritical>
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049d4:	b25b      	sxtb	r3, r3
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d103      	bne.n	80049e4 <xQueueGenericSend+0x16c>
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ea:	b25b      	sxtb	r3, r3
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f0:	d103      	bne.n	80049fa <xQueueGenericSend+0x182>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049fa:	f001 fd7b 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049fe:	1d3a      	adds	r2, r7, #4
 8004a00:	f107 0314 	add.w	r3, r7, #20
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 f8aa 	bl	8005b60 <xTaskCheckForTimeOut>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d124      	bne.n	8004a5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a14:	f000 fbe4 	bl	80051e0 <prvIsQueueFull>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d018      	beq.n	8004a50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	3310      	adds	r3, #16
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fffe 	bl	8005a28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a2e:	f000 fb6f 	bl	8005110 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a32:	f000 fe43 	bl	80056bc <xTaskResumeAll>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f47f af7c 	bne.w	8004936 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <xQueueGenericSend+0x1f8>)
 8004a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	e772      	b.n	8004936 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a52:	f000 fb5d 	bl	8005110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a56:	f000 fe31 	bl	80056bc <xTaskResumeAll>
 8004a5a:	e76c      	b.n	8004936 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a5e:	f000 fb57 	bl	8005110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a62:	f000 fe2b 	bl	80056bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3738      	adds	r7, #56	; 0x38
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b090      	sub	sp, #64	; 0x40
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <xQueueGenericSendFromISR+0x3c>
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <xQueueGenericSendFromISR+0x40>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <xQueueGenericSendFromISR+0x42>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d103      	bne.n	8004ade <xQueueGenericSendFromISR+0x6a>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <xQueueGenericSendFromISR+0x6e>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <xQueueGenericSendFromISR+0x70>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10a      	bne.n	8004afe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	623b      	str	r3, [r7, #32]
}
 8004afa:	bf00      	nop
 8004afc:	e7fe      	b.n	8004afc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004afe:	f001 fdab 	bl	8006658 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b02:	f3ef 8211 	mrs	r2, BASEPRI
 8004b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	61fa      	str	r2, [r7, #28]
 8004b18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <xQueueGenericSendFromISR+0xbc>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d12f      	bne.n	8004b90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b46:	f000 fa53 	bl	8004ff0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d112      	bne.n	8004b7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	3324      	adds	r3, #36	; 0x24
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 ff85 	bl	8005a70 <xTaskRemoveFromEventList>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e007      	b.n	8004b8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	b25a      	sxtb	r2, r3
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b8e:	e001      	b.n	8004b94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3740      	adds	r7, #64	; 0x40
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <xQueueReceive+0x30>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	623b      	str	r3, [r7, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <xQueueReceive+0x3e>
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <xQueueReceive+0x42>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <xQueueReceive+0x44>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10a      	bne.n	8004c0a <xQueueReceive+0x5e>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	61fb      	str	r3, [r7, #28]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c0a:	f001 f8f1 	bl	8005df0 <xTaskGetSchedulerState>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <xQueueReceive+0x6e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <xQueueReceive+0x72>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueReceive+0x74>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <xQueueReceive+0x8e>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	61bb      	str	r3, [r7, #24]
}
 8004c36:	bf00      	nop
 8004c38:	e7fe      	b.n	8004c38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c3a:	f001 fc2b 	bl	8006494 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01f      	beq.n	8004c8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4e:	f000 fa39 	bl	80050c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00f      	beq.n	8004c82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	3310      	adds	r3, #16
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 ff02 	bl	8005a70 <xTaskRemoveFromEventList>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c72:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <xQueueReceive+0x1bc>)
 8004c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c82:	f001 fc37 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e069      	b.n	8004d5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c90:	f001 fc30 	bl	80064f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e062      	b.n	8004d5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c9e:	f107 0310 	add.w	r3, r7, #16
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ff46 	bl	8005b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cac:	f001 fc22 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cb0:	f000 fcf6 	bl	80056a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cb4:	f001 fbee 	bl	8006494 <vPortEnterCritical>
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cbe:	b25b      	sxtb	r3, r3
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d103      	bne.n	8004cce <xQueueReceive+0x122>
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd4:	b25b      	sxtb	r3, r3
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d103      	bne.n	8004ce4 <xQueueReceive+0x138>
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ce4:	f001 fc06 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ce8:	1d3a      	adds	r2, r7, #4
 8004cea:	f107 0310 	add.w	r3, r7, #16
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 ff35 	bl	8005b60 <xTaskCheckForTimeOut>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d123      	bne.n	8004d44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 fa59 	bl	80051b4 <prvIsQueueEmpty>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d017      	beq.n	8004d38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	3324      	adds	r3, #36	; 0x24
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fe89 	bl	8005a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d18:	f000 f9fa 	bl	8005110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d1c:	f000 fcce 	bl	80056bc <xTaskResumeAll>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d189      	bne.n	8004c3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <xQueueReceive+0x1bc>)
 8004d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	e780      	b.n	8004c3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d3a:	f000 f9e9 	bl	8005110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d3e:	f000 fcbd 	bl	80056bc <xTaskResumeAll>
 8004d42:	e77a      	b.n	8004c3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d46:	f000 f9e3 	bl	8005110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d4a:	f000 fcb7 	bl	80056bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d50:	f000 fa30 	bl	80051b4 <prvIsQueueEmpty>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f43f af6f 	beq.w	8004c3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3730      	adds	r7, #48	; 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08e      	sub	sp, #56	; 0x38
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	623b      	str	r3, [r7, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	61fb      	str	r3, [r7, #28]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dbc:	f001 f818 	bl	8005df0 <xTaskGetSchedulerState>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <xQueueSemaphoreTake+0x60>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <xQueueSemaphoreTake+0x64>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <xQueueSemaphoreTake+0x66>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	61bb      	str	r3, [r7, #24]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dec:	f001 fb52 	bl	8006494 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d024      	beq.n	8004e46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	1e5a      	subs	r2, r3, #1
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e0c:	f001 f998 	bl	8006140 <pvTaskIncrementMutexHeldCount>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00f      	beq.n	8004e3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	3310      	adds	r3, #16
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fe24 	bl	8005a70 <xTaskRemoveFromEventList>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e2e:	4b54      	ldr	r3, [pc, #336]	; (8004f80 <xQueueSemaphoreTake+0x214>)
 8004e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e3e:	f001 fb59 	bl	80064f4 <vPortExitCritical>
				return pdPASS;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e097      	b.n	8004f76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d111      	bne.n	8004e70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	617b      	str	r3, [r7, #20]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e68:	f001 fb44 	bl	80064f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e082      	b.n	8004f76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e76:	f107 030c 	add.w	r3, r7, #12
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fe5a 	bl	8005b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e84:	f001 fb36 	bl	80064f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e88:	f000 fc0a 	bl	80056a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e8c:	f001 fb02 	bl	8006494 <vPortEnterCritical>
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d103      	bne.n	8004ea6 <xQueueSemaphoreTake+0x13a>
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eac:	b25b      	sxtb	r3, r3
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d103      	bne.n	8004ebc <xQueueSemaphoreTake+0x150>
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ebc:	f001 fb1a 	bl	80064f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ec0:	463a      	mov	r2, r7
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fe49 	bl	8005b60 <xTaskCheckForTimeOut>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d132      	bne.n	8004f3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ed6:	f000 f96d 	bl	80051b4 <prvIsQueueEmpty>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d026      	beq.n	8004f2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004ee8:	f001 fad4 	bl	8006494 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 ff9b 	bl	8005e2c <xTaskPriorityInherit>
 8004ef6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004ef8:	f001 fafc 	bl	80064f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	3324      	adds	r3, #36	; 0x24
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fd8f 	bl	8005a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f0c:	f000 f900 	bl	8005110 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f10:	f000 fbd4 	bl	80056bc <xTaskResumeAll>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f47f af68 	bne.w	8004dec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <xQueueSemaphoreTake+0x214>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	e75e      	b.n	8004dec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f30:	f000 f8ee 	bl	8005110 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f34:	f000 fbc2 	bl	80056bc <xTaskResumeAll>
 8004f38:	e758      	b.n	8004dec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f3c:	f000 f8e8 	bl	8005110 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f40:	f000 fbbc 	bl	80056bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f46:	f000 f935 	bl	80051b4 <prvIsQueueEmpty>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f43f af4d 	beq.w	8004dec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004f58:	f001 fa9c 	bl	8006494 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f5e:	f000 f82f 	bl	8004fc0 <prvGetDisinheritPriorityAfterTimeout>
 8004f62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 f85a 	bl	8006024 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f70:	f001 fac0 	bl	80064f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3738      	adds	r7, #56	; 0x38
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10a      	bne.n	8004fac <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60fb      	str	r3, [r7, #12]
}
 8004fa8:	bf00      	nop
 8004faa:	e7fe      	b.n	8004faa <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8004fb2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d006      	beq.n	8004fde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1c3 0307 	rsb	r3, r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e001      	b.n	8004fe2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
	}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10d      	bne.n	800502a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d14d      	bne.n	80050b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	4618      	mov	r0, r3
 800501c:	f000 ff7c 	bl	8005f18 <xTaskPriorityDisinherit>
 8005020:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	e043      	b.n	80050b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d119      	bne.n	8005064 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6858      	ldr	r0, [r3, #4]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	461a      	mov	r2, r3
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	f001 fd5c 	bl	8006af8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	441a      	add	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	d32b      	bcc.n	80050b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	e026      	b.n	80050b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68d8      	ldr	r0, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	461a      	mov	r2, r3
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	f001 fd42 	bl	8006af8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	425b      	negs	r3, r3
 800507e:	441a      	add	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d207      	bcs.n	80050a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	425b      	negs	r3, r3
 800509a:	441a      	add	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d105      	bne.n	80050b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050ba:	697b      	ldr	r3, [r7, #20]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	441a      	add	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d303      	bcc.n	80050f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68d9      	ldr	r1, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	461a      	mov	r2, r3
 8005102:	6838      	ldr	r0, [r7, #0]
 8005104:	f001 fcf8 	bl	8006af8 <memcpy>
	}
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005118:	f001 f9bc 	bl	8006494 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005122:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005124:	e011      	b.n	800514a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b00      	cmp	r3, #0
 800512c:	d012      	beq.n	8005154 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3324      	adds	r3, #36	; 0x24
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fc9c 	bl	8005a70 <xTaskRemoveFromEventList>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800513e:	f000 fd71 	bl	8005c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	3b01      	subs	r3, #1
 8005146:	b2db      	uxtb	r3, r3
 8005148:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800514a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dce9      	bgt.n	8005126 <prvUnlockQueue+0x16>
 8005152:	e000      	b.n	8005156 <prvUnlockQueue+0x46>
					break;
 8005154:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	22ff      	movs	r2, #255	; 0xff
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800515e:	f001 f9c9 	bl	80064f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005162:	f001 f997 	bl	8006494 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800516c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800516e:	e011      	b.n	8005194 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d012      	beq.n	800519e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3310      	adds	r3, #16
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fc77 	bl	8005a70 <xTaskRemoveFromEventList>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005188:	f000 fd4c 	bl	8005c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800518c:	7bbb      	ldrb	r3, [r7, #14]
 800518e:	3b01      	subs	r3, #1
 8005190:	b2db      	uxtb	r3, r3
 8005192:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dce9      	bgt.n	8005170 <prvUnlockQueue+0x60>
 800519c:	e000      	b.n	80051a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800519e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	22ff      	movs	r2, #255	; 0xff
 80051a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051a8:	f001 f9a4 	bl	80064f4 <vPortExitCritical>
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051bc:	f001 f96a 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051c8:	2301      	movs	r3, #1
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	e001      	b.n	80051d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d2:	f001 f98f 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 80051d6:	68fb      	ldr	r3, [r7, #12]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051e8:	f001 f954 	bl	8006494 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d102      	bne.n	80051fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	e001      	b.n	8005202 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005202:	f001 f977 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af04      	add	r7, sp, #16
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	623b      	str	r3, [r7, #32]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xTaskCreateStatic+0x46>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	61fb      	str	r3, [r7, #28]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005256:	23b4      	movs	r3, #180	; 0xb4
 8005258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2bb4      	cmp	r3, #180	; 0xb4
 800525e:	d00a      	beq.n	8005276 <xTaskCreateStatic+0x66>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61bb      	str	r3, [r7, #24]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005276:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01e      	beq.n	80052bc <xTaskCreateStatic+0xac>
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01b      	beq.n	80052bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800528c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	2202      	movs	r2, #2
 8005292:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005296:	2300      	movs	r3, #0
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	9302      	str	r3, [sp, #8]
 800529e:	f107 0314 	add.w	r3, r7, #20
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f850 	bl	8005354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052b6:	f000 f8eb 	bl	8005490 <prvAddNewTaskToReadyList>
 80052ba:	e001      	b.n	80052c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052c0:	697b      	ldr	r3, [r7, #20]
	}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3728      	adds	r7, #40	; 0x28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b08c      	sub	sp, #48	; 0x30
 80052ce:	af04      	add	r7, sp, #16
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	603b      	str	r3, [r7, #0]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 f9fa 	bl	80066d8 <pvPortMalloc>
 80052e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052ec:	20b4      	movs	r0, #180	; 0xb4
 80052ee:	f001 f9f3 	bl	80066d8 <pvPortMalloc>
 80052f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005300:	e005      	b.n	800530e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005302:	6978      	ldr	r0, [r7, #20]
 8005304:	f001 fab4 	bl	8006870 <vPortFree>
 8005308:	e001      	b.n	800530e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d017      	beq.n	8005344 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	2300      	movs	r3, #0
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f80e 	bl	8005354 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005338:	69f8      	ldr	r0, [r7, #28]
 800533a:	f000 f8a9 	bl	8005490 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800533e:	2301      	movs	r3, #1
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e002      	b.n	800534a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
 8005348:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800534a:	69bb      	ldr	r3, [r7, #24]
	}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800536c:	3b01      	subs	r3, #1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00a      	beq.n	800539c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	617b      	str	r3, [r7, #20]
}
 8005398:	bf00      	nop
 800539a:	e7fe      	b.n	800539a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d01f      	beq.n	80053e2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e012      	b.n	80053ce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	7819      	ldrb	r1, [r3, #0]
 80053b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	3334      	adds	r3, #52	; 0x34
 80053b8:	460a      	mov	r2, r1
 80053ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d006      	beq.n	80053d6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	2b0f      	cmp	r3, #15
 80053d2:	d9e9      	bls.n	80053a8 <prvInitialiseNewTask+0x54>
 80053d4:	e000      	b.n	80053d8 <prvInitialiseNewTask+0x84>
			{
				break;
 80053d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053e0:	e003      	b.n	80053ea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2b06      	cmp	r3, #6
 80053ee:	d901      	bls.n	80053f4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053f0:	2306      	movs	r3, #6
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	3304      	adds	r3, #4
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe fffb 	bl	8004406 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	3318      	adds	r3, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fff6 	bl	8004406 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	f1c3 0207 	rsb	r2, r3, #7
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2200      	movs	r2, #0
 800543c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	334c      	adds	r3, #76	; 0x4c
 8005444:	2260      	movs	r2, #96	; 0x60
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fb63 	bl	8006b14 <memset>
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <prvInitialiseNewTask+0x130>)
 8005452:	651a      	str	r2, [r3, #80]	; 0x50
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <prvInitialiseNewTask+0x134>)
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	4a0b      	ldr	r2, [pc, #44]	; (800548c <prvInitialiseNewTask+0x138>)
 800545e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	69b8      	ldr	r0, [r7, #24]
 8005466:	f000 fee5 	bl	8006234 <pxPortInitialiseStack>
 800546a:	4602      	mov	r2, r0
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547c:	bf00      	nop
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	08006d88 	.word	0x08006d88
 8005488:	08006da8 	.word	0x08006da8
 800548c:	08006d68 	.word	0x08006d68

08005490 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005498:	f000 fffc 	bl	8006494 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800549c:	4b2a      	ldr	r3, [pc, #168]	; (8005548 <prvAddNewTaskToReadyList+0xb8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a29      	ldr	r2, [pc, #164]	; (8005548 <prvAddNewTaskToReadyList+0xb8>)
 80054a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054a6:	4b29      	ldr	r3, [pc, #164]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054b4:	4b24      	ldr	r3, [pc, #144]	; (8005548 <prvAddNewTaskToReadyList+0xb8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d110      	bne.n	80054de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054bc:	f000 fbd6 	bl	8005c6c <prvInitialiseTaskLists>
 80054c0:	e00d      	b.n	80054de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <prvAddNewTaskToReadyList+0xc0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d802      	bhi.n	80054de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054d8:	4a1c      	ldr	r2, [pc, #112]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054de:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <prvAddNewTaskToReadyList+0xc4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <prvAddNewTaskToReadyList+0xc4>)
 80054e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	2201      	movs	r2, #1
 80054ee:	409a      	lsls	r2, r3
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	4a18      	ldr	r2, [pc, #96]	; (8005558 <prvAddNewTaskToReadyList+0xc8>)
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4a15      	ldr	r2, [pc, #84]	; (800555c <prvAddNewTaskToReadyList+0xcc>)
 8005508:	441a      	add	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f7fe ff85 	bl	8004420 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005516:	f000 ffed 	bl	80064f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <prvAddNewTaskToReadyList+0xc0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00e      	beq.n	8005540 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <prvAddNewTaskToReadyList+0xbc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	429a      	cmp	r2, r3
 800552e:	d207      	bcs.n	8005540 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <prvAddNewTaskToReadyList+0xd0>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000738 	.word	0x20000738
 800554c:	20000638 	.word	0x20000638
 8005550:	20000744 	.word	0x20000744
 8005554:	20000754 	.word	0x20000754
 8005558:	20000740 	.word	0x20000740
 800555c:	2000063c 	.word	0x2000063c
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005576:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <vTaskDelay+0x60>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <vTaskDelay+0x30>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	60bb      	str	r3, [r7, #8]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005594:	f000 f884 	bl	80056a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005598:	2100      	movs	r1, #0
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fde4 	bl	8006168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055a0:	f000 f88c 	bl	80056bc <xTaskResumeAll>
 80055a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d107      	bne.n	80055bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <vTaskDelay+0x64>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000760 	.word	0x20000760
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08a      	sub	sp, #40	; 0x28
 80055d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055da:	463a      	mov	r2, r7
 80055dc:	1d39      	adds	r1, r7, #4
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fa ff80 	bl	80004e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	9202      	str	r2, [sp, #8]
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	460a      	mov	r2, r1
 80055fa:	4921      	ldr	r1, [pc, #132]	; (8005680 <vTaskStartScheduler+0xb4>)
 80055fc:	4821      	ldr	r0, [pc, #132]	; (8005684 <vTaskStartScheduler+0xb8>)
 80055fe:	f7ff fe07 	bl	8005210 <xTaskCreateStatic>
 8005602:	4603      	mov	r3, r0
 8005604:	4a20      	ldr	r2, [pc, #128]	; (8005688 <vTaskStartScheduler+0xbc>)
 8005606:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005608:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <vTaskStartScheduler+0xbc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e001      	b.n	800561a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d11b      	bne.n	8005658 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	613b      	str	r3, [r7, #16]
}
 8005632:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005634:	4b15      	ldr	r3, [pc, #84]	; (800568c <vTaskStartScheduler+0xc0>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	334c      	adds	r3, #76	; 0x4c
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <vTaskStartScheduler+0xc4>)
 800563c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800563e:	4b15      	ldr	r3, [pc, #84]	; (8005694 <vTaskStartScheduler+0xc8>)
 8005640:	f04f 32ff 	mov.w	r2, #4294967295
 8005644:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <vTaskStartScheduler+0xcc>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800564c:	4b13      	ldr	r3, [pc, #76]	; (800569c <vTaskStartScheduler+0xd0>)
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005652:	f000 fe7d 	bl	8006350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005656:	e00e      	b.n	8005676 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d10a      	bne.n	8005676 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60fb      	str	r3, [r7, #12]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <vTaskStartScheduler+0xa8>
}
 8005676:	bf00      	nop
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	08006d14 	.word	0x08006d14
 8005684:	08005c3d 	.word	0x08005c3d
 8005688:	2000075c 	.word	0x2000075c
 800568c:	20000638 	.word	0x20000638
 8005690:	20000010 	.word	0x20000010
 8005694:	20000758 	.word	0x20000758
 8005698:	20000744 	.word	0x20000744
 800569c:	2000073c 	.word	0x2000073c

080056a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <vTaskSuspendAll+0x18>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	4a03      	ldr	r2, [pc, #12]	; (80056b8 <vTaskSuspendAll+0x18>)
 80056ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80056ae:	bf00      	nop
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	20000760 	.word	0x20000760

080056bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <xTaskResumeAll+0x114>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	603b      	str	r3, [r7, #0]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056e8:	f000 fed4 	bl	8006494 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056ec:	4b38      	ldr	r3, [pc, #224]	; (80057d0 <xTaskResumeAll+0x114>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	4a37      	ldr	r2, [pc, #220]	; (80057d0 <xTaskResumeAll+0x114>)
 80056f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f6:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <xTaskResumeAll+0x114>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d161      	bne.n	80057c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056fe:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <xTaskResumeAll+0x118>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d05d      	beq.n	80057c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005706:	e02e      	b.n	8005766 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005708:	4b33      	ldr	r3, [pc, #204]	; (80057d8 <xTaskResumeAll+0x11c>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3318      	adds	r3, #24
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe fee0 	bl	80044da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fedb 	bl	80044da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	2201      	movs	r2, #1
 800572a:	409a      	lsls	r2, r3
 800572c:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <xTaskResumeAll+0x120>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4313      	orrs	r3, r2
 8005732:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <xTaskResumeAll+0x120>)
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a27      	ldr	r2, [pc, #156]	; (80057e0 <xTaskResumeAll+0x124>)
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f7fe fe67 	bl	8004420 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005756:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <xTaskResumeAll+0x128>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	429a      	cmp	r2, r3
 800575e:	d302      	bcc.n	8005766 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005760:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <xTaskResumeAll+0x12c>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005766:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <xTaskResumeAll+0x11c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1cc      	bne.n	8005708 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005774:	f000 fb1c 	bl	8005db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005778:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <xTaskResumeAll+0x130>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d010      	beq.n	80057a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005784:	f000 f836 	bl	80057f4 <xTaskIncrementTick>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800578e:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <xTaskResumeAll+0x12c>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f1      	bne.n	8005784 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <xTaskResumeAll+0x130>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <xTaskResumeAll+0x12c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <xTaskResumeAll+0x134>)
 80057b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057c2:	f000 fe97 	bl	80064f4 <vPortExitCritical>

	return xAlreadyYielded;
 80057c6:	68bb      	ldr	r3, [r7, #8]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000760 	.word	0x20000760
 80057d4:	20000738 	.word	0x20000738
 80057d8:	200006f8 	.word	0x200006f8
 80057dc:	20000740 	.word	0x20000740
 80057e0:	2000063c 	.word	0x2000063c
 80057e4:	20000638 	.word	0x20000638
 80057e8:	2000074c 	.word	0x2000074c
 80057ec:	20000748 	.word	0x20000748
 80057f0:	e000ed04 	.word	0xe000ed04

080057f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057fe:	4b4e      	ldr	r3, [pc, #312]	; (8005938 <xTaskIncrementTick+0x144>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 808e 	bne.w	8005924 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005808:	4b4c      	ldr	r3, [pc, #304]	; (800593c <xTaskIncrementTick+0x148>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005810:	4a4a      	ldr	r2, [pc, #296]	; (800593c <xTaskIncrementTick+0x148>)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d120      	bne.n	800585e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800581c:	4b48      	ldr	r3, [pc, #288]	; (8005940 <xTaskIncrementTick+0x14c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <xTaskIncrementTick+0x48>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	603b      	str	r3, [r7, #0]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <xTaskIncrementTick+0x46>
 800583c:	4b40      	ldr	r3, [pc, #256]	; (8005940 <xTaskIncrementTick+0x14c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	4b40      	ldr	r3, [pc, #256]	; (8005944 <xTaskIncrementTick+0x150>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3e      	ldr	r2, [pc, #248]	; (8005940 <xTaskIncrementTick+0x14c>)
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4a3e      	ldr	r2, [pc, #248]	; (8005944 <xTaskIncrementTick+0x150>)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	4b3d      	ldr	r3, [pc, #244]	; (8005948 <xTaskIncrementTick+0x154>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	4a3c      	ldr	r2, [pc, #240]	; (8005948 <xTaskIncrementTick+0x154>)
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	f000 faa9 	bl	8005db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800585e:	4b3b      	ldr	r3, [pc, #236]	; (800594c <xTaskIncrementTick+0x158>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	429a      	cmp	r2, r3
 8005866:	d348      	bcc.n	80058fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005868:	4b35      	ldr	r3, [pc, #212]	; (8005940 <xTaskIncrementTick+0x14c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d104      	bne.n	800587c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005872:	4b36      	ldr	r3, [pc, #216]	; (800594c <xTaskIncrementTick+0x158>)
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	601a      	str	r2, [r3, #0]
					break;
 800587a:	e03e      	b.n	80058fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587c:	4b30      	ldr	r3, [pc, #192]	; (8005940 <xTaskIncrementTick+0x14c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d203      	bcs.n	800589c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005894:	4a2d      	ldr	r2, [pc, #180]	; (800594c <xTaskIncrementTick+0x158>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800589a:	e02e      	b.n	80058fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	3304      	adds	r3, #4
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fe1a 	bl	80044da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d004      	beq.n	80058b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3318      	adds	r3, #24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe fe11 	bl	80044da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	2201      	movs	r2, #1
 80058be:	409a      	lsls	r2, r3
 80058c0:	4b23      	ldr	r3, [pc, #140]	; (8005950 <xTaskIncrementTick+0x15c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	4a22      	ldr	r2, [pc, #136]	; (8005950 <xTaskIncrementTick+0x15c>)
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4a1f      	ldr	r2, [pc, #124]	; (8005954 <xTaskIncrementTick+0x160>)
 80058d8:	441a      	add	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	3304      	adds	r3, #4
 80058de:	4619      	mov	r1, r3
 80058e0:	4610      	mov	r0, r2
 80058e2:	f7fe fd9d 	bl	8004420 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ea:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <xTaskIncrementTick+0x164>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d3b9      	bcc.n	8005868 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058f8:	e7b6      	b.n	8005868 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <xTaskIncrementTick+0x164>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005900:	4914      	ldr	r1, [pc, #80]	; (8005954 <xTaskIncrementTick+0x160>)
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d901      	bls.n	8005916 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005912:	2301      	movs	r3, #1
 8005914:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005916:	4b11      	ldr	r3, [pc, #68]	; (800595c <xTaskIncrementTick+0x168>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e004      	b.n	800592e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005924:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <xTaskIncrementTick+0x16c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3301      	adds	r3, #1
 800592a:	4a0d      	ldr	r2, [pc, #52]	; (8005960 <xTaskIncrementTick+0x16c>)
 800592c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800592e:	697b      	ldr	r3, [r7, #20]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000760 	.word	0x20000760
 800593c:	2000073c 	.word	0x2000073c
 8005940:	200006f0 	.word	0x200006f0
 8005944:	200006f4 	.word	0x200006f4
 8005948:	20000750 	.word	0x20000750
 800594c:	20000758 	.word	0x20000758
 8005950:	20000740 	.word	0x20000740
 8005954:	2000063c 	.word	0x2000063c
 8005958:	20000638 	.word	0x20000638
 800595c:	2000074c 	.word	0x2000074c
 8005960:	20000748 	.word	0x20000748

08005964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800596a:	4b29      	ldr	r3, [pc, #164]	; (8005a10 <vTaskSwitchContext+0xac>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005972:	4b28      	ldr	r3, [pc, #160]	; (8005a14 <vTaskSwitchContext+0xb0>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005978:	e044      	b.n	8005a04 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800597a:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <vTaskSwitchContext+0xb0>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005980:	4b25      	ldr	r3, [pc, #148]	; (8005a18 <vTaskSwitchContext+0xb4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	fab3 f383 	clz	r3, r3
 800598c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800598e:	7afb      	ldrb	r3, [r7, #11]
 8005990:	f1c3 031f 	rsb	r3, r3, #31
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	4921      	ldr	r1, [pc, #132]	; (8005a1c <vTaskSwitchContext+0xb8>)
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <vTaskSwitchContext+0x5a>
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <vTaskSwitchContext+0xb8>)
 80059cc:	4413      	add	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3308      	adds	r3, #8
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d104      	bne.n	80059f0 <vTaskSwitchContext+0x8c>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	605a      	str	r2, [r3, #4]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <vTaskSwitchContext+0xbc>)
 80059f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <vTaskSwitchContext+0xbc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	334c      	adds	r3, #76	; 0x4c
 8005a00:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <vTaskSwitchContext+0xc0>)
 8005a02:	6013      	str	r3, [r2, #0]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	20000760 	.word	0x20000760
 8005a14:	2000074c 	.word	0x2000074c
 8005a18:	20000740 	.word	0x20000740
 8005a1c:	2000063c 	.word	0x2000063c
 8005a20:	20000638 	.word	0x20000638
 8005a24:	20000010 	.word	0x20000010

08005a28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	60fb      	str	r3, [r7, #12]
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a4e:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <vTaskPlaceOnEventList+0x44>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3318      	adds	r3, #24
 8005a54:	4619      	mov	r1, r3
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fe fd06 	bl	8004468 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	6838      	ldr	r0, [r7, #0]
 8005a60:	f000 fb82 	bl	8006168 <prvAddCurrentTaskToDelayedList>
}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000638 	.word	0x20000638

08005a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	60fb      	str	r3, [r7, #12]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	3318      	adds	r3, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe fd1a 	bl	80044da <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <xTaskRemoveFromEventList+0xac>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11c      	bne.n	8005ae8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fd11 	bl	80044da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	2201      	movs	r2, #1
 8005abe:	409a      	lsls	r2, r3
 8005ac0:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <xTaskRemoveFromEventList+0xb0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <xTaskRemoveFromEventList+0xb0>)
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <xTaskRemoveFromEventList+0xb4>)
 8005ad8:	441a      	add	r2, r3
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7fe fc9d 	bl	8004420 <vListInsertEnd>
 8005ae6:	e005      	b.n	8005af4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	3318      	adds	r3, #24
 8005aec:	4619      	mov	r1, r3
 8005aee:	480e      	ldr	r0, [pc, #56]	; (8005b28 <xTaskRemoveFromEventList+0xb8>)
 8005af0:	f7fe fc96 	bl	8004420 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af8:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <xTaskRemoveFromEventList+0xbc>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d905      	bls.n	8005b0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b02:	2301      	movs	r3, #1
 8005b04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <xTaskRemoveFromEventList+0xc0>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e001      	b.n	8005b12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b12:	697b      	ldr	r3, [r7, #20]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000760 	.word	0x20000760
 8005b20:	20000740 	.word	0x20000740
 8005b24:	2000063c 	.word	0x2000063c
 8005b28:	200006f8 	.word	0x200006f8
 8005b2c:	20000638 	.word	0x20000638
 8005b30:	2000074c 	.word	0x2000074c

08005b34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <vTaskInternalSetTimeOutState+0x24>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <vTaskInternalSetTimeOutState+0x28>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	605a      	str	r2, [r3, #4]
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	20000750 	.word	0x20000750
 8005b5c:	2000073c 	.word	0x2000073c

08005b60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	613b      	str	r3, [r7, #16]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	60fb      	str	r3, [r7, #12]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ba2:	f000 fc77 	bl	8006494 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ba6:	4b1d      	ldr	r3, [pc, #116]	; (8005c1c <xTaskCheckForTimeOut+0xbc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d102      	bne.n	8005bc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	e023      	b.n	8005c0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <xTaskCheckForTimeOut+0xc0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d007      	beq.n	8005be2 <xTaskCheckForTimeOut+0x82>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d302      	bcc.n	8005be2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e015      	b.n	8005c0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d20b      	bcs.n	8005c04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ff9b 	bl	8005b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	e004      	b.n	8005c0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c0e:	f000 fc71 	bl	80064f4 <vPortExitCritical>

	return xReturn;
 8005c12:	69fb      	ldr	r3, [r7, #28]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3720      	adds	r7, #32
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	2000073c 	.word	0x2000073c
 8005c20:	20000750 	.word	0x20000750

08005c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <vTaskMissedYield+0x14>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	2000074c 	.word	0x2000074c

08005c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c44:	f000 f852 	bl	8005cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <prvIdleTask+0x28>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d9f9      	bls.n	8005c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <prvIdleTask+0x2c>)
 8005c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c60:	e7f0      	b.n	8005c44 <prvIdleTask+0x8>
 8005c62:	bf00      	nop
 8005c64:	2000063c 	.word	0x2000063c
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c72:	2300      	movs	r3, #0
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	e00c      	b.n	8005c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a12      	ldr	r2, [pc, #72]	; (8005ccc <prvInitialiseTaskLists+0x60>)
 8005c84:	4413      	add	r3, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fb9d 	bl	80043c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b06      	cmp	r3, #6
 8005c96:	d9ef      	bls.n	8005c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c98:	480d      	ldr	r0, [pc, #52]	; (8005cd0 <prvInitialiseTaskLists+0x64>)
 8005c9a:	f7fe fb94 	bl	80043c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c9e:	480d      	ldr	r0, [pc, #52]	; (8005cd4 <prvInitialiseTaskLists+0x68>)
 8005ca0:	f7fe fb91 	bl	80043c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ca4:	480c      	ldr	r0, [pc, #48]	; (8005cd8 <prvInitialiseTaskLists+0x6c>)
 8005ca6:	f7fe fb8e 	bl	80043c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005caa:	480c      	ldr	r0, [pc, #48]	; (8005cdc <prvInitialiseTaskLists+0x70>)
 8005cac:	f7fe fb8b 	bl	80043c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cb0:	480b      	ldr	r0, [pc, #44]	; (8005ce0 <prvInitialiseTaskLists+0x74>)
 8005cb2:	f7fe fb88 	bl	80043c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <prvInitialiseTaskLists+0x78>)
 8005cb8:	4a05      	ldr	r2, [pc, #20]	; (8005cd0 <prvInitialiseTaskLists+0x64>)
 8005cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cbc:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <prvInitialiseTaskLists+0x7c>)
 8005cbe:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <prvInitialiseTaskLists+0x68>)
 8005cc0:	601a      	str	r2, [r3, #0]
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	2000063c 	.word	0x2000063c
 8005cd0:	200006c8 	.word	0x200006c8
 8005cd4:	200006dc 	.word	0x200006dc
 8005cd8:	200006f8 	.word	0x200006f8
 8005cdc:	2000070c 	.word	0x2000070c
 8005ce0:	20000724 	.word	0x20000724
 8005ce4:	200006f0 	.word	0x200006f0
 8005ce8:	200006f4 	.word	0x200006f4

08005cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cf2:	e019      	b.n	8005d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005cf4:	f000 fbce 	bl	8006494 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf8:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <prvCheckTasksWaitingTermination+0x50>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fbe8 	bl	80044da <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <prvCheckTasksWaitingTermination+0x54>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	4a0b      	ldr	r2, [pc, #44]	; (8005d40 <prvCheckTasksWaitingTermination+0x54>)
 8005d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <prvCheckTasksWaitingTermination+0x58>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	4a0a      	ldr	r2, [pc, #40]	; (8005d44 <prvCheckTasksWaitingTermination+0x58>)
 8005d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d1e:	f000 fbe9 	bl	80064f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f810 	bl	8005d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d28:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <prvCheckTasksWaitingTermination+0x58>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e1      	bne.n	8005cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2000070c 	.word	0x2000070c
 8005d40:	20000738 	.word	0x20000738
 8005d44:	20000720 	.word	0x20000720

08005d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	334c      	adds	r3, #76	; 0x4c
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ff3f 	bl	8006bd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d108      	bne.n	8005d76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fd81 	bl	8006870 <vPortFree>
				vPortFree( pxTCB );
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fd7e 	bl	8006870 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d74:	e018      	b.n	8005da8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d103      	bne.n	8005d88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fd75 	bl	8006870 <vPortFree>
	}
 8005d86:	e00f      	b.n	8005da8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d00a      	beq.n	8005da8 <prvDeleteTCB+0x60>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60fb      	str	r3, [r7, #12]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <prvDeleteTCB+0x5e>
	}
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <prvResetNextTaskUnblockTime+0x38>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <prvResetNextTaskUnblockTime+0x3c>)
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dc8:	e008      	b.n	8005ddc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <prvResetNextTaskUnblockTime+0x38>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	4a04      	ldr	r2, [pc, #16]	; (8005dec <prvResetNextTaskUnblockTime+0x3c>)
 8005dda:	6013      	str	r3, [r2, #0]
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	200006f0 	.word	0x200006f0
 8005dec:	20000758 	.word	0x20000758

08005df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <xTaskGetSchedulerState+0x34>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	e008      	b.n	8005e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e04:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <xTaskGetSchedulerState+0x38>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	e001      	b.n	8005e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e12:	2300      	movs	r3, #0
 8005e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e16:	687b      	ldr	r3, [r7, #4]
	}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	20000744 	.word	0x20000744
 8005e28:	20000760 	.word	0x20000760

08005e2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d05e      	beq.n	8005f00 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e46:	4b31      	ldr	r3, [pc, #196]	; (8005f0c <xTaskPriorityInherit+0xe0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d24e      	bcs.n	8005eee <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	db06      	blt.n	8005e66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e58:	4b2c      	ldr	r3, [pc, #176]	; (8005f0c <xTaskPriorityInherit+0xe0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	f1c3 0207 	rsb	r2, r3, #7
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6959      	ldr	r1, [r3, #20]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a26      	ldr	r2, [pc, #152]	; (8005f10 <xTaskPriorityInherit+0xe4>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	4299      	cmp	r1, r3
 8005e7c:	d12f      	bne.n	8005ede <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fb29 	bl	80044da <uxListRemove>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e92:	2201      	movs	r2, #1
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	43da      	mvns	r2, r3
 8005e9a:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <xTaskPriorityInherit+0xe8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <xTaskPriorityInherit+0xe8>)
 8005ea2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ea4:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <xTaskPriorityInherit+0xe0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	409a      	lsls	r2, r3
 8005eb6:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <xTaskPriorityInherit+0xe8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <xTaskPriorityInherit+0xe8>)
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <xTaskPriorityInherit+0xe4>)
 8005ece:	441a      	add	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f7fe faa2 	bl	8004420 <vListInsertEnd>
 8005edc:	e004      	b.n	8005ee8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ede:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <xTaskPriorityInherit+0xe0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e008      	b.n	8005f00 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <xTaskPriorityInherit+0xe0>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d201      	bcs.n	8005f00 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f00:	68fb      	ldr	r3, [r7, #12]
	}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000638 	.word	0x20000638
 8005f10:	2000063c 	.word	0x2000063c
 8005f14:	20000740 	.word	0x20000740

08005f18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d06e      	beq.n	800600c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f2e:	4b3a      	ldr	r3, [pc, #232]	; (8006018 <xTaskPriorityDisinherit+0x100>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d00a      	beq.n	8005f4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	60fb      	str	r3, [r7, #12]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60bb      	str	r3, [r7, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f70:	1e5a      	subs	r2, r3, #1
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d044      	beq.n	800600c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d140      	bne.n	800600c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe faa3 	bl	80044da <uxListRemove>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d115      	bne.n	8005fc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9e:	491f      	ldr	r1, [pc, #124]	; (800601c <xTaskPriorityDisinherit+0x104>)
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <xTaskPriorityDisinherit+0xae>
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43da      	mvns	r2, r3
 8005fbc:	4b18      	ldr	r3, [pc, #96]	; (8006020 <xTaskPriorityDisinherit+0x108>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	4a17      	ldr	r2, [pc, #92]	; (8006020 <xTaskPriorityDisinherit+0x108>)
 8005fc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	f1c3 0207 	rsb	r2, r3, #7
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	2201      	movs	r2, #1
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <xTaskPriorityDisinherit+0x108>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <xTaskPriorityDisinherit+0x108>)
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4a08      	ldr	r2, [pc, #32]	; (800601c <xTaskPriorityDisinherit+0x104>)
 8005ffa:	441a      	add	r2, r3
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4619      	mov	r1, r3
 8006002:	4610      	mov	r0, r2
 8006004:	f7fe fa0c 	bl	8004420 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006008:	2301      	movs	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800600c:	697b      	ldr	r3, [r7, #20]
	}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20000638 	.word	0x20000638
 800601c:	2000063c 	.word	0x2000063c
 8006020:	20000740 	.word	0x20000740

08006024 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006032:	2301      	movs	r3, #1
 8006034:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d077      	beq.n	800612c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d902      	bls.n	800606a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	e002      	b.n	8006070 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	429a      	cmp	r2, r3
 8006078:	d058      	beq.n	800612c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	429a      	cmp	r2, r3
 8006082:	d153      	bne.n	800612c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006084:	4b2b      	ldr	r3, [pc, #172]	; (8006134 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	429a      	cmp	r2, r3
 800608c:	d10a      	bne.n	80060a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60bb      	str	r3, [r7, #8]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	db04      	blt.n	80060c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f1c3 0207 	rsb	r2, r3, #7
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	6959      	ldr	r1, [r3, #20]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4a19      	ldr	r2, [pc, #100]	; (8006138 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80060d2:	4413      	add	r3, r2
 80060d4:	4299      	cmp	r1, r3
 80060d6:	d129      	bne.n	800612c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	3304      	adds	r3, #4
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe f9fc 	bl	80044da <uxListRemove>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	2201      	movs	r2, #1
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43da      	mvns	r2, r3
 80060f4:	4b11      	ldr	r3, [pc, #68]	; (800613c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4013      	ands	r3, r2
 80060fa:	4a10      	ldr	r2, [pc, #64]	; (800613c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	2201      	movs	r2, #1
 8006104:	409a      	lsls	r2, r3
 8006106:	4b0d      	ldr	r3, [pc, #52]	; (800613c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4313      	orrs	r3, r2
 800610c:	4a0b      	ldr	r2, [pc, #44]	; (800613c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4a06      	ldr	r2, [pc, #24]	; (8006138 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800611e:	441a      	add	r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4610      	mov	r0, r2
 8006128:	f7fe f97a 	bl	8004420 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800612c:	bf00      	nop
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000638 	.word	0x20000638
 8006138:	2000063c 	.word	0x2000063c
 800613c:	20000740 	.word	0x20000740

08006140 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <pvTaskIncrementMutexHeldCount+0x24>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <pvTaskIncrementMutexHeldCount+0x24>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006152:	3201      	adds	r2, #1
 8006154:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006156:	4b03      	ldr	r3, [pc, #12]	; (8006164 <pvTaskIncrementMutexHeldCount+0x24>)
 8006158:	681b      	ldr	r3, [r3, #0]
	}
 800615a:	4618      	mov	r0, r3
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	20000638 	.word	0x20000638

08006168 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006172:	4b29      	ldr	r3, [pc, #164]	; (8006218 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006178:	4b28      	ldr	r3, [pc, #160]	; (800621c <prvAddCurrentTaskToDelayedList+0xb4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3304      	adds	r3, #4
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe f9ab 	bl	80044da <uxListRemove>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800618a:	4b24      	ldr	r3, [pc, #144]	; (800621c <prvAddCurrentTaskToDelayedList+0xb4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	2201      	movs	r2, #1
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43da      	mvns	r2, r3
 8006198:	4b21      	ldr	r3, [pc, #132]	; (8006220 <prvAddCurrentTaskToDelayedList+0xb8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4013      	ands	r3, r2
 800619e:	4a20      	ldr	r2, [pc, #128]	; (8006220 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d10a      	bne.n	80061c0 <prvAddCurrentTaskToDelayedList+0x58>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061b0:	4b1a      	ldr	r3, [pc, #104]	; (800621c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4619      	mov	r1, r3
 80061b8:	481a      	ldr	r0, [pc, #104]	; (8006224 <prvAddCurrentTaskToDelayedList+0xbc>)
 80061ba:	f7fe f931 	bl	8004420 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061be:	e026      	b.n	800620e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061c8:	4b14      	ldr	r3, [pc, #80]	; (800621c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d209      	bcs.n	80061ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3304      	adds	r3, #4
 80061e2:	4619      	mov	r1, r3
 80061e4:	4610      	mov	r0, r2
 80061e6:	f7fe f93f 	bl	8004468 <vListInsert>
}
 80061ea:	e010      	b.n	800620e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ec:	4b0f      	ldr	r3, [pc, #60]	; (800622c <prvAddCurrentTaskToDelayedList+0xc4>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3304      	adds	r3, #4
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f7fe f935 	bl	8004468 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d202      	bcs.n	800620e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <prvAddCurrentTaskToDelayedList+0xc8>)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6013      	str	r3, [r2, #0]
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	2000073c 	.word	0x2000073c
 800621c:	20000638 	.word	0x20000638
 8006220:	20000740 	.word	0x20000740
 8006224:	20000724 	.word	0x20000724
 8006228:	200006f4 	.word	0x200006f4
 800622c:	200006f0 	.word	0x200006f0
 8006230:	20000758 	.word	0x20000758

08006234 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3b04      	subs	r3, #4
 8006244:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800624c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3b04      	subs	r3, #4
 8006252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f023 0201 	bic.w	r2, r3, #1
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3b04      	subs	r3, #4
 8006262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006264:	4a0c      	ldr	r2, [pc, #48]	; (8006298 <pxPortInitialiseStack+0x64>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3b14      	subs	r3, #20
 800626e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3b04      	subs	r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f06f 0202 	mvn.w	r2, #2
 8006282:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3b20      	subs	r3, #32
 8006288:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800628a:	68fb      	ldr	r3, [r7, #12]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	0800629d 	.word	0x0800629d

0800629c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062a2:	2300      	movs	r3, #0
 80062a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062a6:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <prvTaskExitError+0x54>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d00a      	beq.n	80062c6 <prvTaskExitError+0x2a>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	60fb      	str	r3, [r7, #12]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <prvTaskExitError+0x28>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60bb      	str	r3, [r7, #8]
}
 80062d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062da:	bf00      	nop
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0fc      	beq.n	80062dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	2000000c 	.word	0x2000000c
	...

08006300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <pxCurrentTCBConst2>)
 8006302:	6819      	ldr	r1, [r3, #0]
 8006304:	6808      	ldr	r0, [r1, #0]
 8006306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630a:	f380 8809 	msr	PSP, r0
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8811 	msr	BASEPRI, r0
 800631a:	4770      	bx	lr
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst2>:
 8006320:	20000638 	.word	0x20000638
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop

08006328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006328:	4808      	ldr	r0, [pc, #32]	; (800634c <prvPortStartFirstTask+0x24>)
 800632a:	6800      	ldr	r0, [r0, #0]
 800632c:	6800      	ldr	r0, [r0, #0]
 800632e:	f380 8808 	msr	MSP, r0
 8006332:	f04f 0000 	mov.w	r0, #0
 8006336:	f380 8814 	msr	CONTROL, r0
 800633a:	b662      	cpsie	i
 800633c:	b661      	cpsie	f
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	df00      	svc	0
 8006348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800634a:	bf00      	nop
 800634c:	e000ed08 	.word	0xe000ed08

08006350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006356:	4b46      	ldr	r3, [pc, #280]	; (8006470 <xPortStartScheduler+0x120>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a46      	ldr	r2, [pc, #280]	; (8006474 <xPortStartScheduler+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10a      	bne.n	8006376 <xPortStartScheduler+0x26>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	613b      	str	r3, [r7, #16]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006376:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <xPortStartScheduler+0x120>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <xPortStartScheduler+0x128>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d10a      	bne.n	8006396 <xPortStartScheduler+0x46>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006396:	4b39      	ldr	r3, [pc, #228]	; (800647c <xPortStartScheduler+0x12c>)
 8006398:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4b31      	ldr	r3, [pc, #196]	; (8006480 <xPortStartScheduler+0x130>)
 80063bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063be:	4b31      	ldr	r3, [pc, #196]	; (8006484 <xPortStartScheduler+0x134>)
 80063c0:	2207      	movs	r2, #7
 80063c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c4:	e009      	b.n	80063da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80063c6:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <xPortStartScheduler+0x134>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	4a2d      	ldr	r2, [pc, #180]	; (8006484 <xPortStartScheduler+0x134>)
 80063ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d0ef      	beq.n	80063c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <xPortStartScheduler+0x134>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f1c3 0307 	rsb	r3, r3, #7
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d00a      	beq.n	8006408 <xPortStartScheduler+0xb8>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	60bb      	str	r3, [r7, #8]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006408:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <xPortStartScheduler+0x134>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	4a1d      	ldr	r2, [pc, #116]	; (8006484 <xPortStartScheduler+0x134>)
 8006410:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006412:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <xPortStartScheduler+0x134>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800641a:	4a1a      	ldr	r2, [pc, #104]	; (8006484 <xPortStartScheduler+0x134>)
 800641c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	b2da      	uxtb	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006426:	4b18      	ldr	r3, [pc, #96]	; (8006488 <xPortStartScheduler+0x138>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <xPortStartScheduler+0x138>)
 800642c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006432:	4b15      	ldr	r3, [pc, #84]	; (8006488 <xPortStartScheduler+0x138>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a14      	ldr	r2, [pc, #80]	; (8006488 <xPortStartScheduler+0x138>)
 8006438:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800643c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800643e:	f000 f8dd 	bl	80065fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <xPortStartScheduler+0x13c>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006448:	f000 f8fc 	bl	8006644 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800644c:	4b10      	ldr	r3, [pc, #64]	; (8006490 <xPortStartScheduler+0x140>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <xPortStartScheduler+0x140>)
 8006452:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006456:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006458:	f7ff ff66 	bl	8006328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800645c:	f7ff fa82 	bl	8005964 <vTaskSwitchContext>
	prvTaskExitError();
 8006460:	f7ff ff1c 	bl	800629c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	e000ed00 	.word	0xe000ed00
 8006474:	410fc271 	.word	0x410fc271
 8006478:	410fc270 	.word	0x410fc270
 800647c:	e000e400 	.word	0xe000e400
 8006480:	20000764 	.word	0x20000764
 8006484:	20000768 	.word	0x20000768
 8006488:	e000ed20 	.word	0xe000ed20
 800648c:	2000000c 	.word	0x2000000c
 8006490:	e000ef34 	.word	0xe000ef34

08006494 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	607b      	str	r3, [r7, #4]
}
 80064ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064ae:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <vPortEnterCritical+0x58>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	4a0d      	ldr	r2, [pc, #52]	; (80064ec <vPortEnterCritical+0x58>)
 80064b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <vPortEnterCritical+0x58>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10f      	bne.n	80064e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortEnterCritical+0x5c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	603b      	str	r3, [r7, #0]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vPortEnterCritical+0x4a>
	}
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	2000000c 	.word	0x2000000c
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064fa:	4b12      	ldr	r3, [pc, #72]	; (8006544 <vPortExitCritical+0x50>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <vPortExitCritical+0x24>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	607b      	str	r3, [r7, #4]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <vPortExitCritical+0x50>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3b01      	subs	r3, #1
 800651e:	4a09      	ldr	r2, [pc, #36]	; (8006544 <vPortExitCritical+0x50>)
 8006520:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006522:	4b08      	ldr	r3, [pc, #32]	; (8006544 <vPortExitCritical+0x50>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <vPortExitCritical+0x42>
 800652a:	2300      	movs	r3, #0
 800652c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	f383 8811 	msr	BASEPRI, r3
}
 8006534:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	2000000c 	.word	0x2000000c
	...

08006550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006550:	f3ef 8009 	mrs	r0, PSP
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <pxCurrentTCBConst>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f01e 0f10 	tst.w	lr, #16
 8006560:	bf08      	it	eq
 8006562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	6010      	str	r0, [r2, #0]
 800656c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006574:	f380 8811 	msr	BASEPRI, r0
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f7ff f9f0 	bl	8005964 <vTaskSwitchContext>
 8006584:	f04f 0000 	mov.w	r0, #0
 8006588:	f380 8811 	msr	BASEPRI, r0
 800658c:	bc09      	pop	{r0, r3}
 800658e:	6819      	ldr	r1, [r3, #0]
 8006590:	6808      	ldr	r0, [r1, #0]
 8006592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006596:	f01e 0f10 	tst.w	lr, #16
 800659a:	bf08      	it	eq
 800659c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065a0:	f380 8809 	msr	PSP, r0
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w

080065b0 <pxCurrentTCBConst>:
 80065b0:	20000638 	.word	0x20000638
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop

080065b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	607b      	str	r3, [r7, #4]
}
 80065d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065d2:	f7ff f90f 	bl	80057f4 <xTaskIncrementTick>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <SysTick_Handler+0x40>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f383 8811 	msr	BASEPRI, r3
}
 80065ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <vPortSetupTimerInterrupt+0x38>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <vPortSetupTimerInterrupt+0x3c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0a      	ldr	r2, [pc, #40]	; (800663c <vPortSetupTimerInterrupt+0x40>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <vPortSetupTimerInterrupt+0x44>)
 800661a:	3b01      	subs	r3, #1
 800661c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <vPortSetupTimerInterrupt+0x34>)
 8006620:	2207      	movs	r2, #7
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	e000e010 	.word	0xe000e010
 8006634:	e000e018 	.word	0xe000e018
 8006638:	20000000 	.word	0x20000000
 800663c:	10624dd3 	.word	0x10624dd3
 8006640:	e000e014 	.word	0xe000e014

08006644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006644:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006654 <vPortEnableVFP+0x10>
 8006648:	6801      	ldr	r1, [r0, #0]
 800664a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800664e:	6001      	str	r1, [r0, #0]
 8006650:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006652:	bf00      	nop
 8006654:	e000ed88 	.word	0xe000ed88

08006658 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800665e:	f3ef 8305 	mrs	r3, IPSR
 8006662:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b0f      	cmp	r3, #15
 8006668:	d914      	bls.n	8006694 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <vPortValidateInterruptPriority+0x70>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <vPortValidateInterruptPriority+0x74>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	7afa      	ldrb	r2, [r7, #11]
 800667a:	429a      	cmp	r2, r3
 800667c:	d20a      	bcs.n	8006694 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	607b      	str	r3, [r7, #4]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <vPortValidateInterruptPriority+0x78>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800669c:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <vPortValidateInterruptPriority+0x7c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d90a      	bls.n	80066ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	603b      	str	r3, [r7, #0]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <vPortValidateInterruptPriority+0x60>
	}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	e000e3f0 	.word	0xe000e3f0
 80066cc:	20000764 	.word	0x20000764
 80066d0:	e000ed0c 	.word	0xe000ed0c
 80066d4:	20000768 	.word	0x20000768

080066d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066e4:	f7fe ffdc 	bl	80056a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066e8:	4b5b      	ldr	r3, [pc, #364]	; (8006858 <pvPortMalloc+0x180>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066f0:	f000 f920 	bl	8006934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066f4:	4b59      	ldr	r3, [pc, #356]	; (800685c <pvPortMalloc+0x184>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 8093 	bne.w	8006828 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d01d      	beq.n	8006744 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006708:	2208      	movs	r2, #8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f023 0307 	bic.w	r3, r3, #7
 8006720:	3308      	adds	r3, #8
 8006722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <pvPortMalloc+0x6c>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	617b      	str	r3, [r7, #20]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d06e      	beq.n	8006828 <pvPortMalloc+0x150>
 800674a:	4b45      	ldr	r3, [pc, #276]	; (8006860 <pvPortMalloc+0x188>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d869      	bhi.n	8006828 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006754:	4b43      	ldr	r3, [pc, #268]	; (8006864 <pvPortMalloc+0x18c>)
 8006756:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006758:	4b42      	ldr	r3, [pc, #264]	; (8006864 <pvPortMalloc+0x18c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800675e:	e004      	b.n	800676a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <pvPortMalloc+0xa4>
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f1      	bne.n	8006760 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800677c:	4b36      	ldr	r3, [pc, #216]	; (8006858 <pvPortMalloc+0x180>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	429a      	cmp	r2, r3
 8006784:	d050      	beq.n	8006828 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2208      	movs	r2, #8
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	2308      	movs	r3, #8
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d91f      	bls.n	80067e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <pvPortMalloc+0xf8>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	613b      	str	r3, [r7, #16]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	1ad2      	subs	r2, r2, r3
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067e2:	69b8      	ldr	r0, [r7, #24]
 80067e4:	f000 f908 	bl	80069f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <pvPortMalloc+0x188>)
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <pvPortMalloc+0x188>)
 80067f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <pvPortMalloc+0x188>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <pvPortMalloc+0x190>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d203      	bcs.n	800680a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006802:	4b17      	ldr	r3, [pc, #92]	; (8006860 <pvPortMalloc+0x188>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a18      	ldr	r2, [pc, #96]	; (8006868 <pvPortMalloc+0x190>)
 8006808:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <pvPortMalloc+0x184>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	431a      	orrs	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800681e:	4b13      	ldr	r3, [pc, #76]	; (800686c <pvPortMalloc+0x194>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3301      	adds	r3, #1
 8006824:	4a11      	ldr	r2, [pc, #68]	; (800686c <pvPortMalloc+0x194>)
 8006826:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006828:	f7fe ff48 	bl	80056bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <pvPortMalloc+0x174>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60fb      	str	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	e7fe      	b.n	800684a <pvPortMalloc+0x172>
	return pvReturn;
 800684c:	69fb      	ldr	r3, [r7, #28]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3728      	adds	r7, #40	; 0x28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20002e84 	.word	0x20002e84
 800685c:	20002e98 	.word	0x20002e98
 8006860:	20002e88 	.word	0x20002e88
 8006864:	20002e7c 	.word	0x20002e7c
 8006868:	20002e8c 	.word	0x20002e8c
 800686c:	20002e90 	.word	0x20002e90

08006870 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d04d      	beq.n	800691e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006882:	2308      	movs	r3, #8
 8006884:	425b      	negs	r3, r3
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	4413      	add	r3, r2
 800688a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <vPortFree+0xb8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4013      	ands	r3, r2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <vPortFree+0x44>
	__asm volatile
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
}
 80068b0:	bf00      	nop
 80068b2:	e7fe      	b.n	80068b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <vPortFree+0x62>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60bb      	str	r3, [r7, #8]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	4b14      	ldr	r3, [pc, #80]	; (8006928 <vPortFree+0xb8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4013      	ands	r3, r2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01e      	beq.n	800691e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d11a      	bne.n	800691e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <vPortFree+0xb8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	401a      	ands	r2, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068f8:	f7fe fed2 	bl	80056a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	4b0a      	ldr	r3, [pc, #40]	; (800692c <vPortFree+0xbc>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4413      	add	r3, r2
 8006906:	4a09      	ldr	r2, [pc, #36]	; (800692c <vPortFree+0xbc>)
 8006908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800690a:	6938      	ldr	r0, [r7, #16]
 800690c:	f000 f874 	bl	80069f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <vPortFree+0xc0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	4a06      	ldr	r2, [pc, #24]	; (8006930 <vPortFree+0xc0>)
 8006918:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800691a:	f7fe fecf 	bl	80056bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800691e:	bf00      	nop
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20002e98 	.word	0x20002e98
 800692c:	20002e88 	.word	0x20002e88
 8006930:	20002e94 	.word	0x20002e94

08006934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800693a:	f242 7310 	movw	r3, #10000	; 0x2710
 800693e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006940:	4b27      	ldr	r3, [pc, #156]	; (80069e0 <prvHeapInit+0xac>)
 8006942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3307      	adds	r3, #7
 8006952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <prvHeapInit+0xac>)
 8006964:	4413      	add	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800696c:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <prvHeapInit+0xb0>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <prvHeapInit+0xb0>)
 8006974:	2200      	movs	r2, #0
 8006976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006980:	2208      	movs	r2, #8
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a15      	ldr	r2, [pc, #84]	; (80069e8 <prvHeapInit+0xb4>)
 8006994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006996:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <prvHeapInit+0xb4>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <prvHeapInit+0xb4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069b4:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvHeapInit+0xb4>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <prvHeapInit+0xb8>)
 80069c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <prvHeapInit+0xbc>)
 80069ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069cc:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <prvHeapInit+0xc0>)
 80069ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069d2:	601a      	str	r2, [r3, #0]
}
 80069d4:	bf00      	nop
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	2000076c 	.word	0x2000076c
 80069e4:	20002e7c 	.word	0x20002e7c
 80069e8:	20002e84 	.word	0x20002e84
 80069ec:	20002e8c 	.word	0x20002e8c
 80069f0:	20002e88 	.word	0x20002e88
 80069f4:	20002e98 	.word	0x20002e98

080069f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <prvInsertBlockIntoFreeList+0xac>)
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e002      	b.n	8006a0c <prvInsertBlockIntoFreeList+0x14>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d8f7      	bhi.n	8006a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4413      	add	r3, r2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d108      	bne.n	8006a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d118      	bne.n	8006a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b15      	ldr	r3, [pc, #84]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d00d      	beq.n	8006a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e008      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a76:	4b0c      	ldr	r3, [pc, #48]	; (8006aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	e003      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d002      	beq.n	8006a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20002e7c 	.word	0x20002e7c
 8006aa8:	20002e84 	.word	0x20002e84

08006aac <__libc_init_array>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4d0d      	ldr	r5, [pc, #52]	; (8006ae4 <__libc_init_array+0x38>)
 8006ab0:	4c0d      	ldr	r4, [pc, #52]	; (8006ae8 <__libc_init_array+0x3c>)
 8006ab2:	1b64      	subs	r4, r4, r5
 8006ab4:	10a4      	asrs	r4, r4, #2
 8006ab6:	2600      	movs	r6, #0
 8006ab8:	42a6      	cmp	r6, r4
 8006aba:	d109      	bne.n	8006ad0 <__libc_init_array+0x24>
 8006abc:	4d0b      	ldr	r5, [pc, #44]	; (8006aec <__libc_init_array+0x40>)
 8006abe:	4c0c      	ldr	r4, [pc, #48]	; (8006af0 <__libc_init_array+0x44>)
 8006ac0:	f000 f8f2 	bl	8006ca8 <_init>
 8006ac4:	1b64      	subs	r4, r4, r5
 8006ac6:	10a4      	asrs	r4, r4, #2
 8006ac8:	2600      	movs	r6, #0
 8006aca:	42a6      	cmp	r6, r4
 8006acc:	d105      	bne.n	8006ada <__libc_init_array+0x2e>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad4:	4798      	blx	r3
 8006ad6:	3601      	adds	r6, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__libc_init_array+0xc>
 8006ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ade:	4798      	blx	r3
 8006ae0:	3601      	adds	r6, #1
 8006ae2:	e7f2      	b.n	8006aca <__libc_init_array+0x1e>
 8006ae4:	08006dd0 	.word	0x08006dd0
 8006ae8:	08006dd0 	.word	0x08006dd0
 8006aec:	08006dd0 	.word	0x08006dd0
 8006af0:	08006dd4 	.word	0x08006dd4

08006af4 <__retarget_lock_acquire_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <__retarget_lock_release_recursive>:
 8006af6:	4770      	bx	lr

08006af8 <memcpy>:
 8006af8:	440a      	add	r2, r1
 8006afa:	4291      	cmp	r1, r2
 8006afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b00:	d100      	bne.n	8006b04 <memcpy+0xc>
 8006b02:	4770      	bx	lr
 8006b04:	b510      	push	{r4, lr}
 8006b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b0e:	4291      	cmp	r1, r2
 8006b10:	d1f9      	bne.n	8006b06 <memcpy+0xe>
 8006b12:	bd10      	pop	{r4, pc}

08006b14 <memset>:
 8006b14:	4402      	add	r2, r0
 8006b16:	4603      	mov	r3, r0
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d100      	bne.n	8006b1e <memset+0xa>
 8006b1c:	4770      	bx	lr
 8006b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b22:	e7f9      	b.n	8006b18 <memset+0x4>

08006b24 <_free_r>:
 8006b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b26:	2900      	cmp	r1, #0
 8006b28:	d044      	beq.n	8006bb4 <_free_r+0x90>
 8006b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2e:	9001      	str	r0, [sp, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f1a1 0404 	sub.w	r4, r1, #4
 8006b36:	bfb8      	it	lt
 8006b38:	18e4      	addlt	r4, r4, r3
 8006b3a:	f000 f8a9 	bl	8006c90 <__malloc_lock>
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <_free_r+0x94>)
 8006b40:	9801      	ldr	r0, [sp, #4]
 8006b42:	6813      	ldr	r3, [r2, #0]
 8006b44:	b933      	cbnz	r3, 8006b54 <_free_r+0x30>
 8006b46:	6063      	str	r3, [r4, #4]
 8006b48:	6014      	str	r4, [r2, #0]
 8006b4a:	b003      	add	sp, #12
 8006b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b50:	f000 b8a4 	b.w	8006c9c <__malloc_unlock>
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	d908      	bls.n	8006b6a <_free_r+0x46>
 8006b58:	6825      	ldr	r5, [r4, #0]
 8006b5a:	1961      	adds	r1, r4, r5
 8006b5c:	428b      	cmp	r3, r1
 8006b5e:	bf01      	itttt	eq
 8006b60:	6819      	ldreq	r1, [r3, #0]
 8006b62:	685b      	ldreq	r3, [r3, #4]
 8006b64:	1949      	addeq	r1, r1, r5
 8006b66:	6021      	streq	r1, [r4, #0]
 8006b68:	e7ed      	b.n	8006b46 <_free_r+0x22>
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	b10b      	cbz	r3, 8006b74 <_free_r+0x50>
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	d9fa      	bls.n	8006b6a <_free_r+0x46>
 8006b74:	6811      	ldr	r1, [r2, #0]
 8006b76:	1855      	adds	r5, r2, r1
 8006b78:	42a5      	cmp	r5, r4
 8006b7a:	d10b      	bne.n	8006b94 <_free_r+0x70>
 8006b7c:	6824      	ldr	r4, [r4, #0]
 8006b7e:	4421      	add	r1, r4
 8006b80:	1854      	adds	r4, r2, r1
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	d1e0      	bne.n	8006b4a <_free_r+0x26>
 8006b88:	681c      	ldr	r4, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	6053      	str	r3, [r2, #4]
 8006b8e:	4421      	add	r1, r4
 8006b90:	6011      	str	r1, [r2, #0]
 8006b92:	e7da      	b.n	8006b4a <_free_r+0x26>
 8006b94:	d902      	bls.n	8006b9c <_free_r+0x78>
 8006b96:	230c      	movs	r3, #12
 8006b98:	6003      	str	r3, [r0, #0]
 8006b9a:	e7d6      	b.n	8006b4a <_free_r+0x26>
 8006b9c:	6825      	ldr	r5, [r4, #0]
 8006b9e:	1961      	adds	r1, r4, r5
 8006ba0:	428b      	cmp	r3, r1
 8006ba2:	bf04      	itt	eq
 8006ba4:	6819      	ldreq	r1, [r3, #0]
 8006ba6:	685b      	ldreq	r3, [r3, #4]
 8006ba8:	6063      	str	r3, [r4, #4]
 8006baa:	bf04      	itt	eq
 8006bac:	1949      	addeq	r1, r1, r5
 8006bae:	6021      	streq	r1, [r4, #0]
 8006bb0:	6054      	str	r4, [r2, #4]
 8006bb2:	e7ca      	b.n	8006b4a <_free_r+0x26>
 8006bb4:	b003      	add	sp, #12
 8006bb6:	bd30      	pop	{r4, r5, pc}
 8006bb8:	20002ea0 	.word	0x20002ea0

08006bbc <cleanup_glue>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	6809      	ldr	r1, [r1, #0]
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	b109      	cbz	r1, 8006bca <cleanup_glue+0xe>
 8006bc6:	f7ff fff9 	bl	8006bbc <cleanup_glue>
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4628      	mov	r0, r5
 8006bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bd2:	f7ff bfa7 	b.w	8006b24 <_free_r>
	...

08006bd8 <_reclaim_reent>:
 8006bd8:	4b2c      	ldr	r3, [pc, #176]	; (8006c8c <_reclaim_reent+0xb4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4283      	cmp	r3, r0
 8006bde:	b570      	push	{r4, r5, r6, lr}
 8006be0:	4604      	mov	r4, r0
 8006be2:	d051      	beq.n	8006c88 <_reclaim_reent+0xb0>
 8006be4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006be6:	b143      	cbz	r3, 8006bfa <_reclaim_reent+0x22>
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d14a      	bne.n	8006c84 <_reclaim_reent+0xac>
 8006bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bf0:	6819      	ldr	r1, [r3, #0]
 8006bf2:	b111      	cbz	r1, 8006bfa <_reclaim_reent+0x22>
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f7ff ff95 	bl	8006b24 <_free_r>
 8006bfa:	6961      	ldr	r1, [r4, #20]
 8006bfc:	b111      	cbz	r1, 8006c04 <_reclaim_reent+0x2c>
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f7ff ff90 	bl	8006b24 <_free_r>
 8006c04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c06:	b111      	cbz	r1, 8006c0e <_reclaim_reent+0x36>
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f7ff ff8b 	bl	8006b24 <_free_r>
 8006c0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c10:	b111      	cbz	r1, 8006c18 <_reclaim_reent+0x40>
 8006c12:	4620      	mov	r0, r4
 8006c14:	f7ff ff86 	bl	8006b24 <_free_r>
 8006c18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006c1a:	b111      	cbz	r1, 8006c22 <_reclaim_reent+0x4a>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f7ff ff81 	bl	8006b24 <_free_r>
 8006c22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006c24:	b111      	cbz	r1, 8006c2c <_reclaim_reent+0x54>
 8006c26:	4620      	mov	r0, r4
 8006c28:	f7ff ff7c 	bl	8006b24 <_free_r>
 8006c2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006c2e:	b111      	cbz	r1, 8006c36 <_reclaim_reent+0x5e>
 8006c30:	4620      	mov	r0, r4
 8006c32:	f7ff ff77 	bl	8006b24 <_free_r>
 8006c36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006c38:	b111      	cbz	r1, 8006c40 <_reclaim_reent+0x68>
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7ff ff72 	bl	8006b24 <_free_r>
 8006c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c42:	b111      	cbz	r1, 8006c4a <_reclaim_reent+0x72>
 8006c44:	4620      	mov	r0, r4
 8006c46:	f7ff ff6d 	bl	8006b24 <_free_r>
 8006c4a:	69a3      	ldr	r3, [r4, #24]
 8006c4c:	b1e3      	cbz	r3, 8006c88 <_reclaim_reent+0xb0>
 8006c4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c50:	4620      	mov	r0, r4
 8006c52:	4798      	blx	r3
 8006c54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c56:	b1b9      	cbz	r1, 8006c88 <_reclaim_reent+0xb0>
 8006c58:	4620      	mov	r0, r4
 8006c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c5e:	f7ff bfad 	b.w	8006bbc <cleanup_glue>
 8006c62:	5949      	ldr	r1, [r1, r5]
 8006c64:	b941      	cbnz	r1, 8006c78 <_reclaim_reent+0xa0>
 8006c66:	3504      	adds	r5, #4
 8006c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c6a:	2d80      	cmp	r5, #128	; 0x80
 8006c6c:	68d9      	ldr	r1, [r3, #12]
 8006c6e:	d1f8      	bne.n	8006c62 <_reclaim_reent+0x8a>
 8006c70:	4620      	mov	r0, r4
 8006c72:	f7ff ff57 	bl	8006b24 <_free_r>
 8006c76:	e7ba      	b.n	8006bee <_reclaim_reent+0x16>
 8006c78:	680e      	ldr	r6, [r1, #0]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7ff ff52 	bl	8006b24 <_free_r>
 8006c80:	4631      	mov	r1, r6
 8006c82:	e7ef      	b.n	8006c64 <_reclaim_reent+0x8c>
 8006c84:	2500      	movs	r5, #0
 8006c86:	e7ef      	b.n	8006c68 <_reclaim_reent+0x90>
 8006c88:	bd70      	pop	{r4, r5, r6, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000010 	.word	0x20000010

08006c90 <__malloc_lock>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__malloc_lock+0x8>)
 8006c92:	f7ff bf2f 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 8006c96:	bf00      	nop
 8006c98:	20002e9c 	.word	0x20002e9c

08006c9c <__malloc_unlock>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__malloc_unlock+0x8>)
 8006c9e:	f7ff bf2a 	b.w	8006af6 <__retarget_lock_release_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	20002e9c 	.word	0x20002e9c

08006ca8 <_init>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	bf00      	nop
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr

08006cb4 <_fini>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	bf00      	nop
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr
