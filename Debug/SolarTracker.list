
SolarTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a740  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800a8d0  0800a8d0  0001a8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add8  0800add8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800add8  0800add8  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade0  0800ade0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ade8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e3c  200001e4  0800afcc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003020  0800afcc  00023020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b844  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b9  00000000  00000000  0003ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0003f118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  000407d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c90  00000000  00000000  00041d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195ec  00000000  00000000  000469d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8433  00000000  00000000  0005ffbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001383ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072b0  00000000  00000000  00138440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8b8 	.word	0x0800a8b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a8b8 	.word	0x0800a8b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b9aa 	b.w	8000f98 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff49 	bl	8000afc <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcbf 	bl	8000618 <__aeabi_dmul>
 8000c9a:	f7ff ff57 	bl	8000b4c <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc40 	bl	8000524 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcb6 	bl	8000618 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf8 	bl	80002a8 <__aeabi_dsub>
 8000cb8:	f7ff ff48 	bl	8000b4c <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <vApplicationGetIdleTaskMemory+0x30>)
 8000fb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000200 	.word	0x20000200
 8000fcc:	200002b4 	.word	0x200002b4

08000fd0 <GpsToDecimalDegrees>:
 * Convert NMEA absolute position to decimal degrees
 * "ddmm.mmmm" or "dddmm.mmmm" really is D+M/60,
 * then negated if quadrant is 'W' or 'S'
 */
float GpsToDecimalDegrees(char* nmeaPos, char quadrant)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
  float v= 0;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  if(strlen(nmeaPos)>5)
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff f8fe 	bl	80001e4 <strlen>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d948      	bls.n	8001080 <GpsToDecimalDegrees+0xb0>
  {
    char integerPart[3+1];
    int digitCount= (nmeaPos[4]=='.' ? 2 : 3);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ff6:	d101      	bne.n	8000ffc <GpsToDecimalDegrees+0x2c>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e000      	b.n	8000ffe <GpsToDecimalDegrees+0x2e>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	613b      	str	r3, [r7, #16]
    memcpy(integerPart, nmeaPos, digitCount);
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f006 fd7b 	bl	8007b04 <memcpy>
    integerPart[digitCount]= 0;
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4413      	add	r3, r2
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    nmeaPos+= digitCount;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	607b      	str	r3, [r7, #4]
    v= atoi(integerPart) + atof(nmeaPos)/60.;
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4618      	mov	r0, r3
 8001028:	f006 fc3b 	bl	80078a2 <atoi>
 800102c:	4603      	mov	r3, r0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa88 	bl	8000544 <__aeabi_i2d>
 8001034:	4604      	mov	r4, r0
 8001036:	460d      	mov	r5, r1
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f006 fc2f 	bl	800789c <atof>
 800103e:	ec51 0b10 	vmov	r0, r1, d0
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <GpsToDecimalDegrees+0xc0>)
 8001048:	f7ff fc10 	bl	800086c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4620      	mov	r0, r4
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff f92a 	bl	80002ac <__adddf3>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd94 	bl	8000b8c <__aeabi_d2f>
 8001064:	4603      	mov	r3, r0
 8001066:	617b      	str	r3, [r7, #20]
    if(quadrant=='W' || quadrant=='S')
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b57      	cmp	r3, #87	; 0x57
 800106c:	d002      	beq.n	8001074 <GpsToDecimalDegrees+0xa4>
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	2b53      	cmp	r3, #83	; 0x53
 8001072:	d105      	bne.n	8001080 <GpsToDecimalDegrees+0xb0>
      v= -v;
 8001074:	edd7 7a05 	vldr	s15, [r7, #20]
 8001078:	eef1 7a67 	vneg.f32	s15, s15
 800107c:	edc7 7a05 	vstr	s15, [r7, #20]
  }
  return v;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	ee07 3a90 	vmov	s15, r3
}
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	404e0000 	.word	0x404e0000

08001094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b092      	sub	sp, #72	; 0x48
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109a:	f000 fdc8 	bl	8001c2e <HAL_Init>
  /* USER CODE BEGIN Init */
//  BSP_LED_Init(LED3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109e:	f000 f86d 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a2:	f000 f925 	bl	80012f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010a6:	f000 f8f3 	bl	8001290 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 80010aa:	f000 f8ad 	bl	8001208 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  //Enable Uart Interrupts
  HAL_NVIC_SetPriority(USART_GPS_IRQn, 7, 6);
 80010ae:	2206      	movs	r2, #6
 80010b0:	2107      	movs	r1, #7
 80010b2:	2025      	movs	r0, #37	; 0x25
 80010b4:	f000 feac 	bl	8001e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART_GPS_IRQn);
 80010b8:	2025      	movs	r0, #37	; 0x25
 80010ba:	f000 fec5 	bl	8001e48 <HAL_NVIC_EnableIRQ>
  USART_GPS->CR1 |= USART_CR1_RXNEIE; // Enable Interrupt
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <main+0xc8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <main+0xc8>)
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SPI_sem */
  osSemaphoreDef(SPI_sem);
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
  SPI_semHandle = osSemaphoreCreate(osSemaphore(SPI_sem), 1);
 80010d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d6:	2101      	movs	r1, #1
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 f833 	bl	8005144 <osSemaphoreCreate>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <main+0xcc>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_sem */
  osSemaphoreDef(UART_sem);
 80010e4:	2300      	movs	r3, #0
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80010e8:	2300      	movs	r3, #0
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  UART_semHandle = osSemaphoreCreate(osSemaphore(UART_sem), 1);
 80010ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f0:	2101      	movs	r1, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f004 f826 	bl	8005144 <osSemaphoreCreate>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a1a      	ldr	r2, [pc, #104]	; (8001164 <main+0xd0>)
 80010fc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueueSerialDataReceived = xQueueCreate( 2, sizeof( SerialBuffer) );
 80010fe:	2200      	movs	r2, #0
 8001100:	2164      	movs	r1, #100	; 0x64
 8001102:	2002      	movs	r0, #2
 8001104:	f004 f9f2 	bl	80054ec <xQueueGenericCreate>
 8001108:	4603      	mov	r3, r0
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <main+0xd4>)
 800110c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of uartTask */
  osThreadDef(uartTask, uartTaskFunc, osPriorityNormal, 0, 512);
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <main+0xd8>)
 8001110:	f107 041c 	add.w	r4, r7, #28
 8001114:	461d      	mov	r5, r3
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f003 ffab 	bl	8005084 <osThreadCreate>
 800112e:	4603      	mov	r3, r0
 8001130:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <main+0xdc>)
 8001132:	6013      	str	r3, [r2, #0]

  /* definition and creation of spiTask */
  osThreadDef(spiTask, spiTaskFunc, osPriorityNormal, 0, 512);
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <main+0xe0>)
 8001136:	463c      	mov	r4, r7
 8001138:	461d      	mov	r5, r3
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001142:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  spiTaskHandle = osThreadCreate(osThread(spiTask), NULL);
 8001146:	463b      	mov	r3, r7
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f003 ff9a 	bl	8005084 <osThreadCreate>
 8001150:	4603      	mov	r3, r0
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <main+0xe4>)
 8001154:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001156:	f003 ff8e 	bl	8005076 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0xc6>
 800115c:	40013800 	.word	0x40013800
 8001160:	20000618 	.word	0x20000618
 8001164:	2000061c 	.word	0x2000061c
 8001168:	20000684 	.word	0x20000684
 800116c:	0800a8e4 	.word	0x0800a8e4
 8001170:	20000610 	.word	0x20000610
 8001174:	0800a900 	.word	0x0800a900
 8001178:	20000614 	.word	0x20000614

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	; 0x58
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2244      	movs	r2, #68	; 0x44
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f006 fcc8 	bl	8007b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800119e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011a2:	f000 ffef 	bl	8002184 <HAL_PWREx_ControlVoltageScaling>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011ac:	f000 fafe 	bl	80017ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011b0:	2310      	movs	r3, #16
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011bc:	2360      	movs	r3, #96	; 0x60
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 f831 	bl	8002230 <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80011d4:	f000 faea 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	230f      	movs	r3, #15
 80011da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fc31 	bl	8002a58 <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011fc:	f000 fad6 	bl	80017ac <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3758      	adds	r7, #88	; 0x58
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_SPI3_Init+0x80>)
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <MX_SPI3_Init+0x84>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_SPI3_Init+0x80>)
 8001214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_SPI3_Init+0x80>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_SPI3_Init+0x80>)
 8001222:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001226:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_SPI3_Init+0x80>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_SPI3_Init+0x80>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_SPI3_Init+0x80>)
 8001236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <MX_SPI3_Init+0x80>)
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_SPI3_Init+0x80>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <MX_SPI3_Init+0x80>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_SPI3_Init+0x80>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_SPI3_Init+0x80>)
 8001256:	2207      	movs	r2, #7
 8001258:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_SPI3_Init+0x80>)
 800125c:	2200      	movs	r2, #0
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_SPI3_Init+0x80>)
 8001262:	2208      	movs	r2, #8
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001266:	4808      	ldr	r0, [pc, #32]	; (8001288 <MX_SPI3_Init+0x80>)
 8001268:	f002 f934 	bl	80034d4 <HAL_SPI_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 fa9b 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
  SPI3->CR1 |= SPI_CR1_SSM;
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <MX_SPI3_Init+0x84>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <MX_SPI3_Init+0x84>)
 800127c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001280:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI3_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000528 	.word	0x20000528
 800128c:	40003c00 	.word	0x40003c00

08001290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <MX_USART1_UART_Init+0x5c>)
 8001298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 800129c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_USART1_UART_Init+0x58>)
 80012d4:	f003 fa8e 	bl	80047f4 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012de:	f000 fa65 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000058c 	.word	0x2000058c
 80012ec:	40013800 	.word	0x40013800

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_GPIO_Init+0x78>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <MX_GPIO_Init+0x78>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_GPIO_Init+0x78>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_GPIO_Init+0x78>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a11      	ldr	r2, [pc, #68]	; (8001368 <MX_GPIO_Init+0x78>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_GPIO_Init+0x78>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2110      	movs	r1, #16
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f000 fefb 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001342:	2310      	movs	r3, #16
 8001344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001346:	2301      	movs	r3, #1
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135c:	f000 fd82 	bl	8001e64 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000

0800136c <USART1_IRQHandler>:

/* USER CODE BEGIN 4 */
void USART_GPS_IRQHandler(void) // Sync and Queue NMEA Sentences
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
	static char rx_buffer[LINEMAX + 1]; // Local holding buffer to build line, w/NUL
	static int rx_index = 0;
	if (USART_GPS->ISR & USART_ISR_ORE) // Overrun Error
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <USART1_IRQHandler+0xc4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <USART1_IRQHandler+0x1c>
		USART_GPS->ICR = USART_ICR_ORECF;
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <USART1_IRQHandler+0xc4>)
 8001384:	2208      	movs	r2, #8
 8001386:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_NE) // Noise Error
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <USART1_IRQHandler+0xc4>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <USART1_IRQHandler+0x2e>
		USART_GPS->ICR = USART_ICR_NCF;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <USART1_IRQHandler+0xc4>)
 8001396:	2204      	movs	r2, #4
 8001398:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_FE) // Framing Error
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <USART1_IRQHandler+0xc4>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <USART1_IRQHandler+0x40>
		USART_GPS->ICR = USART_ICR_FECF;
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <USART1_IRQHandler+0xc4>)
 80013a8:	2202      	movs	r2, #2
 80013aa:	621a      	str	r2, [r3, #32]
	if (USART_GPS->ISR & USART_ISR_RXNE) // Received character?
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <USART1_IRQHandler+0xc4>)
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d036      	beq.n	8001426 <USART1_IRQHandler+0xba>
	{
		char rx = (char)(USART_GPS->RDR & 0xFF);
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <USART1_IRQHandler+0xc4>)
 80013ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013bc:	b29b      	uxth	r3, r3
 80013be:	71fb      	strb	r3, [r7, #7]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b0d      	cmp	r3, #13
 80013c4:	d002      	beq.n	80013cc <USART1_IRQHandler+0x60>
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b0a      	cmp	r3, #10
 80013ca:	d119      	bne.n	8001400 <USART1_IRQHandler+0x94>
		{
			if (rx_index != 0) // Line has some content?
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <USART1_IRQHandler+0xc8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d028      	beq.n	8001426 <USART1_IRQHandler+0xba>
			{
				rx_buffer[rx_index++] = 0; // Add NUL if required down stream
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <USART1_IRQHandler+0xc8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	4916      	ldr	r1, [pc, #88]	; (8001434 <USART1_IRQHandler+0xc8>)
 80013dc:	600a      	str	r2, [r1, #0]
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <USART1_IRQHandler+0xcc>)
 80013e0:	2100      	movs	r1, #0
 80013e2:	54d1      	strb	r1, [r2, r3]
				//QueueBuffer(rx_buffer, rx_index); // Copy to queue from live dynamic receive buffer
				xQueueSendFromISR(xQueueSerialDataReceived,(void *)&rx_buffer,&xHigherPriorityTaskWoken);
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <USART1_IRQHandler+0xd0>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	463a      	mov	r2, r7
 80013ea:	2300      	movs	r3, #0
 80013ec:	4912      	ldr	r1, [pc, #72]	; (8001438 <USART1_IRQHandler+0xcc>)
 80013ee:	f004 fa3f 	bl	8005870 <xQueueGenericSendFromISR>
				rx_index = 0; // Reset content pointer
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <USART1_IRQHandler+0xc8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
				got_nmea = 1;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <USART1_IRQHandler+0xd4>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
			if (rx_index != 0) // Line has some content?
 80013fe:	e012      	b.n	8001426 <USART1_IRQHandler+0xba>
			}
		}
		else
		{
			if ((rx == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b24      	cmp	r3, #36	; 0x24
 8001404:	d003      	beq.n	800140e <USART1_IRQHandler+0xa2>
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <USART1_IRQHandler+0xc8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2bc8      	cmp	r3, #200	; 0xc8
 800140c:	d102      	bne.n	8001414 <USART1_IRQHandler+0xa8>
				rx_index = 0;
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <USART1_IRQHandler+0xc8>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <USART1_IRQHandler+0xc8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	4906      	ldr	r1, [pc, #24]	; (8001434 <USART1_IRQHandler+0xc8>)
 800141c:	600a      	str	r2, [r1, #0]
 800141e:	4906      	ldr	r1, [pc, #24]	; (8001438 <USART1_IRQHandler+0xcc>)
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	54ca      	strb	r2, [r1, r3]
		}
	}
}
 8001424:	e7ff      	b.n	8001426 <USART1_IRQHandler+0xba>
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40013800 	.word	0x40013800
 8001434:	20000688 	.word	0x20000688
 8001438:	2000068c 	.word	0x2000068c
 800143c:	20000684 	.word	0x20000684
 8001440:	200004b4 	.word	0x200004b4

08001444 <uartTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_uartTaskFunc */
void uartTaskFunc(void const * argument)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	char* message_id, *time, *data_valid, *raw_latitude, *raw_longitude, *latdir, *longdir;

	/* Infinite loop */
	for(;;)
	{
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 800144c:	4b51      	ldr	r3, [pc, #324]	; (8001594 <uartTaskFunc+0x150>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f004 fc95 	bl	8005d80 <uxQueueMessagesWaitingFromISR>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f7      	beq.n	800144c <uartTaskFunc+0x8>
	  {
		  if(valid_count == 0) {
 800145c:	4b4e      	ldr	r3, [pc, #312]	; (8001598 <uartTaskFunc+0x154>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d106      	bne.n	8001472 <uartTaskFunc+0x2e>
			  //osSemaphoreAcquire(UART_semHandle, osWaitForever); //Grab semaphore for new message
			  xSemaphoreTake(UART_semHandle, portMAX_DELAY);
 8001464:	4b4d      	ldr	r3, [pc, #308]	; (800159c <uartTaskFunc+0x158>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	4618      	mov	r0, r3
 800146e:	f004 fb7b 	bl	8005b68 <xQueueSemaphoreTake>
		  }

		  xQueueReceive(xQueueSerialDataReceived,&(SerialBufferReceived),1);
 8001472:	4b48      	ldr	r3, [pc, #288]	; (8001594 <uartTaskFunc+0x150>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	4949      	ldr	r1, [pc, #292]	; (80015a0 <uartTaskFunc+0x15c>)
 800147a:	4618      	mov	r0, r3
 800147c:	f004 fa94 	bl	80059a8 <xQueueReceive>
		  valid_count++;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <uartTaskFunc+0x154>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b43      	ldr	r3, [pc, #268]	; (8001598 <uartTaskFunc+0x154>)
 800148a:	701a      	strb	r2, [r3, #0]
		  //Fill and check header
		  for(int c = 0; c < 6; c++){
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001490:	e00b      	b.n	80014aa <uartTaskFunc+0x66>
			  nmea_header[c] = SerialBufferReceived.Buffer[c];
 8001492:	4a43      	ldr	r2, [pc, #268]	; (80015a0 <uartTaskFunc+0x15c>)
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	4413      	add	r3, r2
 8001498:	7819      	ldrb	r1, [r3, #0]
 800149a:	4a42      	ldr	r2, [pc, #264]	; (80015a4 <uartTaskFunc+0x160>)
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	4413      	add	r3, r2
 80014a0:	460a      	mov	r2, r1
 80014a2:	701a      	strb	r2, [r3, #0]
		  for(int c = 0; c < 6; c++){
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	3301      	adds	r3, #1
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	ddf0      	ble.n	8001492 <uartTaskFunc+0x4e>
		  }
		  if(!strcmp(nmea_header, "$GPRMC")){
 80014b0:	493d      	ldr	r1, [pc, #244]	; (80015a8 <uartTaskFunc+0x164>)
 80014b2:	483c      	ldr	r0, [pc, #240]	; (80015a4 <uartTaskFunc+0x160>)
 80014b4:	f7fe fe8c 	bl	80001d0 <strcmp>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d165      	bne.n	800158a <uartTaskFunc+0x146>
			  if(SerialBufferReceived.Buffer[18] == 'A'){
 80014be:	4b38      	ldr	r3, [pc, #224]	; (80015a0 <uartTaskFunc+0x15c>)
 80014c0:	7c9b      	ldrb	r3, [r3, #18]
 80014c2:	2b41      	cmp	r3, #65	; 0x41
 80014c4:	d161      	bne.n	800158a <uartTaskFunc+0x146>
				  //Got a fix0000
				  message_id = SerialBufferReceived.Buffer;
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <uartTaskFunc+0x15c>)
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
				  time = FIND_AND_NUL(message_id, time, ',');
 80014ca:	212c      	movs	r1, #44	; 0x2c
 80014cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014ce:	f006 fce4 	bl	8007e9a <strchr>
 80014d2:	6278      	str	r0, [r7, #36]	; 0x24
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	3301      	adds	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
				  data_valid = FIND_AND_NUL(time, data_valid, ',');
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014e4:	f006 fcd9 	bl	8007e9a <strchr>
 80014e8:	6238      	str	r0, [r7, #32]
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	3301      	adds	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
				  raw_latitude = FIND_AND_NUL(data_valid, raw_latitude, ',');
 80014f6:	212c      	movs	r1, #44	; 0x2c
 80014f8:	6a38      	ldr	r0, [r7, #32]
 80014fa:	f006 fcce 	bl	8007e9a <strchr>
 80014fe:	61f8      	str	r0, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
				  latdir = FIND_AND_NUL(raw_latitude, latdir, ',');
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	69f8      	ldr	r0, [r7, #28]
 8001510:	f006 fcc3 	bl	8007e9a <strchr>
 8001514:	61b8      	str	r0, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	3301      	adds	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
				  raw_longitude = FIND_AND_NUL(latdir, raw_longitude, ',');
 8001522:	212c      	movs	r1, #44	; 0x2c
 8001524:	69b8      	ldr	r0, [r7, #24]
 8001526:	f006 fcb8 	bl	8007e9a <strchr>
 800152a:	6178      	str	r0, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
				  longdir = FIND_AND_NUL(raw_longitude, longdir, ',');
 8001538:	212c      	movs	r1, #44	; 0x2c
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f006 fcad 	bl	8007e9a <strchr>
 8001540:	6138      	str	r0, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	3301      	adds	r3, #1
 800154c:	613b      	str	r3, [r7, #16]

				  latitude = GpsToDecimalDegrees(raw_latitude, latdir);
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	69f8      	ldr	r0, [r7, #28]
 8001556:	f7ff fd3b 	bl	8000fd0 <GpsToDecimalDegrees>
 800155a:	ed87 0a03 	vstr	s0, [r7, #12]
				  longitude = GpsToDecimalDegrees(raw_longitude, longdir);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4619      	mov	r1, r3
 8001564:	6978      	ldr	r0, [r7, #20]
 8001566:	f7ff fd33 	bl	8000fd0 <GpsToDecimalDegrees>
 800156a:	ed87 0a02 	vstr	s0, [r7, #8]

				  if(valid_count >= 47){ //Length of NMEA message
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <uartTaskFunc+0x154>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b2e      	cmp	r3, #46	; 0x2e
 8001574:	d909      	bls.n	800158a <uartTaskFunc+0x146>
					  valid_count = 0;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <uartTaskFunc+0x154>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
					  //Post SPI write semaphore when received full valid message
					  //osSemaphoreRelease(SPI_semHandle);
					  xSemaphoreGive(SPI_semHandle);
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <uartTaskFunc+0x168>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	2300      	movs	r3, #0
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	f004 f875 	bl	8005674 <xQueueGenericSend>
				  }
			  }
		  }
		  got_nmea=0;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <uartTaskFunc+0x16c>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
	  if(uxQueueMessagesWaitingFromISR(xQueueSerialDataReceived)>0)
 8001590:	e75c      	b.n	800144c <uartTaskFunc+0x8>
 8001592:	bf00      	nop
 8001594:	20000684 	.word	0x20000684
 8001598:	20000755 	.word	0x20000755
 800159c:	2000061c 	.word	0x2000061c
 80015a0:	20000620 	.word	0x20000620
 80015a4:	200004b8 	.word	0x200004b8
 80015a8:	0800a91c 	.word	0x0800a91c
 80015ac:	20000618 	.word	0x20000618
 80015b0:	200004b4 	.word	0x200004b4

080015b4 <spiTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_spiTaskFunc */
void spiTaskFunc(void const * argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN spiTaskFunc */
	HAL_StatusTypeDef response = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //osStatus stat = osSemaphoreAcquire(SPI_semHandle, osWaitForever); //Wait for nmea sem to be posted
	  xSemaphoreTake(SPI_semHandle, portMAX_DELAY);
 80015c0:	4b65      	ldr	r3, [pc, #404]	; (8001758 <spiTaskFunc+0x1a4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 facd 	bl	8005b68 <xQueueSemaphoreTake>
	  osDelay(1);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f003 fda4 	bl	800511c <osDelay>
	  //Send over SPI to FRAM
	  //SPI Initialization **************************
	  //Write CS Pin high
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2110      	movs	r1, #16
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f000 fdac 	bl	8002138 <HAL_GPIO_WritePin>

	  // Enable write enable latch (allow write operations)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2110      	movs	r1, #16
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f000 fda6 	bl	8002138 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&WREN, 1, 100);
 80015ec:	2364      	movs	r3, #100	; 0x64
 80015ee:	2201      	movs	r2, #1
 80015f0:	495a      	ldr	r1, [pc, #360]	; (800175c <spiTaskFunc+0x1a8>)
 80015f2:	485b      	ldr	r0, [pc, #364]	; (8001760 <spiTaskFunc+0x1ac>)
 80015f4:	f002 f811 	bl	800361a <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2110      	movs	r1, #16
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f000 fd9a 	bl	8002138 <HAL_GPIO_WritePin>

	  // Test bytes to write to EEPROM
	  spi_mout_buf[0] = 0xAB;
 8001604:	4b57      	ldr	r3, [pc, #348]	; (8001764 <spiTaskFunc+0x1b0>)
 8001606:	22ab      	movs	r2, #171	; 0xab
 8001608:	701a      	strb	r2, [r3, #0]
	  spi_mout_buf[1] = 0xCD;
 800160a:	4b56      	ldr	r3, [pc, #344]	; (8001764 <spiTaskFunc+0x1b0>)
 800160c:	22cd      	movs	r2, #205	; 0xcd
 800160e:	705a      	strb	r2, [r3, #1]
	  spi_mout_buf[2] = 0xEF;
 8001610:	4b54      	ldr	r3, [pc, #336]	; (8001764 <spiTaskFunc+0x1b0>)
 8001612:	22ef      	movs	r2, #239	; 0xef
 8001614:	709a      	strb	r2, [r3, #2]

	  // Set starting address
	  spi_addr = 0x00;
 8001616:	4b54      	ldr	r3, [pc, #336]	; (8001768 <spiTaskFunc+0x1b4>)
 8001618:	2200      	movs	r2, #0
 800161a:	801a      	strh	r2, [r3, #0]

	  // Write 3 bytes starting at given address
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2110      	movs	r1, #16
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f000 fd88 	bl	8002138 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&WRITE, 1, 100);
 8001628:	2364      	movs	r3, #100	; 0x64
 800162a:	2201      	movs	r2, #1
 800162c:	494f      	ldr	r1, [pc, #316]	; (800176c <spiTaskFunc+0x1b8>)
 800162e:	484c      	ldr	r0, [pc, #304]	; (8001760 <spiTaskFunc+0x1ac>)
 8001630:	f001 fff3 	bl	800361a <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)&spi_addr, 2, 100);
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	2202      	movs	r2, #2
 8001638:	494b      	ldr	r1, [pc, #300]	; (8001768 <spiTaskFunc+0x1b4>)
 800163a:	4849      	ldr	r0, [pc, #292]	; (8001760 <spiTaskFunc+0x1ac>)
 800163c:	f001 ffed 	bl	800361a <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi3, (uint8_t *)spi_mout_buf, 3, 100);
 8001640:	2364      	movs	r3, #100	; 0x64
 8001642:	2203      	movs	r2, #3
 8001644:	4947      	ldr	r1, [pc, #284]	; (8001764 <spiTaskFunc+0x1b0>)
 8001646:	4846      	ldr	r0, [pc, #280]	; (8001760 <spiTaskFunc+0x1ac>)
 8001648:	f001 ffe7 	bl	800361a <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	2110      	movs	r1, #16
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f000 fd70 	bl	8002138 <HAL_GPIO_WritePin>
	  //IO Driver for output pin enable

	  // Clear buffer
	  spi_mout_buf[0] = 0;
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <spiTaskFunc+0x1b0>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
	  spi_mout_buf[1] = 0;
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <spiTaskFunc+0x1b0>)
 8001660:	2200      	movs	r2, #0
 8001662:	705a      	strb	r2, [r3, #1]
	  spi_mout_buf[2] = 0;
 8001664:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <spiTaskFunc+0x1b0>)
 8001666:	2200      	movs	r2, #0
 8001668:	709a      	strb	r2, [r3, #2]

	  // Wait until WIP bit is cleared
	   spi_wip = 1;
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <spiTaskFunc+0x1bc>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
	   while (spi_wip)
 8001670:	e02f      	b.n	80016d2 <spiTaskFunc+0x11e>
	   {
		 // Read status register
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2110      	movs	r1, #16
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f000 fd5d 	bl	8002138 <HAL_GPIO_WritePin>
		 HAL_SPI_Transmit(&hspi3, (uint8_t *)&RDSR, 1, 100);
 800167e:	2364      	movs	r3, #100	; 0x64
 8001680:	2201      	movs	r2, #1
 8001682:	493c      	ldr	r1, [pc, #240]	; (8001774 <spiTaskFunc+0x1c0>)
 8001684:	4836      	ldr	r0, [pc, #216]	; (8001760 <spiTaskFunc+0x1ac>)
 8001686:	f001 ffc8 	bl	800361a <HAL_SPI_Transmit>
		 response = HAL_SPI_Receive(&hspi3, (uint8_t *)spi_mout_buf, 1, 100);
 800168a:	2364      	movs	r3, #100	; 0x64
 800168c:	2201      	movs	r2, #1
 800168e:	4935      	ldr	r1, [pc, #212]	; (8001764 <spiTaskFunc+0x1b0>)
 8001690:	4833      	ldr	r0, [pc, #204]	; (8001760 <spiTaskFunc+0x1ac>)
 8001692:	f002 f930 	bl	80038f6 <HAL_SPI_Receive>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
		 if (response == HAL_OK) {
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d106      	bne.n	80016ae <spiTaskFunc+0xfa>
		  printf("Status Reg: %02x \r\n", spi_mout_buf[0]);
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <spiTaskFunc+0x1b0>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4834      	ldr	r0, [pc, #208]	; (8001778 <spiTaskFunc+0x1c4>)
 80016a8:	f006 fb22 	bl	8007cf0 <iprintf>
 80016ac:	e004      	b.n	80016b8 <spiTaskFunc+0x104>
		 } else {
		  printf("Got error response as %d\r\n", response);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4832      	ldr	r0, [pc, #200]	; (800177c <spiTaskFunc+0x1c8>)
 80016b4:	f006 fb1c 	bl	8007cf0 <iprintf>
		 }
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2110      	movs	r1, #16
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f000 fd3a 	bl	8002138 <HAL_GPIO_WritePin>

		 // Mask out WIP bit
		 spi_wip = spi_mout_buf[0] & 0b00000001;
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <spiTaskFunc+0x1b0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b28      	ldr	r3, [pc, #160]	; (8001770 <spiTaskFunc+0x1bc>)
 80016d0:	701a      	strb	r2, [r3, #0]
	   while (spi_wip)
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <spiTaskFunc+0x1bc>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1cb      	bne.n	8001672 <spiTaskFunc+0xbe>
	   }

	   // Read the 3 bytes back
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2110      	movs	r1, #16
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f000 fd29 	bl	8002138 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi3, (uint8_t *)&READ, 1, 5);
 80016e6:	2305      	movs	r3, #5
 80016e8:	2201      	movs	r2, #1
 80016ea:	4925      	ldr	r1, [pc, #148]	; (8001780 <spiTaskFunc+0x1cc>)
 80016ec:	481c      	ldr	r0, [pc, #112]	; (8001760 <spiTaskFunc+0x1ac>)
 80016ee:	f001 ff94 	bl	800361a <HAL_SPI_Transmit>
	   HAL_SPI_Transmit(&hspi3, (uint8_t *)&spi_addr, 2, 5);
 80016f2:	2305      	movs	r3, #5
 80016f4:	2202      	movs	r2, #2
 80016f6:	491c      	ldr	r1, [pc, #112]	; (8001768 <spiTaskFunc+0x1b4>)
 80016f8:	4819      	ldr	r0, [pc, #100]	; (8001760 <spiTaskFunc+0x1ac>)
 80016fa:	f001 ff8e 	bl	800361a <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi3, (uint8_t *)spi_mout_buf, 3, 5);
 80016fe:	2305      	movs	r3, #5
 8001700:	2203      	movs	r2, #3
 8001702:	4918      	ldr	r1, [pc, #96]	; (8001764 <spiTaskFunc+0x1b0>)
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <spiTaskFunc+0x1ac>)
 8001706:	f002 f8f6 	bl	80038f6 <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2110      	movs	r1, #16
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f000 fd11 	bl	8002138 <HAL_GPIO_WritePin>

	   // Read status register
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2110      	movs	r1, #16
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f000 fd0b 	bl	8002138 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi3, (uint8_t *)&RDSR, 1, 100);
 8001722:	2364      	movs	r3, #100	; 0x64
 8001724:	2201      	movs	r2, #1
 8001726:	4913      	ldr	r1, [pc, #76]	; (8001774 <spiTaskFunc+0x1c0>)
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <spiTaskFunc+0x1ac>)
 800172a:	f001 ff76 	bl	800361a <HAL_SPI_Transmit>
	   HAL_SPI_Receive(&hspi3, (uint8_t *)spi_mout_buf, 1, 100);
 800172e:	2364      	movs	r3, #100	; 0x64
 8001730:	2201      	movs	r2, #1
 8001732:	490c      	ldr	r1, [pc, #48]	; (8001764 <spiTaskFunc+0x1b0>)
 8001734:	480a      	ldr	r0, [pc, #40]	; (8001760 <spiTaskFunc+0x1ac>)
 8001736:	f002 f8de 	bl	80038f6 <HAL_SPI_Receive>
	   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800173a:	2201      	movs	r2, #1
 800173c:	2110      	movs	r1, #16
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f000 fcf9 	bl	8002138 <HAL_GPIO_WritePin>
	  //osSemaphoreRelease(UART_semHandle); //Tell UART to gather more data
	  xSemaphoreGive(UART_semHandle);
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <spiTaskFunc+0x1d0>)
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	f003 ff90 	bl	8005674 <xQueueGenericSend>
	  xSemaphoreTake(SPI_semHandle, portMAX_DELAY);
 8001754:	e734      	b.n	80015c0 <spiTaskFunc+0xc>
 8001756:	bf00      	nop
 8001758:	20000618 	.word	0x20000618
 800175c:	0800a95b 	.word	0x0800a95b
 8001760:	20000528 	.word	0x20000528
 8001764:	200004c0 	.word	0x200004c0
 8001768:	20000524 	.word	0x20000524
 800176c:	0800a95a 	.word	0x0800a95a
 8001770:	20000526 	.word	0x20000526
 8001774:	0800a95c 	.word	0x0800a95c
 8001778:	0800a924 	.word	0x0800a924
 800177c:	0800a938 	.word	0x0800a938
 8001780:	0800a959 	.word	0x0800a959
 8001784:	2000061c 	.word	0x2000061c

08001788 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800179a:	f000 fa61 	bl	8001c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40012c00 	.word	0x40012c00

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_MspInit+0x4c>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_MspInit+0x4c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_MspInit+0x4c>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_MspInit+0x4c>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_MspInit+0x4c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6593      	str	r3, [r2, #88]	; 0x58
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_MspInit+0x4c>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	210f      	movs	r1, #15
 80017f2:	f06f 0001 	mvn.w	r0, #1
 80017f6:	f000 fb0b 	bl	8001e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_SPI_MspInit+0x7c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d127      	bne.n	800187a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_SPI_MspInit+0x80>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	4a16      	ldr	r2, [pc, #88]	; (8001888 <HAL_SPI_MspInit+0x80>)
 8001830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001834:	6593      	str	r3, [r2, #88]	; 0x58
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_SPI_MspInit+0x80>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_SPI_MspInit+0x80>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_SPI_MspInit+0x80>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_SPI_MspInit+0x80>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800185a:	2338      	movs	r3, #56	; 0x38
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800186a:	2306      	movs	r3, #6
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_SPI_MspInit+0x84>)
 8001876:	f000 faf5 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	; 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40003c00 	.word	0x40003c00
 8001888:	40021000 	.word	0x40021000
 800188c:	48000400 	.word	0x48000400

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b09e      	sub	sp, #120	; 0x78
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	2254      	movs	r2, #84	; 0x54
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f006 f935 	bl	8007b20 <memset>
  if(huart->Instance==USART1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <HAL_UART_MspInit+0xa8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d137      	bne.n	8001930 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4618      	mov	r0, r3
 80018ce:	f001 fb19 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018d8:	f7ff ff68 	bl	80017ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018dc:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_UART_MspInit+0xac>)
 80018de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e0:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_UART_MspInit+0xac>)
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e6:	6613      	str	r3, [r2, #96]	; 0x60
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_UART_MspInit+0xac>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_UART_MspInit+0xac>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <HAL_UART_MspInit+0xac>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_UART_MspInit+0xac>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800190c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001910:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800191e:	2307      	movs	r3, #7
 8001920:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001922:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192c:	f000 fa9a 	bl	8001e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001930:	bf00      	nop
 8001932:	3778      	adds	r7, #120	; 0x78
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40013800 	.word	0x40013800
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	2019      	movs	r0, #25
 8001956:	f000 fa5b 	bl	8001e10 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800195a:	2019      	movs	r0, #25
 800195c:	f000 fa74 	bl	8001e48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_InitTick+0x9c>)
 8001962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001964:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_InitTick+0x9c>)
 8001966:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800196a:	6613      	str	r3, [r2, #96]	; 0x60
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_InitTick+0x9c>)
 800196e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001978:	f107 0210 	add.w	r2, r7, #16
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fa2c 	bl	8002de0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001988:	f001 fa14 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 800198c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_InitTick+0xa0>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	0c9b      	lsrs	r3, r3, #18
 8001998:	3b01      	subs	r3, #1
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <HAL_InitTick+0xa4>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <HAL_InitTick+0xa8>)
 80019a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_InitTick+0xa4>)
 80019a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <HAL_InitTick+0xa4>)
 80019ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_InitTick+0xa4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_InitTick+0xa4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019bc:	4809      	ldr	r0, [pc, #36]	; (80019e4 <HAL_InitTick+0xa4>)
 80019be:	f002 fc99 	bl	80042f4 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d104      	bne.n	80019d2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019c8:	4806      	ldr	r0, [pc, #24]	; (80019e4 <HAL_InitTick+0xa4>)
 80019ca:	f002 fcf5 	bl	80043b8 <HAL_TIM_Base_Start_IT>
 80019ce:	4603      	mov	r3, r0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3730      	adds	r7, #48	; 0x30
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	431bde83 	.word	0x431bde83
 80019e4:	20000758 	.word	0x20000758
 80019e8:	40012c00 	.word	0x40012c00

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <NMI_Handler+0x4>

080019f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <MemManage_Handler+0x4>

080019fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a1e:	f002 fd1f 	bl	8004460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000758 	.word	0x20000758

08001a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
	return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_kill>:

int _kill(int pid, int sig)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a46:	f005 ff31 	bl	80078ac <__errno>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2216      	movs	r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_exit>:

void _exit (int status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ffe7 	bl	8001a3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a6e:	e7fe      	b.n	8001a6e <_exit+0x12>

08001a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e00a      	b.n	8001a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a82:	f3af 8000 	nop.w
 8001a86:	4601      	mov	r1, r0
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	b2ca      	uxtb	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dbf0      	blt.n	8001a82 <_read+0x12>
	}

return len;
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e009      	b.n	8001ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf1      	blt.n	8001abc <_write+0x12>
	}
	return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_close>:

int _close(int file)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_isatty>:

int _isatty(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
	return 1;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f005 fe96 	bl	80078ac <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20010000 	.word	0x20010000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	200007a4 	.word	0x200007a4
 8001bb4:	20003020 	.word	0x20003020

08001bb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SystemInit+0x20>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <SystemInit+0x20>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be0:	f7ff ffea 	bl	8001bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	; (8001c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <LoopForever+0xe>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	; (8001c28 <LoopForever+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f005 ff4b 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0e:	f7ff fa41 	bl	8001094 <main>

08001c12 <LoopForever>:

LoopForever:
    b LoopForever
 8001c12:	e7fe      	b.n	8001c12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c20:	0800ade8 	.word	0x0800ade8
  ldr r2, =_sbss
 8001c24:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c28:	20003020 	.word	0x20003020

08001c2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_IRQHandler>

08001c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f8de 	bl	8001dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f7ff fe7e 	bl	8001940 <HAL_InitTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	e001      	b.n	8001c54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c50:	f7ff fdb2 	bl	80017b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c54:	79fb      	ldrb	r3, [r7, #7]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000008 	.word	0x20000008
 8001c84:	200007a8 	.word	0x200007a8

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	200007a8 	.word	0x200007a8

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4907      	ldr	r1, [pc, #28]	; (8001d3c <__NVIC_EnableIRQ+0x38>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff4c 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e22:	f7ff ff61 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	f7ff ffb1 	bl	8001d94 <NVIC_EncodePriority>
 8001e32:	4602      	mov	r2, r0
 8001e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff80 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff54 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e148      	b.n	8002106 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	4013      	ands	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 813a 	beq.w	8002100 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d005      	beq.n	8001ea4 <HAL_GPIO_Init+0x40>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d130      	bne.n	8001f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eda:	2201      	movs	r2, #1
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	f003 0201 	and.w	r2, r3, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d017      	beq.n	8001f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d123      	bne.n	8001f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	220f      	movs	r2, #15
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	6939      	ldr	r1, [r7, #16]
 8001f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0203 	and.w	r2, r3, #3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8094 	beq.w	8002100 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd8:	4b52      	ldr	r3, [pc, #328]	; (8002124 <HAL_GPIO_Init+0x2c0>)
 8001fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fdc:	4a51      	ldr	r2, [pc, #324]	; (8002124 <HAL_GPIO_Init+0x2c0>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe4:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x2c0>)
 8001fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ff0:	4a4d      	ldr	r2, [pc, #308]	; (8002128 <HAL_GPIO_Init+0x2c4>)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	3302      	adds	r3, #2
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	220f      	movs	r2, #15
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800201a:	d00d      	beq.n	8002038 <HAL_GPIO_Init+0x1d4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a43      	ldr	r2, [pc, #268]	; (800212c <HAL_GPIO_Init+0x2c8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <HAL_GPIO_Init+0x1d0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_GPIO_Init+0x2cc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_GPIO_Init+0x1cc>
 800202c:	2302      	movs	r3, #2
 800202e:	e004      	b.n	800203a <HAL_GPIO_Init+0x1d6>
 8002030:	2307      	movs	r3, #7
 8002032:	e002      	b.n	800203a <HAL_GPIO_Init+0x1d6>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_GPIO_Init+0x1d6>
 8002038:	2300      	movs	r3, #0
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	f002 0203 	and.w	r2, r2, #3
 8002040:	0092      	lsls	r2, r2, #2
 8002042:	4093      	lsls	r3, r2
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800204a:	4937      	ldr	r1, [pc, #220]	; (8002128 <HAL_GPIO_Init+0x2c4>)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800207c:	4a2d      	ldr	r2, [pc, #180]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002082:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020a6:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d0:	4a18      	ldr	r2, [pc, #96]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	f47f aeaf 	bne.w	8001e74 <HAL_GPIO_Init+0x10>
  }
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000
 8002128:	40010000 	.word	0x40010000
 800212c:	48000400 	.word	0x48000400
 8002130:	48000800 	.word	0x48000800
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002154:	e002      	b.n	800215c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <HAL_PWREx_GetVoltageRange+0x18>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007000 	.word	0x40007000

08002184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002192:	d130      	bne.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800219c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a0:	d038      	beq.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2232      	movs	r2, #50	; 0x32
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9b      	lsrs	r3, r3, #18
 80021c4:	3301      	adds	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c8:	e002      	b.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021dc:	d102      	bne.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f2      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f0:	d110      	bne.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e00f      	b.n	8002216 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002202:	d007      	beq.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002212:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40007000 	.word	0x40007000
 8002228:	20000000 	.word	0x20000000
 800222c:	431bde83 	.word	0x431bde83

08002230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f000 bc02 	b.w	8002a48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002244:	4b96      	ldr	r3, [pc, #600]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224e:	4b94      	ldr	r3, [pc, #592]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80e4 	beq.w	800242e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_RCC_OscConfig+0x4c>
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	f040 808b 	bne.w	800238a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b01      	cmp	r3, #1
 8002278:	f040 8087 	bne.w	800238a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800227c:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x64>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e3d9      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1a      	ldr	r2, [r3, #32]
 8002298:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <HAL_RCC_OscConfig+0x7e>
 80022a4:	4b7e      	ldr	r3, [pc, #504]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ac:	e005      	b.n	80022ba <HAL_RCC_OscConfig+0x8a>
 80022ae:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d223      	bcs.n	8002306 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fdbe 	bl	8002e44 <RCC_SetFlashLatencyFromMSIRange>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e3ba      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d2:	4b73      	ldr	r3, [pc, #460]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a72      	ldr	r2, [pc, #456]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b70      	ldr	r3, [pc, #448]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	496d      	ldr	r1, [pc, #436]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f0:	4b6b      	ldr	r3, [pc, #428]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	4968      	ldr	r1, [pc, #416]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
 8002304:	e025      	b.n	8002352 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002306:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a65      	ldr	r2, [pc, #404]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4960      	ldr	r1, [pc, #384]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002324:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	495b      	ldr	r1, [pc, #364]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fd7e 	bl	8002e44 <RCC_SetFlashLatencyFromMSIRange>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e37a      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002352:	f000 fc81 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	4950      	ldr	r1, [pc, #320]	; (80024a4 <HAL_RCC_OscConfig+0x274>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a4e      	ldr	r2, [pc, #312]	; (80024a8 <HAL_RCC_OscConfig+0x278>)
 8002370:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002372:	4b4e      	ldr	r3, [pc, #312]	; (80024ac <HAL_RCC_OscConfig+0x27c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fae2 	bl	8001940 <HAL_InitTick>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d052      	beq.n	800242c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	e35e      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d032      	beq.n	80023f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a42      	ldr	r2, [pc, #264]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800239e:	f7ff fc73 	bl	8001c88 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a6:	f7ff fc6f 	bl	8001c88 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e347      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b8:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c4:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a35      	ldr	r2, [pc, #212]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023ca:	f043 0308 	orr.w	r3, r3, #8
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4930      	ldr	r1, [pc, #192]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e2:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	492b      	ldr	r1, [pc, #172]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
 80023f6:	e01a      	b.n	800242e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002404:	f7ff fc40 	bl	8001c88 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240c:	f7ff fc3c 	bl	8001c88 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e314      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x1dc>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d073      	beq.n	8002522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d005      	beq.n	800244c <HAL_RCC_OscConfig+0x21c>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d10e      	bne.n	8002464 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d10b      	bne.n	8002464 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d063      	beq.n	8002520 <HAL_RCC_OscConfig+0x2f0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d15f      	bne.n	8002520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e2f1      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x24c>
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e025      	b.n	80024c8 <HAL_RCC_OscConfig+0x298>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002484:	d114      	bne.n	80024b0 <HAL_RCC_OscConfig+0x280>
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a02      	ldr	r2, [pc, #8]	; (80024a0 <HAL_RCC_OscConfig+0x270>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e013      	b.n	80024c8 <HAL_RCC_OscConfig+0x298>
 80024a0:	40021000 	.word	0x40021000
 80024a4:	0800a960 	.word	0x0800a960
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004
 80024b0:	4ba0      	ldr	r3, [pc, #640]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a9f      	ldr	r2, [pc, #636]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b9d      	ldr	r3, [pc, #628]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a9c      	ldr	r2, [pc, #624]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff fbda 	bl	8001c88 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff fbd6 	bl	8001c88 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e2ae      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ea:	4b92      	ldr	r3, [pc, #584]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x2a8>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff fbc6 	bl	8001c88 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fbc2 	bl	8001c88 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e29a      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002512:	4b88      	ldr	r3, [pc, #544]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x2d0>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d060      	beq.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b04      	cmp	r3, #4
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x310>
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b0c      	cmp	r3, #12
 8002538:	d119      	bne.n	800256e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d116      	bne.n	800256e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002540:	4b7c      	ldr	r3, [pc, #496]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x328>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e277      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b76      	ldr	r3, [pc, #472]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	4973      	ldr	r1, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256c:	e040      	b.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d023      	beq.n	80025be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002576:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a6e      	ldr	r2, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7ff fb81 	bl	8001c88 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258a:	f7ff fb7d 	bl	8001c88 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e255      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800259c:	4b65      	ldr	r3, [pc, #404]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	495f      	ldr	r1, [pc, #380]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e018      	b.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b5d      	ldr	r3, [pc, #372]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a5c      	ldr	r2, [pc, #368]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7ff fb5d 	bl	8001c88 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff fb59 	bl	8001c88 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e231      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d03c      	beq.n	8002676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01c      	beq.n	800263e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002604:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260a:	4a4a      	ldr	r2, [pc, #296]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7ff fb38 	bl	8001c88 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7ff fb34 	bl	8001c88 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e20c      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ef      	beq.n	800261c <HAL_RCC_OscConfig+0x3ec>
 800263c:	e01b      	b.n	8002676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002644:	4a3b      	ldr	r2, [pc, #236]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002646:	f023 0301 	bic.w	r3, r3, #1
 800264a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7ff fb1b 	bl	8001c88 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff fb17 	bl	8001c88 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e1ef      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ef      	bne.n	8002656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80a6 	beq.w	80027d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002688:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	4a26      	ldr	r2, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6593      	str	r3, [r2, #88]	; 0x58
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCC_OscConfig+0x508>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d118      	bne.n	80026ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_RCC_OscConfig+0x508>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_RCC_OscConfig+0x508>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c8:	f7ff fade 	bl	8001c88 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d0:	f7ff fada 	bl	8001c88 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1b2      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_RCC_OscConfig+0x508>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d108      	bne.n	8002708 <HAL_RCC_OscConfig+0x4d8>
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002706:	e029      	b.n	800275c <HAL_RCC_OscConfig+0x52c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b05      	cmp	r3, #5
 800270e:	d115      	bne.n	800273c <HAL_RCC_OscConfig+0x50c>
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a03      	ldr	r2, [pc, #12]	; (8002734 <HAL_RCC_OscConfig+0x504>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x52c>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
 800273c:	4b9a      	ldr	r3, [pc, #616]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a99      	ldr	r2, [pc, #612]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800274c:	4b96      	ldr	r3, [pc, #600]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a95      	ldr	r2, [pc, #596]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d016      	beq.n	8002792 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7ff fa90 	bl	8001c88 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7ff fa8c 	bl	8001c88 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e162      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	4b89      	ldr	r3, [pc, #548]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ed      	beq.n	800276c <HAL_RCC_OscConfig+0x53c>
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002792:	f7ff fa79 	bl	8001c88 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7ff fa75 	bl	8001c88 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e14b      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b0:	4b7d      	ldr	r3, [pc, #500]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ed      	bne.n	800279a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027be:	7ffb      	ldrb	r3, [r7, #31]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c4:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d03c      	beq.n	8002856 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01c      	beq.n	800281e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027e4:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ea:	4a6f      	ldr	r2, [pc, #444]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7ff fa48 	bl	8001c88 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027fc:	f7ff fa44 	bl	8001c88 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e11c      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800280e:	4b66      	ldr	r3, [pc, #408]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ef      	beq.n	80027fc <HAL_RCC_OscConfig+0x5cc>
 800281c:	e01b      	b.n	8002856 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800281e:	4b62      	ldr	r3, [pc, #392]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002824:	4a60      	ldr	r2, [pc, #384]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7ff fa2b 	bl	8001c88 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002836:	f7ff fa27 	bl	8001c88 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0ff      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002848:	4b57      	ldr	r3, [pc, #348]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800284a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ef      	bne.n	8002836 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80f3 	beq.w	8002a46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2b02      	cmp	r3, #2
 8002866:	f040 80c9 	bne.w	80029fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800286a:	4b4f      	ldr	r3, [pc, #316]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 0203 	and.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	429a      	cmp	r2, r3
 800287c:	d12c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	3b01      	subs	r3, #1
 800288a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d123      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d11b      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d113      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d109      	bne.n	80028d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	3b01      	subs	r3, #1
 80028d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d06b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d062      	beq.n	80029a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028de:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0ac      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2d      	ldr	r2, [pc, #180]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 80028f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028fa:	f7ff f9c5 	bl	8001c88 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7ff f9c1 	bl	8001c88 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e099      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_RCC_OscConfig+0x77c>)
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002930:	3a01      	subs	r2, #1
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800293a:	0212      	lsls	r2, r2, #8
 800293c:	4311      	orrs	r1, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002942:	0852      	lsrs	r2, r2, #1
 8002944:	3a01      	subs	r2, #1
 8002946:	0552      	lsls	r2, r2, #21
 8002948:	4311      	orrs	r1, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800294e:	0852      	lsrs	r2, r2, #1
 8002950:	3a01      	subs	r2, #1
 8002952:	0652      	lsls	r2, r2, #25
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800295a:	06d2      	lsls	r2, r2, #27
 800295c:	430a      	orrs	r2, r1
 800295e:	4912      	ldr	r1, [pc, #72]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800297c:	f7ff f984 	bl	8001c88 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002984:	f7ff f980 	bl	8001c88 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e058      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_RCC_OscConfig+0x778>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a2:	e050      	b.n	8002a46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04f      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d144      	bne.n	8002a46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029d4:	f7ff f958 	bl	8001c88 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7ff f954 	bl	8001c88 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e02c      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x7ac>
 80029fa:	e024      	b.n	8002a46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d01f      	beq.n	8002a42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7ff f93b 	bl	8001c88 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff f937 	bl	8001c88 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e00f      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	4905      	ldr	r1, [pc, #20]	; (8002a50 <HAL_RCC_OscConfig+0x820>)
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_OscConfig+0x824>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60cb      	str	r3, [r1, #12]
 8002a40:	e001      	b.n	8002a46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	feeefffc 	.word	0xfeeefffc

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0e7      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4970      	ldr	r1, [pc, #448]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0cf      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d010      	beq.n	8002aca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d908      	bls.n	8002aca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4960      	ldr	r1, [pc, #384]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d04c      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d121      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0a6      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af6:	4b54      	ldr	r3, [pc, #336]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e09a      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e08e      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e086      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4943      	ldr	r1, [pc, #268]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b40:	f7ff f8a2 	bl	8001c88 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff f89e 	bl	8001c88 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e06e      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d208      	bcs.n	8002b9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	492b      	ldr	r1, [pc, #172]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9e:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d210      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 0207 	bic.w	r2, r3, #7
 8002bb4:	4923      	ldr	r1, [pc, #140]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <HAL_RCC_ClockConfig+0x1ec>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e036      	b.n	8002c3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bda:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4918      	ldr	r1, [pc, #96]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf8:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4910      	ldr	r1, [pc, #64]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0c:	f000 f824 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	490b      	ldr	r1, [pc, #44]	; (8002c4c <HAL_RCC_ClockConfig+0x1f4>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1f8>)
 8002c2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1fc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fe85 	bl	8001940 <HAL_InitTick>
 8002c36:	4603      	mov	r3, r0
 8002c38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	0800a960 	.word	0x0800a960
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c66:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d11e      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e004      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d134      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d003      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0xac>
 8002cfc:	e005      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d00:	617b      	str	r3, [r7, #20]
      break;
 8002d02:	e005      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d06:	617b      	str	r3, [r7, #20]
      break;
 8002d08:	e002      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	617b      	str	r3, [r7, #20]
      break;
 8002d0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	fb03 f202 	mul.w	r2, r3, r2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	0e5b      	lsrs	r3, r3, #25
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	3301      	adds	r3, #1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d50:	69bb      	ldr	r3, [r7, #24]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	0800a978 	.word	0x0800a978
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4904      	ldr	r1, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	0800a970 	.word	0x0800a970

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db8:	f7ff ffda 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0adb      	lsrs	r3, r3, #11
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4904      	ldr	r1, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	0800a970 	.word	0x0800a970

08002de0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	220f      	movs	r2, #15
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002dfc:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002e14:	4b09      	ldr	r3, [pc, #36]	; (8002e3c <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCC_GetClockConfig+0x60>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0207 	and.w	r2, r3, #7
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40022000 	.word	0x40022000

08002e44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e50:	4b2a      	ldr	r3, [pc, #168]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e5c:	f7ff f984 	bl	8002168 <HAL_PWREx_GetVoltageRange>
 8002e60:	6178      	str	r0, [r7, #20]
 8002e62:	e014      	b.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a24      	ldr	r2, [pc, #144]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e70:	4b22      	ldr	r3, [pc, #136]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e7c:	f7ff f974 	bl	8002168 <HAL_PWREx_GetVoltageRange>
 8002e80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	4a1d      	ldr	r2, [pc, #116]	; (8002efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e94:	d10b      	bne.n	8002eae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b80      	cmp	r3, #128	; 0x80
 8002e9a:	d919      	bls.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2ba0      	cmp	r3, #160	; 0xa0
 8002ea0:	d902      	bls.n	8002ea8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e013      	b.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	e010      	b.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d902      	bls.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	e00a      	b.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d102      	bne.n	8002ec6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	e004      	b.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b70      	cmp	r3, #112	; 0x70
 8002eca:	d101      	bne.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ecc:	2301      	movs	r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 0207 	bic.w	r2, r3, #7
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d001      	beq.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40022000 	.word	0x40022000

08002f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f10:	2300      	movs	r3, #0
 8002f12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d031      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f28:	d01a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f2e:	d814      	bhi.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d009      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f38:	d10f      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4a5c      	ldr	r2, [pc, #368]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f46:	e00c      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f9ce 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f58:	e003      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f5e:	e000      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f68:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f76:	494e      	ldr	r1, [pc, #312]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f7e:	e001      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	7cfb      	ldrb	r3, [r7, #19]
 8002f82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 809e 	beq.w	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f96:	4b46      	ldr	r3, [pc, #280]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fac:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	4a3f      	ldr	r2, [pc, #252]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a39      	ldr	r2, [pc, #228]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd4:	f7fe fe58 	bl	8001c88 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fda:	e009      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fdc:	f7fe fe54 	bl	8001c88 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d902      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	74fb      	strb	r3, [r7, #19]
        break;
 8002fee:	e005      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ff0:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ef      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d15a      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01e      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	429a      	cmp	r2, r3
 800301c:	d019      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800301e:	4b24      	ldr	r3, [pc, #144]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003028:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800302a:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800304a:	4a19      	ldr	r2, [pc, #100]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d016      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe fe14 	bl	8001c88 <HAL_GetTick>
 8003060:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003062:	e00b      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe fe10 	bl	8001c88 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d902      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	74fb      	strb	r3, [r7, #19]
            break;
 800307a:	e006      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0ec      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309e:	4904      	ldr	r1, [pc, #16]	; (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030a6:	e009      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	74bb      	strb	r3, [r7, #18]
 80030ac:	e006      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030bc:	7c7b      	ldrb	r3, [r7, #17]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b8a      	ldr	r3, [pc, #552]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	4a89      	ldr	r2, [pc, #548]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030da:	4b84      	ldr	r3, [pc, #528]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f023 0203 	bic.w	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4980      	ldr	r1, [pc, #512]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030fc:	4b7b      	ldr	r3, [pc, #492]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f023 020c 	bic.w	r2, r3, #12
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	4978      	ldr	r1, [pc, #480]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800311e:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	496f      	ldr	r1, [pc, #444]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003140:	4b6a      	ldr	r3, [pc, #424]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	4967      	ldr	r1, [pc, #412]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003162:	4b62      	ldr	r3, [pc, #392]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	495e      	ldr	r1, [pc, #376]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003184:	4b59      	ldr	r3, [pc, #356]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	4956      	ldr	r1, [pc, #344]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031a6:	4b51      	ldr	r3, [pc, #324]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	494d      	ldr	r1, [pc, #308]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d028      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c8:	4b48      	ldr	r3, [pc, #288]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4945      	ldr	r1, [pc, #276]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e6:	d106      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e8:	4b40      	ldr	r3, [pc, #256]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a3f      	ldr	r2, [pc, #252]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f2:	60d3      	str	r3, [r2, #12]
 80031f4:	e011      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031fe:	d10c      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f872 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d028      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003226:	4b31      	ldr	r3, [pc, #196]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	492d      	ldr	r1, [pc, #180]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003244:	d106      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800324c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003250:	60d3      	str	r3, [r2, #12]
 8003252:	e011      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800325c:	d10c      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2101      	movs	r1, #1
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f843 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01c      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003292:	4916      	ldr	r1, [pc, #88]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032a2:	d10c      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	2102      	movs	r1, #2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f820 	bl	80032f0 <RCCEx_PLLSAI1_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d8:	4904      	ldr	r1, [pc, #16]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000

080032f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032fe:	4b74      	ldr	r3, [pc, #464]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800330a:	4b71      	ldr	r3, [pc, #452]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0203 	and.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d10d      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
       ||
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003322:	4b6b      	ldr	r3, [pc, #428]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
       ||
 8003332:	429a      	cmp	r2, r3
 8003334:	d047      	beq.n	80033c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	e044      	b.n	80033c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d018      	beq.n	8003376 <RCCEx_PLLSAI1_Config+0x86>
 8003344:	2b03      	cmp	r3, #3
 8003346:	d825      	bhi.n	8003394 <RCCEx_PLLSAI1_Config+0xa4>
 8003348:	2b01      	cmp	r3, #1
 800334a:	d002      	beq.n	8003352 <RCCEx_PLLSAI1_Config+0x62>
 800334c:	2b02      	cmp	r3, #2
 800334e:	d009      	beq.n	8003364 <RCCEx_PLLSAI1_Config+0x74>
 8003350:	e020      	b.n	8003394 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003352:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d11d      	bne.n	800339a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003362:	e01a      	b.n	800339a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003364:	4b5a      	ldr	r3, [pc, #360]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d116      	bne.n	800339e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003374:	e013      	b.n	800339e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003376:	4b56      	ldr	r3, [pc, #344]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003382:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003392:	e006      	b.n	80033a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      break;
 8003398:	e004      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10d      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033aa:	4b49      	ldr	r3, [pc, #292]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	430b      	orrs	r3, r1
 80033c0:	4943      	ldr	r1, [pc, #268]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d17c      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033cc:	4b40      	ldr	r3, [pc, #256]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3f      	ldr	r2, [pc, #252]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d8:	f7fe fc56 	bl	8001c88 <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033de:	e009      	b.n	80033f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e0:	f7fe fc52 	bl	8001c88 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	73fb      	strb	r3, [r7, #15]
        break;
 80033f2:	e005      	b.n	8003400 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f4:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ef      	bne.n	80033e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d15f      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d110      	bne.n	800342e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800340c:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6892      	ldr	r2, [r2, #8]
 800341c:	0211      	lsls	r1, r2, #8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68d2      	ldr	r2, [r2, #12]
 8003422:	06d2      	lsls	r2, r2, #27
 8003424:	430a      	orrs	r2, r1
 8003426:	492a      	ldr	r1, [pc, #168]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	610b      	str	r3, [r1, #16]
 800342c:	e027      	b.n	800347e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d112      	bne.n	800345a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003434:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800343c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6892      	ldr	r2, [r2, #8]
 8003444:	0211      	lsls	r1, r2, #8
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6912      	ldr	r2, [r2, #16]
 800344a:	0852      	lsrs	r2, r2, #1
 800344c:	3a01      	subs	r2, #1
 800344e:	0552      	lsls	r2, r2, #21
 8003450:	430a      	orrs	r2, r1
 8003452:	491f      	ldr	r1, [pc, #124]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003454:	4313      	orrs	r3, r2
 8003456:	610b      	str	r3, [r1, #16]
 8003458:	e011      	b.n	800347e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6892      	ldr	r2, [r2, #8]
 800346a:	0211      	lsls	r1, r2, #8
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6952      	ldr	r2, [r2, #20]
 8003470:	0852      	lsrs	r2, r2, #1
 8003472:	3a01      	subs	r2, #1
 8003474:	0652      	lsls	r2, r2, #25
 8003476:	430a      	orrs	r2, r1
 8003478:	4915      	ldr	r1, [pc, #84]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800347a:	4313      	orrs	r3, r2
 800347c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003488:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fe fbfd 	bl	8001c88 <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003490:	e009      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003492:	f7fe fbf9 	bl	8001c88 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d902      	bls.n	80034a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	73fb      	strb	r3, [r7, #15]
          break;
 80034a4:	e005      	b.n	80034b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ef      	beq.n	8003492 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	4903      	ldr	r1, [pc, #12]	; (80034d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000

080034d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e095      	b.n	8003612 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d108      	bne.n	8003500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034f6:	d009      	beq.n	800350c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	61da      	str	r2, [r3, #28]
 80034fe:	e005      	b.n	800350c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe f96e 	bl	8001808 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003542:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800354c:	d902      	bls.n	8003554 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e002      	b.n	800355a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003558:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003562:	d007      	beq.n	8003574 <HAL_SPI_Init+0xa0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800356c:	d002      	beq.n	8003574 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	ea42 0103 	orr.w	r1, r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	f003 0204 	and.w	r2, r3, #4
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035f0:	ea42 0103 	orr.w	r1, r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b088      	sub	sp, #32
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_SPI_Transmit+0x22>
 8003638:	2302      	movs	r3, #2
 800363a:	e158      	b.n	80038ee <HAL_SPI_Transmit+0x2d4>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003644:	f7fe fb20 	bl	8001c88 <HAL_GetTick>
 8003648:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b01      	cmp	r3, #1
 8003658:	d002      	beq.n	8003660 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800365e:	e13d      	b.n	80038dc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <HAL_SPI_Transmit+0x52>
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003670:	e134      	b.n	80038dc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036bc:	d10f      	bne.n	80036de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d007      	beq.n	80036fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003704:	d94b      	bls.n	800379e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_SPI_Transmit+0xfa>
 800370e:	8afb      	ldrh	r3, [r7, #22]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d13e      	bne.n	8003792 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003738:	e02b      	b.n	8003792 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d112      	bne.n	800376e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	1c9a      	adds	r2, r3, #2
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800376c:	e011      	b.n	8003792 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800376e:	f7fe fa8b 	bl	8001c88 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d803      	bhi.n	8003786 <HAL_SPI_Transmit+0x16c>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d102      	bne.n	800378c <HAL_SPI_Transmit+0x172>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003790:	e0a4      	b.n	80038dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ce      	bne.n	800373a <HAL_SPI_Transmit+0x120>
 800379c:	e07c      	b.n	8003898 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_SPI_Transmit+0x192>
 80037a6:	8afb      	ldrh	r3, [r7, #22]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d170      	bne.n	800388e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d912      	bls.n	80037dc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	881a      	ldrh	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	1c9a      	adds	r2, r3, #2
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b02      	subs	r3, #2
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037da:	e058      	b.n	800388e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	7812      	ldrb	r2, [r2, #0]
 80037e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003802:	e044      	b.n	800388e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d12b      	bne.n	800386a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d912      	bls.n	8003842 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b02      	subs	r3, #2
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003840:	e025      	b.n	800388e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003868:	e011      	b.n	800388e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800386a:	f7fe fa0d 	bl	8001c88 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d803      	bhi.n	8003882 <HAL_SPI_Transmit+0x268>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d102      	bne.n	8003888 <HAL_SPI_Transmit+0x26e>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d102      	bne.n	800388e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800388c:	e026      	b.n	80038dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1b5      	bne.n	8003804 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	6839      	ldr	r1, [r7, #0]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fce3 	bl	8004268 <SPI_EndRxTxTransaction>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e000      	b.n	80038dc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80038da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b088      	sub	sp, #32
 80038fa:	af02      	add	r7, sp, #8
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003912:	d112      	bne.n	800393a <HAL_SPI_Receive+0x44>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10e      	bne.n	800393a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2204      	movs	r2, #4
 8003920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f910 	bl	8003b56 <HAL_SPI_TransmitReceive>
 8003936:	4603      	mov	r3, r0
 8003938:	e109      	b.n	8003b4e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_SPI_Receive+0x52>
 8003944:	2302      	movs	r3, #2
 8003946:	e102      	b.n	8003b4e <HAL_SPI_Receive+0x258>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003950:	f7fe f99a 	bl	8001c88 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d002      	beq.n	8003968 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003966:	e0e9      	b.n	8003b3c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_SPI_Receive+0x7e>
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003978:	e0e0      	b.n	8003b3c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2204      	movs	r2, #4
 800397e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c4:	d908      	bls.n	80039d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e007      	b.n	80039e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f0:	d10f      	bne.n	8003a12 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d007      	beq.n	8003a30 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a38:	d867      	bhi.n	8003b0a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a3a:	e030      	b.n	8003a9e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d117      	bne.n	8003a7a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f103 020c 	add.w	r2, r3, #12
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	7812      	ldrb	r2, [r2, #0]
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a78:	e011      	b.n	8003a9e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a7a:	f7fe f905 	bl	8001c88 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d803      	bhi.n	8003a92 <HAL_SPI_Receive+0x19c>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_Receive+0x1a2>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a9c:	e04e      	b.n	8003b3c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1c8      	bne.n	8003a3c <HAL_SPI_Receive+0x146>
 8003aaa:	e034      	b.n	8003b16 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d115      	bne.n	8003ae6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	b292      	uxth	r2, r2
 8003ac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ae4:	e011      	b.n	8003b0a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae6:	f7fe f8cf 	bl	8001c88 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d803      	bhi.n	8003afe <HAL_SPI_Receive+0x208>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d102      	bne.n	8003b04 <HAL_SPI_Receive+0x20e>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d102      	bne.n	8003b0a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b08:	e018      	b.n	8003b3c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ca      	bne.n	8003aac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fb4c 	bl	80041b8 <SPI_EndRxTransaction>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
 8003b38:	e000      	b.n	8003b3c <HAL_SPI_Receive+0x246>
  }

error :
 8003b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b08a      	sub	sp, #40	; 0x28
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b64:	2301      	movs	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_SPI_TransmitReceive+0x26>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e1fb      	b.n	8003f74 <HAL_SPI_TransmitReceive+0x41e>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b84:	f7fe f880 	bl	8001c88 <HAL_GetTick>
 8003b88:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b90:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b9c:	887b      	ldrh	r3, [r7, #2]
 8003b9e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ba0:	7efb      	ldrb	r3, [r7, #27]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x6e>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bac:	d106      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x66>
 8003bb6:	7efb      	ldrb	r3, [r7, #27]
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d003      	beq.n	8003bc4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bc2:	e1cd      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_SPI_TransmitReceive+0x80>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_TransmitReceive+0x80>
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d103      	bne.n	8003bde <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bdc:	e1c0      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d003      	beq.n	8003bf2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2205      	movs	r2, #5
 8003bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	887a      	ldrh	r2, [r7, #2]
 8003c02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	887a      	ldrh	r2, [r7, #2]
 8003c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	887a      	ldrh	r2, [r7, #2]
 8003c1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c34:	d802      	bhi.n	8003c3c <HAL_SPI_TransmitReceive+0xe6>
 8003c36:	8a3b      	ldrh	r3, [r7, #16]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d908      	bls.n	8003c4e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	e007      	b.n	8003c5e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c5c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d007      	beq.n	8003c7c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c84:	d97c      	bls.n	8003d80 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x13e>
 8003c8e:	8a7b      	ldrh	r3, [r7, #18]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d169      	bne.n	8003d68 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	1c9a      	adds	r2, r3, #2
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb8:	e056      	b.n	8003d68 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d11b      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x1aa>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x1aa>
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d113      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11c      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x1f2>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	b292      	uxth	r2, r2
 8003d26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	1c9a      	adds	r2, r3, #2
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d44:	2301      	movs	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d48:	f7fd ff9e 	bl	8001c88 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d807      	bhi.n	8003d68 <HAL_SPI_TransmitReceive+0x212>
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d003      	beq.n	8003d68 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d66:	e0fb      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1a3      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x164>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d19d      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x164>
 8003d7e:	e0df      	b.n	8003f40 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0x23a>
 8003d88:	8a7b      	ldrh	r3, [r7, #18]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	f040 80cb 	bne.w	8003f26 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d912      	bls.n	8003dc0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	881a      	ldrh	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	1c9a      	adds	r2, r3, #2
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b02      	subs	r3, #2
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dbe:	e0b2      	b.n	8003f26 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de6:	e09e      	b.n	8003f26 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d134      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x30a>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02f      	beq.n	8003e60 <HAL_SPI_TransmitReceive+0x30a>
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d12c      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d912      	bls.n	8003e36 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	1c9a      	adds	r2, r3, #2
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b02      	subs	r3, #2
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e34:	e012      	b.n	8003e5c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d148      	bne.n	8003f00 <HAL_SPI_TransmitReceive+0x3aa>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d042      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d923      	bls.n	8003ece <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	b292      	uxth	r2, r2
 8003e92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b02      	subs	r3, #2
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d81f      	bhi.n	8003efc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e016      	b.n	8003efc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f103 020c 	add.w	r2, r3, #12
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003efc:	2301      	movs	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f00:	f7fd fec2 	bl	8001c88 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d803      	bhi.n	8003f18 <HAL_SPI_TransmitReceive+0x3c2>
 8003f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d102      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0x3c8>
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f24:	e01c      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f47f af5b 	bne.w	8003de8 <HAL_SPI_TransmitReceive+0x292>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f47f af54 	bne.w	8003de8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f98f 	bl	8004268 <SPI_EndRxTxTransaction>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	661a      	str	r2, [r3, #96]	; 0x60
 8003f5c:	e000      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f8c:	f7fd fe7c 	bl	8001c88 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	4413      	add	r3, r2
 8003f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f9c:	f7fd fe74 	bl	8001c88 <HAL_GetTick>
 8003fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fa2:	4b39      	ldr	r3, [pc, #228]	; (8004088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	015b      	lsls	r3, r3, #5
 8003fa8:	0d1b      	lsrs	r3, r3, #20
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	fb02 f303 	mul.w	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb2:	e054      	b.n	800405e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d050      	beq.n	800405e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fbc:	f7fd fe64 	bl	8001c88 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d902      	bls.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d13d      	bne.n	800404e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fea:	d111      	bne.n	8004010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff4:	d004      	beq.n	8004000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffe:	d107      	bne.n	8004010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004018:	d10f      	bne.n	800403a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e017      	b.n	800407e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	3b01      	subs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4013      	ands	r3, r2
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	bf0c      	ite	eq
 800406e:	2301      	moveq	r3, #1
 8004070:	2300      	movne	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	429a      	cmp	r2, r3
 800407a:	d19b      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000000 	.word	0x20000000

0800408c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800409e:	f7fd fdf3 	bl	8001c88 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	4413      	add	r3, r2
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80040ae:	f7fd fdeb 	bl	8001c88 <HAL_GetTick>
 80040b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040bc:	4b3d      	ldr	r3, [pc, #244]	; (80041b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	00da      	lsls	r2, r3, #3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	0d1b      	lsrs	r3, r3, #20
 80040cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040d4:	e060      	b.n	8004198 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040dc:	d107      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f4:	d050      	beq.n	8004198 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040f6:	f7fd fdc7 	bl	8001c88 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	429a      	cmp	r2, r3
 8004104:	d902      	bls.n	800410c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d13d      	bne.n	8004188 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800411a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004124:	d111      	bne.n	800414a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800412e:	d004      	beq.n	800413a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004138:	d107      	bne.n	800414a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004148:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	d10f      	bne.n	8004174 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004172:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e010      	b.n	80041aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	3b01      	subs	r3, #1
 8004196:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689a      	ldr	r2, [r3, #8]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d196      	bne.n	80040d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3728      	adds	r7, #40	; 0x28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000000 	.word	0x20000000

080041b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041cc:	d111      	bne.n	80041f2 <SPI_EndRxTransaction+0x3a>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d6:	d004      	beq.n	80041e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e0:	d107      	bne.n	80041f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2180      	movs	r1, #128	; 0x80
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7ff febd 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e023      	b.n	8004260 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004220:	d11d      	bne.n	800425e <SPI_EndRxTransaction+0xa6>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422a:	d004      	beq.n	8004236 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d113      	bne.n	800425e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff ff22 	bl	800408c <SPI_WaitFifoStateUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e000      	b.n	8004260 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2200      	movs	r2, #0
 800427c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff ff03 	bl	800408c <SPI_WaitFifoStateUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e027      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f7ff fe68 	bl	8003f7c <SPI_WaitFlagStateUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e014      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff fedc 	bl	800408c <SPI_WaitFifoStateUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e000      	b.n	80042ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e049      	b.n	800439a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f841 	bl	80043a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f000 f9dc 	bl	80046f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d001      	beq.n	80043d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e03b      	b.n	8004448 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_TIM_Base_Start_IT+0x9c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x4e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d004      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x4e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <HAL_TIM_Base_Start_IT+0xa0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d115      	bne.n	8004432 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	4b13      	ldr	r3, [pc, #76]	; (800445c <HAL_TIM_Base_Start_IT+0xa4>)
 800440e:	4013      	ands	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b06      	cmp	r3, #6
 8004416:	d015      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x8c>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d011      	beq.n	8004444 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004430:	e008      	b.n	8004444 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e000      	b.n	8004446 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004444:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40014000 	.word	0x40014000
 800445c:	00010007 	.word	0x00010007

08004460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d122      	bne.n	80044bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d11b      	bne.n	80044bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0202 	mvn.w	r2, #2
 800448c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f905 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 80044a8:	e005      	b.n	80044b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8f7 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f908 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0204 	mvn.w	r2, #4
 80044e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8db 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8cd 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8de 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b08      	cmp	r3, #8
 800451c:	d122      	bne.n	8004564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d11b      	bne.n	8004564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0208 	mvn.w	r2, #8
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2204      	movs	r2, #4
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f8b1 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8a3 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8b4 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b10      	cmp	r3, #16
 8004570:	d122      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b10      	cmp	r3, #16
 800457e:	d11b      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0210 	mvn.w	r2, #16
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2208      	movs	r2, #8
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f887 	bl	80046b2 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f879 	bl	800469e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f88a 	bl	80046c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10e      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0201 	mvn.w	r2, #1
 80045dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fd f8d2 	bl	8001788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d10e      	bne.n	8004610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	d107      	bne.n	8004610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f8de 	bl	80047cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461e:	d10e      	bne.n	800463e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b80      	cmp	r3, #128	; 0x80
 800462c:	d107      	bne.n	800463e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f8d1 	bl	80047e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d10e      	bne.n	800466a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004656:	2b40      	cmp	r3, #64	; 0x40
 8004658:	d107      	bne.n	800466a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f838 	bl	80046da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b20      	cmp	r3, #32
 8004676:	d10e      	bne.n	8004696 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b20      	cmp	r3, #32
 8004684:	d107      	bne.n	8004696 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f06f 0220 	mvn.w	r2, #32
 800468e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f891 	bl	80047b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a2a      	ldr	r2, [pc, #168]	; (80047ac <TIM_Base_SetConfig+0xbc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0x20>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470e:	d108      	bne.n	8004722 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a21      	ldr	r2, [pc, #132]	; (80047ac <TIM_Base_SetConfig+0xbc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00b      	beq.n	8004742 <TIM_Base_SetConfig+0x52>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d007      	beq.n	8004742 <TIM_Base_SetConfig+0x52>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <TIM_Base_SetConfig+0xc0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <TIM_Base_SetConfig+0x52>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <TIM_Base_SetConfig+0xc4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d108      	bne.n	8004754 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <TIM_Base_SetConfig+0xbc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d007      	beq.n	8004790 <TIM_Base_SetConfig+0xa0>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a0b      	ldr	r2, [pc, #44]	; (80047b0 <TIM_Base_SetConfig+0xc0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_Base_SetConfig+0xa0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <TIM_Base_SetConfig+0xc4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d103      	bne.n	8004798 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400

080047b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e040      	b.n	8004888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7fd f83a 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	; 0x24
 8004820:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f82c 	bl	8004890 <UART_SetConfig>
 8004838:	4603      	mov	r3, r0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e022      	b.n	8004888 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa4c 	bl	8004ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fad3 	bl	8004e2c <UART_CheckIdleState>
 8004886:	4603      	mov	r3, r0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004894:	b08a      	sub	sp, #40	; 0x28
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	4bb4      	ldr	r3, [pc, #720]	; (8004b90 <UART_SetConfig+0x300>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4aa9      	ldr	r2, [pc, #676]	; (8004b94 <UART_SetConfig+0x304>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f8:	4313      	orrs	r3, r2
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490c:	430a      	orrs	r2, r1
 800490e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4aa0      	ldr	r2, [pc, #640]	; (8004b98 <UART_SetConfig+0x308>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d126      	bne.n	8004968 <UART_SetConfig+0xd8>
 800491a:	4ba0      	ldr	r3, [pc, #640]	; (8004b9c <UART_SetConfig+0x30c>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	2b03      	cmp	r3, #3
 8004926:	d81b      	bhi.n	8004960 <UART_SetConfig+0xd0>
 8004928:	a201      	add	r2, pc, #4	; (adr r2, 8004930 <UART_SetConfig+0xa0>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004941 	.word	0x08004941
 8004934:	08004951 	.word	0x08004951
 8004938:	08004949 	.word	0x08004949
 800493c:	08004959 	.word	0x08004959
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004946:	e080      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004948:	2302      	movs	r3, #2
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494e:	e07c      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004950:	2304      	movs	r3, #4
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004956:	e078      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004958:	2308      	movs	r3, #8
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495e:	e074      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004960:	2310      	movs	r3, #16
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e070      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a8c      	ldr	r2, [pc, #560]	; (8004ba0 <UART_SetConfig+0x310>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d138      	bne.n	80049e4 <UART_SetConfig+0x154>
 8004972:	4b8a      	ldr	r3, [pc, #552]	; (8004b9c <UART_SetConfig+0x30c>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f003 030c 	and.w	r3, r3, #12
 800497c:	2b0c      	cmp	r3, #12
 800497e:	d82d      	bhi.n	80049dc <UART_SetConfig+0x14c>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <UART_SetConfig+0xf8>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	080049bd 	.word	0x080049bd
 800498c:	080049dd 	.word	0x080049dd
 8004990:	080049dd 	.word	0x080049dd
 8004994:	080049dd 	.word	0x080049dd
 8004998:	080049cd 	.word	0x080049cd
 800499c:	080049dd 	.word	0x080049dd
 80049a0:	080049dd 	.word	0x080049dd
 80049a4:	080049dd 	.word	0x080049dd
 80049a8:	080049c5 	.word	0x080049c5
 80049ac:	080049dd 	.word	0x080049dd
 80049b0:	080049dd 	.word	0x080049dd
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049d5 	.word	0x080049d5
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049c2:	e042      	b.n	8004a4a <UART_SetConfig+0x1ba>
 80049c4:	2302      	movs	r3, #2
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ca:	e03e      	b.n	8004a4a <UART_SetConfig+0x1ba>
 80049cc:	2304      	movs	r3, #4
 80049ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d2:	e03a      	b.n	8004a4a <UART_SetConfig+0x1ba>
 80049d4:	2308      	movs	r3, #8
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049da:	e036      	b.n	8004a4a <UART_SetConfig+0x1ba>
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e2:	e032      	b.n	8004a4a <UART_SetConfig+0x1ba>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a6a      	ldr	r2, [pc, #424]	; (8004b94 <UART_SetConfig+0x304>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d12a      	bne.n	8004a44 <UART_SetConfig+0x1b4>
 80049ee:	4b6b      	ldr	r3, [pc, #428]	; (8004b9c <UART_SetConfig+0x30c>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049fc:	d01a      	beq.n	8004a34 <UART_SetConfig+0x1a4>
 80049fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a02:	d81b      	bhi.n	8004a3c <UART_SetConfig+0x1ac>
 8004a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a08:	d00c      	beq.n	8004a24 <UART_SetConfig+0x194>
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0e:	d815      	bhi.n	8004a3c <UART_SetConfig+0x1ac>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <UART_SetConfig+0x18c>
 8004a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a18:	d008      	beq.n	8004a2c <UART_SetConfig+0x19c>
 8004a1a:	e00f      	b.n	8004a3c <UART_SetConfig+0x1ac>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e012      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004a24:	2302      	movs	r3, #2
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e00e      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a32:	e00a      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004a34:	2308      	movs	r3, #8
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3a:	e006      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a42:	e002      	b.n	8004a4a <UART_SetConfig+0x1ba>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a51      	ldr	r2, [pc, #324]	; (8004b94 <UART_SetConfig+0x304>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d17a      	bne.n	8004b4a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d824      	bhi.n	8004aa6 <UART_SetConfig+0x216>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0x1d4>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004aa7 	.word	0x08004aa7
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004a97 	.word	0x08004a97
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004aa7 	.word	0x08004aa7
 8004a80:	08004aa7 	.word	0x08004aa7
 8004a84:	08004a9f 	.word	0x08004a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a88:	f7fe f97e 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	61f8      	str	r0, [r7, #28]
        break;
 8004a8e:	e010      	b.n	8004ab2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b44      	ldr	r3, [pc, #272]	; (8004ba4 <UART_SetConfig+0x314>)
 8004a92:	61fb      	str	r3, [r7, #28]
        break;
 8004a94:	e00d      	b.n	8004ab2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7fe f8df 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004a9a:	61f8      	str	r0, [r7, #28]
        break;
 8004a9c:	e009      	b.n	8004ab2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	61fb      	str	r3, [r7, #28]
        break;
 8004aa4:	e005      	b.n	8004ab2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ab0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8107 	beq.w	8004cc8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d305      	bcc.n	8004ad6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d903      	bls.n	8004ade <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004adc:	e0f4      	b.n	8004cc8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	461c      	mov	r4, r3
 8004ae4:	4615      	mov	r5, r2
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	022b      	lsls	r3, r5, #8
 8004af0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004af4:	0222      	lsls	r2, r4, #8
 8004af6:	68f9      	ldr	r1, [r7, #12]
 8004af8:	6849      	ldr	r1, [r1, #4]
 8004afa:	0849      	lsrs	r1, r1, #1
 8004afc:	2000      	movs	r0, #0
 8004afe:	4688      	mov	r8, r1
 8004b00:	4681      	mov	r9, r0
 8004b02:	eb12 0a08 	adds.w	sl, r2, r8
 8004b06:	eb43 0b09 	adc.w	fp, r3, r9
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b18:	4650      	mov	r0, sl
 8004b1a:	4659      	mov	r1, fp
 8004b1c:	f7fc f886 	bl	8000c2c <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2e:	d308      	bcc.n	8004b42 <UART_SetConfig+0x2b2>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b36:	d204      	bcs.n	8004b42 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	60da      	str	r2, [r3, #12]
 8004b40:	e0c2      	b.n	8004cc8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b48:	e0be      	b.n	8004cc8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b52:	d16a      	bne.n	8004c2a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d834      	bhi.n	8004bc6 <UART_SetConfig+0x336>
 8004b5c:	a201      	add	r2, pc, #4	; (adr r2, 8004b64 <UART_SetConfig+0x2d4>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004ba9 	.word	0x08004ba9
 8004b6c:	08004bb1 	.word	0x08004bb1
 8004b70:	08004bc7 	.word	0x08004bc7
 8004b74:	08004bb7 	.word	0x08004bb7
 8004b78:	08004bc7 	.word	0x08004bc7
 8004b7c:	08004bc7 	.word	0x08004bc7
 8004b80:	08004bc7 	.word	0x08004bc7
 8004b84:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b88:	f7fe f8fe 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004b8c:	61f8      	str	r0, [r7, #28]
        break;
 8004b8e:	e020      	b.n	8004bd2 <UART_SetConfig+0x342>
 8004b90:	efff69f3 	.word	0xefff69f3
 8004b94:	40008000 	.word	0x40008000
 8004b98:	40013800 	.word	0x40013800
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40004400 	.word	0x40004400
 8004ba4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fe f904 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <UART_SetConfig+0x454>)
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe f84f 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61fb      	str	r3, [r7, #28]
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d077      	beq.n	8004cc8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	005a      	lsls	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	085b      	lsrs	r3, r3, #1
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	2b0f      	cmp	r3, #15
 8004bf2:	d916      	bls.n	8004c22 <UART_SetConfig+0x392>
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d212      	bcs.n	8004c22 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f023 030f 	bic.w	r3, r3, #15
 8004c04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	8afb      	ldrh	r3, [r7, #22]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	8afa      	ldrh	r2, [r7, #22]
 8004c1e:	60da      	str	r2, [r3, #12]
 8004c20:	e052      	b.n	8004cc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c28:	e04e      	b.n	8004cc8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d827      	bhi.n	8004c82 <UART_SetConfig+0x3f2>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0x3a8>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	08004c83 	.word	0x08004c83
 8004c48:	08004c73 	.word	0x08004c73
 8004c4c:	08004c83 	.word	0x08004c83
 8004c50:	08004c83 	.word	0x08004c83
 8004c54:	08004c83 	.word	0x08004c83
 8004c58:	08004c7b 	.word	0x08004c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c5c:	f7fe f894 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8004c60:	61f8      	str	r0, [r7, #28]
        break;
 8004c62:	e014      	b.n	8004c8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe f8a6 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8004c68:	61f8      	str	r0, [r7, #28]
        break;
 8004c6a:	e010      	b.n	8004c8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <UART_SetConfig+0x454>)
 8004c6e:	61fb      	str	r3, [r7, #28]
        break;
 8004c70:	e00d      	b.n	8004c8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c72:	f7fd fff1 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004c76:	61f8      	str	r0, [r7, #28]
        break;
 8004c78:	e009      	b.n	8004c8e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7e:	61fb      	str	r3, [r7, #28]
        break;
 8004c80:	e005      	b.n	8004c8e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c8c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	085a      	lsrs	r2, r3, #1
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b0f      	cmp	r3, #15
 8004cac:	d909      	bls.n	8004cc2 <UART_SetConfig+0x432>
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb4:	d205      	bcs.n	8004cc2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60da      	str	r2, [r3, #12]
 8004cc0:	e002      	b.n	8004cc8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3728      	adds	r7, #40	; 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ce2:	bf00      	nop
 8004ce4:	00f42400 	.word	0x00f42400

08004ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0310 	and.w	r3, r3, #16
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01a      	beq.n	8004dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de6:	d10a      	bne.n	8004dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	605a      	str	r2, [r3, #4]
  }
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e3c:	f7fc ff24 	bl	8001c88 <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d10e      	bne.n	8004e6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f82d 	bl	8004ebe <UART_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e023      	b.n	8004eb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d10e      	bne.n	8004e9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f817 	bl	8004ebe <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e00d      	b.n	8004eb6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b09c      	sub	sp, #112	; 0x70
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ece:	e0a5      	b.n	800501c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	f000 80a1 	beq.w	800501c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eda:	f7fc fed5 	bl	8001c88 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d13e      	bne.n	8004f6e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f04:	667b      	str	r3, [r7, #100]	; 0x64
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e6      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3308      	adds	r3, #8
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	663b      	str	r3, [r7, #96]	; 0x60
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f42:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e5      	bne.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e067      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d04f      	beq.n	800501c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8a:	d147      	bne.n	800501c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f94:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e6      	bne.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fe8:	623a      	str	r2, [r7, #32]
 8004fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	69f9      	ldr	r1, [r7, #28]
 8004fee:	6a3a      	ldr	r2, [r7, #32]
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2220      	movs	r2, #32
 8005006:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2220      	movs	r2, #32
 800500c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e010      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	4013      	ands	r3, r2
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	bf0c      	ite	eq
 800502c:	2301      	moveq	r3, #1
 800502e:	2300      	movne	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	429a      	cmp	r2, r3
 8005038:	f43f af4a 	beq.w	8004ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3770      	adds	r7, #112	; 0x70
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	4603      	mov	r3, r0
 800504e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005058:	2b84      	cmp	r3, #132	; 0x84
 800505a:	d005      	beq.n	8005068 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800505c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	3303      	adds	r3, #3
 8005066:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005068:	68fb      	ldr	r3, [r7, #12]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800507a:	f001 f9a5 	bl	80063c8 <vTaskStartScheduler>
  
  return osOK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}

08005084 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005086:	b089      	sub	sp, #36	; 0x24
 8005088:	af04      	add	r7, sp, #16
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d020      	beq.n	80050d8 <osThreadCreate+0x54>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01c      	beq.n	80050d8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685c      	ldr	r4, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681d      	ldr	r5, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691e      	ldr	r6, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ffc8 	bl	8005046 <makeFreeRtosPriority>
 80050b6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050c0:	9202      	str	r2, [sp, #8]
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	9100      	str	r1, [sp, #0]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	4632      	mov	r2, r6
 80050ca:	4629      	mov	r1, r5
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 ff9d 	bl	800600c <xTaskCreateStatic>
 80050d2:	4603      	mov	r3, r0
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e01c      	b.n	8005112 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685c      	ldr	r4, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050e4:	b29e      	uxth	r6, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ffaa 	bl	8005046 <makeFreeRtosPriority>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f107 030c 	add.w	r3, r7, #12
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	9200      	str	r2, [sp, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4632      	mov	r2, r6
 8005100:	4629      	mov	r1, r5
 8005102:	4620      	mov	r0, r4
 8005104:	f000 ffdf 	bl	80060c6 <xTaskCreate>
 8005108:	4603      	mov	r3, r0
 800510a:	2b01      	cmp	r3, #1
 800510c:	d001      	beq.n	8005112 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800511c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <osDelay+0x16>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	e000      	b.n	8005134 <osDelay+0x18>
 8005132:	2301      	movs	r3, #1
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f913 	bl	8006360 <vTaskDelay>
  
  return osOK;
 800513a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af02      	add	r7, sp, #8
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10a      	bne.n	8005172 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2203      	movs	r2, #3
 8005162:	9200      	str	r2, [sp, #0]
 8005164:	2200      	movs	r2, #0
 8005166:	2100      	movs	r1, #0
 8005168:	2001      	movs	r0, #1
 800516a:	f000 f947 	bl	80053fc <xQueueGenericCreateStatic>
 800516e:	4603      	mov	r3, r0
 8005170:	e023      	b.n	80051ba <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8005172:	6838      	ldr	r0, [r7, #0]
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	461a      	mov	r2, r3
 800517c:	f000 fa0f 	bl	800559e <xQueueCreateCountingSemaphoreStatic>
 8005180:	4603      	mov	r3, r0
 8005182:	e01a      	b.n	80051ba <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d110      	bne.n	80051ac <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 800518a:	2203      	movs	r2, #3
 800518c:	2100      	movs	r1, #0
 800518e:	2001      	movs	r0, #1
 8005190:	f000 f9ac 	bl	80054ec <xQueueGenericCreate>
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <osSemaphoreCreate+0x64>
 800519c:	2300      	movs	r3, #0
 800519e:	2200      	movs	r2, #0
 80051a0:	2100      	movs	r1, #0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fa66 	bl	8005674 <xQueueGenericSend>
      return sema;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	e006      	b.n	80051ba <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fa2a 	bl	800560c <xQueueCreateCountingSemaphore>
 80051b8:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f103 0208 	add.w	r2, r3, #8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f04f 32ff 	mov.w	r2, #4294967295
 80051da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f103 0208 	add.w	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f103 0208 	add.w	r2, r3, #8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	601a      	str	r2, [r3, #0]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d103      	bne.n	8005284 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	e00c      	b.n	800529e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3308      	adds	r3, #8
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e002      	b.n	8005292 <vListInsert+0x2e>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	d2f6      	bcs.n	800528c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6892      	ldr	r2, [r2, #8]
 80052ec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6852      	ldr	r2, [r2, #4]
 80052f6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d103      	bne.n	800530a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	1e5a      	subs	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005356:	f001 ff95 	bl	8007284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	68f9      	ldr	r1, [r7, #12]
 8005364:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	441a      	add	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	3b01      	subs	r3, #1
 8005388:	68f9      	ldr	r1, [r7, #12]
 800538a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	441a      	add	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	22ff      	movs	r2, #255	; 0xff
 800539a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	22ff      	movs	r2, #255	; 0xff
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d114      	bne.n	80053d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01a      	beq.n	80053ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	3310      	adds	r3, #16
 80053b8:	4618      	mov	r0, r3
 80053ba:	f001 fa57 	bl	800686c <xTaskRemoveFromEventList>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d012      	beq.n	80053ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053c4:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <xQueueGenericReset+0xcc>)
 80053c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	e009      	b.n	80053ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3310      	adds	r3, #16
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fef1 	bl	80051c2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3324      	adds	r3, #36	; 0x24
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff feec 	bl	80051c2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053ea:	f001 ff7b 	bl	80072e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053ee:	2301      	movs	r3, #1
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08e      	sub	sp, #56	; 0x38
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <xQueueGenericCreateStatic+0x52>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <xQueueGenericCreateStatic+0x56>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <xQueueGenericCreateStatic+0x58>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	623b      	str	r3, [r7, #32]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <xQueueGenericCreateStatic+0x7e>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <xQueueGenericCreateStatic+0x82>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <xQueueGenericCreateStatic+0x84>
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	61fb      	str	r3, [r7, #28]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800549a:	2348      	movs	r3, #72	; 0x48
 800549c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b48      	cmp	r3, #72	; 0x48
 80054a2:	d00a      	beq.n	80054ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61bb      	str	r3, [r7, #24]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00d      	beq.n	80054e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f83f 	bl	8005560 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3730      	adds	r7, #48	; 0x30
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4613      	mov	r3, r2
 80054f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	613b      	str	r3, [r7, #16]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	3348      	adds	r3, #72	; 0x48
 8005524:	4618      	mov	r0, r3
 8005526:	f001 ffcf 	bl	80074c8 <pvPortMalloc>
 800552a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d011      	beq.n	8005556 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	3348      	adds	r3, #72	; 0x48
 800553a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005544:	79fa      	ldrb	r2, [r7, #7]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f805 	bl	8005560 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005556:	69bb      	ldr	r3, [r7, #24]
	}
 8005558:	4618      	mov	r0, r3
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e002      	b.n	8005582 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800558e:	2101      	movs	r1, #1
 8005590:	69b8      	ldr	r0, [r7, #24]
 8005592:	f7ff fecb 	bl	800532c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b08a      	sub	sp, #40	; 0x28
 80055a2:	af02      	add	r7, sp, #8
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	61bb      	str	r3, [r7, #24]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d90a      	bls.n	80055e4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	617b      	str	r3, [r7, #20]
}
 80055e0:	bf00      	nop
 80055e2:	e7fe      	b.n	80055e2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80055e4:	2302      	movs	r3, #2
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	2100      	movs	r1, #0
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff ff04 	bl	80053fc <xQueueGenericCreateStatic>
 80055f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005602:	69fb      	ldr	r3, [r7, #28]
	}
 8005604:	4618      	mov	r0, r3
 8005606:	3720      	adds	r7, #32
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	613b      	str	r3, [r7, #16]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d90a      	bls.n	8005650 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	60fb      	str	r3, [r7, #12]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005650:	2202      	movs	r2, #2
 8005652:	2100      	movs	r1, #0
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff ff49 	bl	80054ec <xQueueGenericCreate>
 800565a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005668:	697b      	ldr	r3, [r7, #20]
	}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08e      	sub	sp, #56	; 0x38
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005682:	2300      	movs	r3, #0
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <xQueueGenericSend+0x32>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <xQueueGenericSend+0x40>
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <xQueueGenericSend+0x44>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <xQueueGenericSend+0x46>
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <xQueueGenericSend+0x60>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d103      	bne.n	80056e2 <xQueueGenericSend+0x6e>
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <xQueueGenericSend+0x72>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <xQueueGenericSend+0x74>
 80056e6:	2300      	movs	r3, #0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xQueueGenericSend+0x8e>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	623b      	str	r3, [r7, #32]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005702:	f001 fa73 	bl	8006bec <xTaskGetSchedulerState>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <xQueueGenericSend+0x9e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <xQueueGenericSend+0xa2>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <xQueueGenericSend+0xa4>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <xQueueGenericSend+0xbe>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	61fb      	str	r3, [r7, #28]
}
 800572e:	bf00      	nop
 8005730:	e7fe      	b.n	8005730 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005732:	f001 fda7 	bl	8007284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <xQueueGenericSend+0xd4>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d129      	bne.n	800579c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800574e:	f000 fb4d 	bl	8005dec <prvCopyDataToQueue>
 8005752:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	3324      	adds	r3, #36	; 0x24
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f883 	bl	800686c <xTaskRemoveFromEventList>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d013      	beq.n	8005794 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800576c:	4b3f      	ldr	r3, [pc, #252]	; (800586c <xQueueGenericSend+0x1f8>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	e00a      	b.n	8005794 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005784:	4b39      	ldr	r3, [pc, #228]	; (800586c <xQueueGenericSend+0x1f8>)
 8005786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005794:	f001 fda6 	bl	80072e4 <vPortExitCritical>
				return pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	e063      	b.n	8005864 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057a2:	f001 fd9f 	bl	80072e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e05c      	b.n	8005864 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 f8bb 	bl	8006930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057be:	f001 fd91 	bl	80072e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057c2:	f000 fe6b 	bl	800649c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c6:	f001 fd5d 	bl	8007284 <vPortEnterCritical>
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d103      	bne.n	80057e0 <xQueueGenericSend+0x16c>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e6:	b25b      	sxtb	r3, r3
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericSend+0x182>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f6:	f001 fd75 	bl	80072e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057fa:	1d3a      	adds	r2, r7, #4
 80057fc:	f107 0314 	add.w	r3, r7, #20
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f001 f8aa 	bl	800695c <xTaskCheckForTimeOut>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d124      	bne.n	8005858 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800580e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005810:	f000 fbe4 	bl	8005fdc <prvIsQueueFull>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d018      	beq.n	800584c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	3310      	adds	r3, #16
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fffe 	bl	8006824 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800582a:	f000 fb6f 	bl	8005f0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800582e:	f000 fe43 	bl	80064b8 <xTaskResumeAll>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	f47f af7c 	bne.w	8005732 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800583a:	4b0c      	ldr	r3, [pc, #48]	; (800586c <xQueueGenericSend+0x1f8>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	e772      	b.n	8005732 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800584c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800584e:	f000 fb5d 	bl	8005f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005852:	f000 fe31 	bl	80064b8 <xTaskResumeAll>
 8005856:	e76c      	b.n	8005732 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800585a:	f000 fb57 	bl	8005f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800585e:	f000 fe2b 	bl	80064b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005862:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005864:	4618      	mov	r0, r3
 8005866:	3738      	adds	r7, #56	; 0x38
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	e000ed04 	.word	0xe000ed04

08005870 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b090      	sub	sp, #64	; 0x40
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800589a:	bf00      	nop
 800589c:	e7fe      	b.n	800589c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d103      	bne.n	80058ac <xQueueGenericSendFromISR+0x3c>
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <xQueueGenericSendFromISR+0x40>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <xQueueGenericSendFromISR+0x42>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058c8:	bf00      	nop
 80058ca:	e7fe      	b.n	80058ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d103      	bne.n	80058da <xQueueGenericSendFromISR+0x6a>
 80058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <xQueueGenericSendFromISR+0x6e>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <xQueueGenericSendFromISR+0x70>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	623b      	str	r3, [r7, #32]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058fa:	f001 fda5 	bl	8007448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058fe:	f3ef 8211 	mrs	r2, BASEPRI
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	61fa      	str	r2, [r7, #28]
 8005914:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005916:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <xQueueGenericSendFromISR+0xbc>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d12f      	bne.n	800598c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005942:	f000 fa53 	bl	8005dec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005946:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594e:	d112      	bne.n	8005976 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d016      	beq.n	8005986 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595a:	3324      	adds	r3, #36	; 0x24
 800595c:	4618      	mov	r0, r3
 800595e:	f000 ff85 	bl	800686c <xTaskRemoveFromEventList>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e007      	b.n	8005986 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005976:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800597a:	3301      	adds	r3, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	b25a      	sxtb	r2, r3
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005986:	2301      	movs	r3, #1
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800598a:	e001      	b.n	8005990 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800598c:	2300      	movs	r3, #0
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800599a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800599c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3740      	adds	r7, #64	; 0x40
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08c      	sub	sp, #48	; 0x30
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <xQueueReceive+0x30>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	623b      	str	r3, [r7, #32]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <xQueueReceive+0x3e>
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <xQueueReceive+0x42>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueReceive+0x44>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueReceive+0x5e>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	61fb      	str	r3, [r7, #28]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a06:	f001 f8f1 	bl	8006bec <xTaskGetSchedulerState>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <xQueueReceive+0x6e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <xQueueReceive+0x72>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <xQueueReceive+0x74>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xQueueReceive+0x8e>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	61bb      	str	r3, [r7, #24]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a36:	f001 fc25 	bl	8007284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01f      	beq.n	8005a86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a4a:	f000 fa39 	bl	8005ec0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1e5a      	subs	r2, r3, #1
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	3310      	adds	r3, #16
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 ff02 	bl	800686c <xTaskRemoveFromEventList>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a6e:	4b3d      	ldr	r3, [pc, #244]	; (8005b64 <xQueueReceive+0x1bc>)
 8005a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a7e:	f001 fc31 	bl	80072e4 <vPortExitCritical>
				return pdPASS;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e069      	b.n	8005b5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a8c:	f001 fc2a 	bl	80072e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e062      	b.n	8005b5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a9a:	f107 0310 	add.w	r3, r7, #16
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 ff46 	bl	8006930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa8:	f001 fc1c 	bl	80072e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aac:	f000 fcf6 	bl	800649c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ab0:	f001 fbe8 	bl	8007284 <vPortEnterCritical>
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aba:	b25b      	sxtb	r3, r3
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d103      	bne.n	8005aca <xQueueReceive+0x122>
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad0:	b25b      	sxtb	r3, r3
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d103      	bne.n	8005ae0 <xQueueReceive+0x138>
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ae0:	f001 fc00 	bl	80072e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ae4:	1d3a      	adds	r2, r7, #4
 8005ae6:	f107 0310 	add.w	r3, r7, #16
 8005aea:	4611      	mov	r1, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 ff35 	bl	800695c <xTaskCheckForTimeOut>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d123      	bne.n	8005b40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005afa:	f000 fa59 	bl	8005fb0 <prvIsQueueEmpty>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d017      	beq.n	8005b34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	3324      	adds	r3, #36	; 0x24
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fe89 	bl	8006824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b14:	f000 f9fa 	bl	8005f0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b18:	f000 fcce 	bl	80064b8 <xTaskResumeAll>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d189      	bne.n	8005a36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <xQueueReceive+0x1bc>)
 8005b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	e780      	b.n	8005a36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b36:	f000 f9e9 	bl	8005f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b3a:	f000 fcbd 	bl	80064b8 <xTaskResumeAll>
 8005b3e:	e77a      	b.n	8005a36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b42:	f000 f9e3 	bl	8005f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b46:	f000 fcb7 	bl	80064b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4c:	f000 fa30 	bl	8005fb0 <prvIsQueueEmpty>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f43f af6f 	beq.w	8005a36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3730      	adds	r7, #48	; 0x30
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	e000ed04 	.word	0xe000ed04

08005b68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	; 0x38
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10a      	bne.n	8005b9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	623b      	str	r3, [r7, #32]
}
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	61fb      	str	r3, [r7, #28]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb8:	f001 f818 	bl	8006bec <xTaskGetSchedulerState>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <xQueueSemaphoreTake+0x60>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <xQueueSemaphoreTake+0x64>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <xQueueSemaphoreTake+0x66>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	61bb      	str	r3, [r7, #24]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005be8:	f001 fb4c 	bl	8007284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d024      	beq.n	8005c42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	1e5a      	subs	r2, r3, #1
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c08:	f001 f998 	bl	8006f3c <pvTaskIncrementMutexHeldCount>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00f      	beq.n	8005c3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	3310      	adds	r3, #16
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fe24 	bl	800686c <xTaskRemoveFromEventList>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c2a:	4b54      	ldr	r3, [pc, #336]	; (8005d7c <xQueueSemaphoreTake+0x214>)
 8005c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c3a:	f001 fb53 	bl	80072e4 <vPortExitCritical>
				return pdPASS;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e097      	b.n	8005d72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d111      	bne.n	8005c6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	617b      	str	r3, [r7, #20]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c64:	f001 fb3e 	bl	80072e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e082      	b.n	8005d72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c72:	f107 030c 	add.w	r3, r7, #12
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fe5a 	bl	8006930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c80:	f001 fb30 	bl	80072e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c84:	f000 fc0a 	bl	800649c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c88:	f001 fafc 	bl	8007284 <vPortEnterCritical>
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c92:	b25b      	sxtb	r3, r3
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d103      	bne.n	8005ca2 <xQueueSemaphoreTake+0x13a>
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d103      	bne.n	8005cb8 <xQueueSemaphoreTake+0x150>
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb8:	f001 fb14 	bl	80072e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cbc:	463a      	mov	r2, r7
 8005cbe:	f107 030c 	add.w	r3, r7, #12
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fe49 	bl	800695c <xTaskCheckForTimeOut>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d132      	bne.n	8005d36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd2:	f000 f96d 	bl	8005fb0 <prvIsQueueEmpty>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d026      	beq.n	8005d2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005ce4:	f001 face 	bl	8007284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 ff9b 	bl	8006c28 <xTaskPriorityInherit>
 8005cf2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005cf4:	f001 faf6 	bl	80072e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fd8f 	bl	8006824 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d08:	f000 f900 	bl	8005f0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d0c:	f000 fbd4 	bl	80064b8 <xTaskResumeAll>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f47f af68 	bne.w	8005be8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005d18:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <xQueueSemaphoreTake+0x214>)
 8005d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	e75e      	b.n	8005be8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d2c:	f000 f8ee 	bl	8005f0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d30:	f000 fbc2 	bl	80064b8 <xTaskResumeAll>
 8005d34:	e758      	b.n	8005be8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d38:	f000 f8e8 	bl	8005f0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d3c:	f000 fbbc 	bl	80064b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d42:	f000 f935 	bl	8005fb0 <prvIsQueueEmpty>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f43f af4d 	beq.w	8005be8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00d      	beq.n	8005d70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d54:	f001 fa96 	bl	8007284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d5a:	f000 f82f 	bl	8005dbc <prvGetDisinheritPriorityAfterTimeout>
 8005d5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 f85a 	bl	8006e20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d6c:	f001 faba 	bl	80072e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3738      	adds	r7, #56	; 0x38
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60fb      	str	r3, [r7, #12]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005dae:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d006      	beq.n	8005dda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f1c3 0307 	rsb	r3, r3, #7
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e001      	b.n	8005dde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005dde:	68fb      	ldr	r3, [r7, #12]
	}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10d      	bne.n	8005e26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d14d      	bne.n	8005eae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 ff7c 	bl	8006d14 <xTaskPriorityDisinherit>
 8005e1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	609a      	str	r2, [r3, #8]
 8005e24:	e043      	b.n	8005eae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d119      	bne.n	8005e60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6858      	ldr	r0, [r3, #4]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	461a      	mov	r2, r3
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	f001 fe64 	bl	8007b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d32b      	bcc.n	8005eae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	e026      	b.n	8005eae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	68d8      	ldr	r0, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	461a      	mov	r2, r3
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	f001 fe4a 	bl	8007b04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	425b      	negs	r3, r3
 8005e7a:	441a      	add	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d207      	bcs.n	8005e9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	425b      	negs	r3, r3
 8005e96:	441a      	add	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d105      	bne.n	8005eae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005eb6:	697b      	ldr	r3, [r7, #20]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d018      	beq.n	8005f04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	441a      	add	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d303      	bcc.n	8005ef4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68d9      	ldr	r1, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	461a      	mov	r2, r3
 8005efe:	6838      	ldr	r0, [r7, #0]
 8005f00:	f001 fe00 	bl	8007b04 <memcpy>
	}
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f14:	f001 f9b6 	bl	8007284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f20:	e011      	b.n	8005f46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3324      	adds	r3, #36	; 0x24
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 fc9c 	bl	800686c <xTaskRemoveFromEventList>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f3a:	f000 fd71 	bl	8006a20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dce9      	bgt.n	8005f22 <prvUnlockQueue+0x16>
 8005f4e:	e000      	b.n	8005f52 <prvUnlockQueue+0x46>
					break;
 8005f50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	22ff      	movs	r2, #255	; 0xff
 8005f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f5a:	f001 f9c3 	bl	80072e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f5e:	f001 f991 	bl	8007284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f6a:	e011      	b.n	8005f90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d012      	beq.n	8005f9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3310      	adds	r3, #16
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fc77 	bl	800686c <xTaskRemoveFromEventList>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f84:	f000 fd4c 	bl	8006a20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	dce9      	bgt.n	8005f6c <prvUnlockQueue+0x60>
 8005f98:	e000      	b.n	8005f9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	22ff      	movs	r2, #255	; 0xff
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fa4:	f001 f99e 	bl	80072e4 <vPortExitCritical>
}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fb8:	f001 f964 	bl	8007284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e001      	b.n	8005fce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fce:	f001 f989 	bl	80072e4 <vPortExitCritical>

	return xReturn;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fe4:	f001 f94e 	bl	8007284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d102      	bne.n	8005ffa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e001      	b.n	8005ffe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ffe:	f001 f971 	bl	80072e4 <vPortExitCritical>

	return xReturn;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	; 0x38
 8006010:	af04      	add	r7, sp, #16
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	623b      	str	r3, [r7, #32]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <xTaskCreateStatic+0x46>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	61fb      	str	r3, [r7, #28]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006052:	23b4      	movs	r3, #180	; 0xb4
 8006054:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2bb4      	cmp	r3, #180	; 0xb4
 800605a:	d00a      	beq.n	8006072 <xTaskCreateStatic+0x66>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	61bb      	str	r3, [r7, #24]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006072:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	2b00      	cmp	r3, #0
 8006078:	d01e      	beq.n	80060b8 <xTaskCreateStatic+0xac>
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01b      	beq.n	80060b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006088:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	2202      	movs	r2, #2
 800608e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006092:	2300      	movs	r3, #0
 8006094:	9303      	str	r3, [sp, #12]
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	9302      	str	r3, [sp, #8]
 800609a:	f107 0314 	add.w	r3, r7, #20
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f850 	bl	8006150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060b2:	f000 f8eb 	bl	800628c <prvAddNewTaskToReadyList>
 80060b6:	e001      	b.n	80060bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80060bc:	697b      	ldr	r3, [r7, #20]
	}
 80060be:	4618      	mov	r0, r3
 80060c0:	3728      	adds	r7, #40	; 0x28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b08c      	sub	sp, #48	; 0x30
 80060ca:	af04      	add	r7, sp, #16
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	603b      	str	r3, [r7, #0]
 80060d2:	4613      	mov	r3, r2
 80060d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 f9f4 	bl	80074c8 <pvPortMalloc>
 80060e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00e      	beq.n	8006106 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060e8:	20b4      	movs	r0, #180	; 0xb4
 80060ea:	f001 f9ed 	bl	80074c8 <pvPortMalloc>
 80060ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
 80060fc:	e005      	b.n	800610a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f001 faae 	bl	8007660 <vPortFree>
 8006104:	e001      	b.n	800610a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d017      	beq.n	8006140 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	2300      	movs	r3, #0
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	9302      	str	r3, [sp, #8]
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f80e 	bl	8006150 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006134:	69f8      	ldr	r0, [r7, #28]
 8006136:	f000 f8a9 	bl	800628c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800613a:	2301      	movs	r3, #1
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e002      	b.n	8006146 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006140:	f04f 33ff 	mov.w	r3, #4294967295
 8006144:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006146:	69bb      	ldr	r3, [r7, #24]
	}
 8006148:	4618      	mov	r0, r3
 800614a:	3720      	adds	r7, #32
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006168:	3b01      	subs	r3, #1
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f023 0307 	bic.w	r3, r3, #7
 8006176:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	617b      	str	r3, [r7, #20]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01f      	beq.n	80061de <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	e012      	b.n	80061ca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	7819      	ldrb	r1, [r3, #0]
 80061ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	3334      	adds	r3, #52	; 0x34
 80061b4:	460a      	mov	r2, r1
 80061b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	4413      	add	r3, r2
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d006      	beq.n	80061d2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	3301      	adds	r3, #1
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2b0f      	cmp	r3, #15
 80061ce:	d9e9      	bls.n	80061a4 <prvInitialiseNewTask+0x54>
 80061d0:	e000      	b.n	80061d4 <prvInitialiseNewTask+0x84>
			{
				break;
 80061d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061dc:	e003      	b.n	80061e6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	2b06      	cmp	r3, #6
 80061ea:	d901      	bls.n	80061f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061ec:	2306      	movs	r3, #6
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80061fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fe:	2200      	movs	r2, #0
 8006200:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	3304      	adds	r3, #4
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fffb 	bl	8005202 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	3318      	adds	r3, #24
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe fff6 	bl	8005202 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	f1c3 0207 	rsb	r2, r3, #7
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	2200      	movs	r2, #0
 8006238:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	334c      	adds	r3, #76	; 0x4c
 8006240:	2260      	movs	r2, #96	; 0x60
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f001 fc6b 	bl	8007b20 <memset>
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	4a0c      	ldr	r2, [pc, #48]	; (8006280 <prvInitialiseNewTask+0x130>)
 800624e:	651a      	str	r2, [r3, #80]	; 0x50
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	4a0c      	ldr	r2, [pc, #48]	; (8006284 <prvInitialiseNewTask+0x134>)
 8006254:	655a      	str	r2, [r3, #84]	; 0x54
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	4a0b      	ldr	r2, [pc, #44]	; (8006288 <prvInitialiseNewTask+0x138>)
 800625a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	68f9      	ldr	r1, [r7, #12]
 8006260:	69b8      	ldr	r0, [r7, #24]
 8006262:	f000 fee5 	bl	8007030 <pxPortInitialiseStack>
 8006266:	4602      	mov	r2, r0
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006276:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006278:	bf00      	nop
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	0800a9c8 	.word	0x0800a9c8
 8006284:	0800a9e8 	.word	0x0800a9e8
 8006288:	0800a9a8 	.word	0x0800a9a8

0800628c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006294:	f000 fff6 	bl	8007284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006298:	4b2a      	ldr	r3, [pc, #168]	; (8006344 <prvAddNewTaskToReadyList+0xb8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	4a29      	ldr	r2, [pc, #164]	; (8006344 <prvAddNewTaskToReadyList+0xb8>)
 80062a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062a2:	4b29      	ldr	r3, [pc, #164]	; (8006348 <prvAddNewTaskToReadyList+0xbc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062aa:	4a27      	ldr	r2, [pc, #156]	; (8006348 <prvAddNewTaskToReadyList+0xbc>)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062b0:	4b24      	ldr	r3, [pc, #144]	; (8006344 <prvAddNewTaskToReadyList+0xb8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d110      	bne.n	80062da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062b8:	f000 fbd6 	bl	8006a68 <prvInitialiseTaskLists>
 80062bc:	e00d      	b.n	80062da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062be:	4b23      	ldr	r3, [pc, #140]	; (800634c <prvAddNewTaskToReadyList+0xc0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d109      	bne.n	80062da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062c6:	4b20      	ldr	r3, [pc, #128]	; (8006348 <prvAddNewTaskToReadyList+0xbc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d802      	bhi.n	80062da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <prvAddNewTaskToReadyList+0xbc>)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80062da:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <prvAddNewTaskToReadyList+0xc4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3301      	adds	r3, #1
 80062e0:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <prvAddNewTaskToReadyList+0xc4>)
 80062e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	2201      	movs	r2, #1
 80062ea:	409a      	lsls	r2, r3
 80062ec:	4b19      	ldr	r3, [pc, #100]	; (8006354 <prvAddNewTaskToReadyList+0xc8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	4a18      	ldr	r2, [pc, #96]	; (8006354 <prvAddNewTaskToReadyList+0xc8>)
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4a15      	ldr	r2, [pc, #84]	; (8006358 <prvAddNewTaskToReadyList+0xcc>)
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7fe ff85 	bl	800521c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006312:	f000 ffe7 	bl	80072e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <prvAddNewTaskToReadyList+0xc0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00e      	beq.n	800633c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800631e:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <prvAddNewTaskToReadyList+0xbc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	429a      	cmp	r2, r3
 800632a:	d207      	bcs.n	800633c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <prvAddNewTaskToReadyList+0xd0>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	200008ac 	.word	0x200008ac
 8006348:	200007ac 	.word	0x200007ac
 800634c:	200008b8 	.word	0x200008b8
 8006350:	200008c8 	.word	0x200008c8
 8006354:	200008b4 	.word	0x200008b4
 8006358:	200007b0 	.word	0x200007b0
 800635c:	e000ed04 	.word	0xe000ed04

08006360 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d017      	beq.n	80063a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006372:	4b13      	ldr	r3, [pc, #76]	; (80063c0 <vTaskDelay+0x60>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <vTaskDelay+0x30>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	60bb      	str	r3, [r7, #8]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006390:	f000 f884 	bl	800649c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006394:	2100      	movs	r1, #0
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fde4 	bl	8006f64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800639c:	f000 f88c 	bl	80064b8 <xTaskResumeAll>
 80063a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d107      	bne.n	80063b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <vTaskDelay+0x64>)
 80063aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	200008d4 	.word	0x200008d4
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80063d6:	463a      	mov	r2, r7
 80063d8:	1d39      	adds	r1, r7, #4
 80063da:	f107 0308 	add.w	r3, r7, #8
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fa fddc 	bl	8000f9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	9202      	str	r2, [sp, #8]
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	2300      	movs	r3, #0
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	2300      	movs	r3, #0
 80063f4:	460a      	mov	r2, r1
 80063f6:	4921      	ldr	r1, [pc, #132]	; (800647c <vTaskStartScheduler+0xb4>)
 80063f8:	4821      	ldr	r0, [pc, #132]	; (8006480 <vTaskStartScheduler+0xb8>)
 80063fa:	f7ff fe07 	bl	800600c <xTaskCreateStatic>
 80063fe:	4603      	mov	r3, r0
 8006400:	4a20      	ldr	r2, [pc, #128]	; (8006484 <vTaskStartScheduler+0xbc>)
 8006402:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006404:	4b1f      	ldr	r3, [pc, #124]	; (8006484 <vTaskStartScheduler+0xbc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e001      	b.n	8006416 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d11b      	bne.n	8006454 <vTaskStartScheduler+0x8c>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	613b      	str	r3, [r7, #16]
}
 800642e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006430:	4b15      	ldr	r3, [pc, #84]	; (8006488 <vTaskStartScheduler+0xc0>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	334c      	adds	r3, #76	; 0x4c
 8006436:	4a15      	ldr	r2, [pc, #84]	; (800648c <vTaskStartScheduler+0xc4>)
 8006438:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800643a:	4b15      	ldr	r3, [pc, #84]	; (8006490 <vTaskStartScheduler+0xc8>)
 800643c:	f04f 32ff 	mov.w	r2, #4294967295
 8006440:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006442:	4b14      	ldr	r3, [pc, #80]	; (8006494 <vTaskStartScheduler+0xcc>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006448:	4b13      	ldr	r3, [pc, #76]	; (8006498 <vTaskStartScheduler+0xd0>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800644e:	f000 fe77 	bl	8007140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006452:	e00e      	b.n	8006472 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645a:	d10a      	bne.n	8006472 <vTaskStartScheduler+0xaa>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	60fb      	str	r3, [r7, #12]
}
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <vTaskStartScheduler+0xa8>
}
 8006472:	bf00      	nop
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	0800a954 	.word	0x0800a954
 8006480:	08006a39 	.word	0x08006a39
 8006484:	200008d0 	.word	0x200008d0
 8006488:	200007ac 	.word	0x200007ac
 800648c:	20000010 	.word	0x20000010
 8006490:	200008cc 	.word	0x200008cc
 8006494:	200008b8 	.word	0x200008b8
 8006498:	200008b0 	.word	0x200008b0

0800649c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <vTaskSuspendAll+0x18>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	4a03      	ldr	r2, [pc, #12]	; (80064b4 <vTaskSuspendAll+0x18>)
 80064a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064aa:	bf00      	nop
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	200008d4 	.word	0x200008d4

080064b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064c6:	4b41      	ldr	r3, [pc, #260]	; (80065cc <xTaskResumeAll+0x114>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	603b      	str	r3, [r7, #0]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064e4:	f000 fece 	bl	8007284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064e8:	4b38      	ldr	r3, [pc, #224]	; (80065cc <xTaskResumeAll+0x114>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	4a37      	ldr	r2, [pc, #220]	; (80065cc <xTaskResumeAll+0x114>)
 80064f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064f2:	4b36      	ldr	r3, [pc, #216]	; (80065cc <xTaskResumeAll+0x114>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d161      	bne.n	80065be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064fa:	4b35      	ldr	r3, [pc, #212]	; (80065d0 <xTaskResumeAll+0x118>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d05d      	beq.n	80065be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006502:	e02e      	b.n	8006562 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006504:	4b33      	ldr	r3, [pc, #204]	; (80065d4 <xTaskResumeAll+0x11c>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3318      	adds	r3, #24
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe fee0 	bl	80052d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3304      	adds	r3, #4
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fedb 	bl	80052d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	2201      	movs	r2, #1
 8006526:	409a      	lsls	r2, r3
 8006528:	4b2b      	ldr	r3, [pc, #172]	; (80065d8 <xTaskResumeAll+0x120>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4313      	orrs	r3, r2
 800652e:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <xTaskResumeAll+0x120>)
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4a27      	ldr	r2, [pc, #156]	; (80065dc <xTaskResumeAll+0x124>)
 8006540:	441a      	add	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fe fe67 	bl	800521c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	4b23      	ldr	r3, [pc, #140]	; (80065e0 <xTaskResumeAll+0x128>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	429a      	cmp	r2, r3
 800655a:	d302      	bcc.n	8006562 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800655c:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <xTaskResumeAll+0x12c>)
 800655e:	2201      	movs	r2, #1
 8006560:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006562:	4b1c      	ldr	r3, [pc, #112]	; (80065d4 <xTaskResumeAll+0x11c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1cc      	bne.n	8006504 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006570:	f000 fb1c 	bl	8006bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006574:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <xTaskResumeAll+0x130>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d010      	beq.n	80065a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006580:	f000 f836 	bl	80065f0 <xTaskIncrementTick>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800658a:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <xTaskResumeAll+0x12c>)
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3b01      	subs	r3, #1
 8006594:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1f1      	bne.n	8006580 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800659c:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <xTaskResumeAll+0x130>)
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065a2:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <xTaskResumeAll+0x12c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065aa:	2301      	movs	r3, #1
 80065ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <xTaskResumeAll+0x134>)
 80065b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065be:	f000 fe91 	bl	80072e4 <vPortExitCritical>

	return xAlreadyYielded;
 80065c2:	68bb      	ldr	r3, [r7, #8]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	200008d4 	.word	0x200008d4
 80065d0:	200008ac 	.word	0x200008ac
 80065d4:	2000086c 	.word	0x2000086c
 80065d8:	200008b4 	.word	0x200008b4
 80065dc:	200007b0 	.word	0x200007b0
 80065e0:	200007ac 	.word	0x200007ac
 80065e4:	200008c0 	.word	0x200008c0
 80065e8:	200008bc 	.word	0x200008bc
 80065ec:	e000ed04 	.word	0xe000ed04

080065f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065fa:	4b4e      	ldr	r3, [pc, #312]	; (8006734 <xTaskIncrementTick+0x144>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 808e 	bne.w	8006720 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006604:	4b4c      	ldr	r3, [pc, #304]	; (8006738 <xTaskIncrementTick+0x148>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800660c:	4a4a      	ldr	r2, [pc, #296]	; (8006738 <xTaskIncrementTick+0x148>)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d120      	bne.n	800665a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006618:	4b48      	ldr	r3, [pc, #288]	; (800673c <xTaskIncrementTick+0x14c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <xTaskIncrementTick+0x48>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	603b      	str	r3, [r7, #0]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <xTaskIncrementTick+0x46>
 8006638:	4b40      	ldr	r3, [pc, #256]	; (800673c <xTaskIncrementTick+0x14c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	4b40      	ldr	r3, [pc, #256]	; (8006740 <xTaskIncrementTick+0x150>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a3e      	ldr	r2, [pc, #248]	; (800673c <xTaskIncrementTick+0x14c>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	4a3e      	ldr	r2, [pc, #248]	; (8006740 <xTaskIncrementTick+0x150>)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	4b3d      	ldr	r3, [pc, #244]	; (8006744 <xTaskIncrementTick+0x154>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	4a3c      	ldr	r2, [pc, #240]	; (8006744 <xTaskIncrementTick+0x154>)
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	f000 faa9 	bl	8006bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800665a:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <xTaskIncrementTick+0x158>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	429a      	cmp	r2, r3
 8006662:	d348      	bcc.n	80066f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006664:	4b35      	ldr	r3, [pc, #212]	; (800673c <xTaskIncrementTick+0x14c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <xTaskIncrementTick+0x158>)
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	601a      	str	r2, [r3, #0]
					break;
 8006676:	e03e      	b.n	80066f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006678:	4b30      	ldr	r3, [pc, #192]	; (800673c <xTaskIncrementTick+0x14c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d203      	bcs.n	8006698 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006690:	4a2d      	ldr	r2, [pc, #180]	; (8006748 <xTaskIncrementTick+0x158>)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006696:	e02e      	b.n	80066f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	3304      	adds	r3, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe fe1a 	bl	80052d6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d004      	beq.n	80066b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3318      	adds	r3, #24
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fe11 	bl	80052d6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	2201      	movs	r2, #1
 80066ba:	409a      	lsls	r2, r3
 80066bc:	4b23      	ldr	r3, [pc, #140]	; (800674c <xTaskIncrementTick+0x15c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	4a22      	ldr	r2, [pc, #136]	; (800674c <xTaskIncrementTick+0x15c>)
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <xTaskIncrementTick+0x160>)
 80066d4:	441a      	add	r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	3304      	adds	r3, #4
 80066da:	4619      	mov	r1, r3
 80066dc:	4610      	mov	r0, r2
 80066de:	f7fe fd9d 	bl	800521c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e6:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <xTaskIncrementTick+0x164>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d3b9      	bcc.n	8006664 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80066f0:	2301      	movs	r3, #1
 80066f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f4:	e7b6      	b.n	8006664 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80066f6:	4b17      	ldr	r3, [pc, #92]	; (8006754 <xTaskIncrementTick+0x164>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4914      	ldr	r1, [pc, #80]	; (8006750 <xTaskIncrementTick+0x160>)
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d901      	bls.n	8006712 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800670e:	2301      	movs	r3, #1
 8006710:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006712:	4b11      	ldr	r3, [pc, #68]	; (8006758 <xTaskIncrementTick+0x168>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800671a:	2301      	movs	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
 800671e:	e004      	b.n	800672a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006720:	4b0e      	ldr	r3, [pc, #56]	; (800675c <xTaskIncrementTick+0x16c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	4a0d      	ldr	r2, [pc, #52]	; (800675c <xTaskIncrementTick+0x16c>)
 8006728:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800672a:	697b      	ldr	r3, [r7, #20]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200008d4 	.word	0x200008d4
 8006738:	200008b0 	.word	0x200008b0
 800673c:	20000864 	.word	0x20000864
 8006740:	20000868 	.word	0x20000868
 8006744:	200008c4 	.word	0x200008c4
 8006748:	200008cc 	.word	0x200008cc
 800674c:	200008b4 	.word	0x200008b4
 8006750:	200007b0 	.word	0x200007b0
 8006754:	200007ac 	.word	0x200007ac
 8006758:	200008c0 	.word	0x200008c0
 800675c:	200008bc 	.word	0x200008bc

08006760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006766:	4b29      	ldr	r3, [pc, #164]	; (800680c <vTaskSwitchContext+0xac>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800676e:	4b28      	ldr	r3, [pc, #160]	; (8006810 <vTaskSwitchContext+0xb0>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006774:	e044      	b.n	8006800 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006776:	4b26      	ldr	r3, [pc, #152]	; (8006810 <vTaskSwitchContext+0xb0>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800677c:	4b25      	ldr	r3, [pc, #148]	; (8006814 <vTaskSwitchContext+0xb4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	fab3 f383 	clz	r3, r3
 8006788:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	f1c3 031f 	rsb	r3, r3, #31
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	4921      	ldr	r1, [pc, #132]	; (8006818 <vTaskSwitchContext+0xb8>)
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10a      	bne.n	80067bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	607b      	str	r3, [r7, #4]
}
 80067b8:	bf00      	nop
 80067ba:	e7fe      	b.n	80067ba <vTaskSwitchContext+0x5a>
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4a14      	ldr	r2, [pc, #80]	; (8006818 <vTaskSwitchContext+0xb8>)
 80067c8:	4413      	add	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	605a      	str	r2, [r3, #4]
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	3308      	adds	r3, #8
 80067de:	429a      	cmp	r2, r3
 80067e0:	d104      	bne.n	80067ec <vTaskSwitchContext+0x8c>
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	4a0a      	ldr	r2, [pc, #40]	; (800681c <vTaskSwitchContext+0xbc>)
 80067f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80067f6:	4b09      	ldr	r3, [pc, #36]	; (800681c <vTaskSwitchContext+0xbc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	334c      	adds	r3, #76	; 0x4c
 80067fc:	4a08      	ldr	r2, [pc, #32]	; (8006820 <vTaskSwitchContext+0xc0>)
 80067fe:	6013      	str	r3, [r2, #0]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	200008d4 	.word	0x200008d4
 8006810:	200008c0 	.word	0x200008c0
 8006814:	200008b4 	.word	0x200008b4
 8006818:	200007b0 	.word	0x200007b0
 800681c:	200007ac 	.word	0x200007ac
 8006820:	20000010 	.word	0x20000010

08006824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	60fb      	str	r3, [r7, #12]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800684a:	4b07      	ldr	r3, [pc, #28]	; (8006868 <vTaskPlaceOnEventList+0x44>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3318      	adds	r3, #24
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fe fd06 	bl	8005264 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006858:	2101      	movs	r1, #1
 800685a:	6838      	ldr	r0, [r7, #0]
 800685c:	f000 fb82 	bl	8006f64 <prvAddCurrentTaskToDelayedList>
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	200007ac 	.word	0x200007ac

0800686c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60fb      	str	r3, [r7, #12]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3318      	adds	r3, #24
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe fd1a 	bl	80052d6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068a2:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <xTaskRemoveFromEventList+0xac>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d11c      	bne.n	80068e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fd11 	bl	80052d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	2201      	movs	r2, #1
 80068ba:	409a      	lsls	r2, r3
 80068bc:	4b17      	ldr	r3, [pc, #92]	; (800691c <xTaskRemoveFromEventList+0xb0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <xTaskRemoveFromEventList+0xb0>)
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4a13      	ldr	r2, [pc, #76]	; (8006920 <xTaskRemoveFromEventList+0xb4>)
 80068d4:	441a      	add	r2, r3
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	3304      	adds	r3, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f7fe fc9d 	bl	800521c <vListInsertEnd>
 80068e2:	e005      	b.n	80068f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3318      	adds	r3, #24
 80068e8:	4619      	mov	r1, r3
 80068ea:	480e      	ldr	r0, [pc, #56]	; (8006924 <xTaskRemoveFromEventList+0xb8>)
 80068ec:	f7fe fc96 	bl	800521c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f4:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <xTaskRemoveFromEventList+0xbc>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d905      	bls.n	800690a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068fe:	2301      	movs	r3, #1
 8006900:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <xTaskRemoveFromEventList+0xc0>)
 8006904:	2201      	movs	r2, #1
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	e001      	b.n	800690e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800690e:	697b      	ldr	r3, [r7, #20]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	200008d4 	.word	0x200008d4
 800691c:	200008b4 	.word	0x200008b4
 8006920:	200007b0 	.word	0x200007b0
 8006924:	2000086c 	.word	0x2000086c
 8006928:	200007ac 	.word	0x200007ac
 800692c:	200008c0 	.word	0x200008c0

08006930 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <vTaskInternalSetTimeOutState+0x24>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <vTaskInternalSetTimeOutState+0x28>)
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	605a      	str	r2, [r3, #4]
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	200008c4 	.word	0x200008c4
 8006958:	200008b0 	.word	0x200008b0

0800695c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	613b      	str	r3, [r7, #16]
}
 800697e:	bf00      	nop
 8006980:	e7fe      	b.n	8006980 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800699e:	f000 fc71 	bl	8007284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069a2:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <xTaskCheckForTimeOut+0xbc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d102      	bne.n	80069c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069bc:	2300      	movs	r3, #0
 80069be:	61fb      	str	r3, [r7, #28]
 80069c0:	e023      	b.n	8006a0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4b15      	ldr	r3, [pc, #84]	; (8006a1c <xTaskCheckForTimeOut+0xc0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d007      	beq.n	80069de <xTaskCheckForTimeOut+0x82>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069d8:	2301      	movs	r3, #1
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	e015      	b.n	8006a0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d20b      	bcs.n	8006a00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ff9b 	bl	8006930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069fa:	2300      	movs	r3, #0
 80069fc:	61fb      	str	r3, [r7, #28]
 80069fe:	e004      	b.n	8006a0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a0a:	f000 fc6b 	bl	80072e4 <vPortExitCritical>

	return xReturn;
 8006a0e:	69fb      	ldr	r3, [r7, #28]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	200008b0 	.word	0x200008b0
 8006a1c:	200008c4 	.word	0x200008c4

08006a20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a24:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <vTaskMissedYield+0x14>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	200008c0 	.word	0x200008c0

08006a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a40:	f000 f852 	bl	8006ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <prvIdleTask+0x28>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d9f9      	bls.n	8006a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a4c:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <prvIdleTask+0x2c>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a5c:	e7f0      	b.n	8006a40 <prvIdleTask+0x8>
 8006a5e:	bf00      	nop
 8006a60:	200007b0 	.word	0x200007b0
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a6e:	2300      	movs	r3, #0
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	e00c      	b.n	8006a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4a12      	ldr	r2, [pc, #72]	; (8006ac8 <prvInitialiseTaskLists+0x60>)
 8006a80:	4413      	add	r3, r2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe fb9d 	bl	80051c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b06      	cmp	r3, #6
 8006a92:	d9ef      	bls.n	8006a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a94:	480d      	ldr	r0, [pc, #52]	; (8006acc <prvInitialiseTaskLists+0x64>)
 8006a96:	f7fe fb94 	bl	80051c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a9a:	480d      	ldr	r0, [pc, #52]	; (8006ad0 <prvInitialiseTaskLists+0x68>)
 8006a9c:	f7fe fb91 	bl	80051c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006aa0:	480c      	ldr	r0, [pc, #48]	; (8006ad4 <prvInitialiseTaskLists+0x6c>)
 8006aa2:	f7fe fb8e 	bl	80051c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aa6:	480c      	ldr	r0, [pc, #48]	; (8006ad8 <prvInitialiseTaskLists+0x70>)
 8006aa8:	f7fe fb8b 	bl	80051c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006aac:	480b      	ldr	r0, [pc, #44]	; (8006adc <prvInitialiseTaskLists+0x74>)
 8006aae:	f7fe fb88 	bl	80051c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <prvInitialiseTaskLists+0x78>)
 8006ab4:	4a05      	ldr	r2, [pc, #20]	; (8006acc <prvInitialiseTaskLists+0x64>)
 8006ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <prvInitialiseTaskLists+0x7c>)
 8006aba:	4a05      	ldr	r2, [pc, #20]	; (8006ad0 <prvInitialiseTaskLists+0x68>)
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200007b0 	.word	0x200007b0
 8006acc:	2000083c 	.word	0x2000083c
 8006ad0:	20000850 	.word	0x20000850
 8006ad4:	2000086c 	.word	0x2000086c
 8006ad8:	20000880 	.word	0x20000880
 8006adc:	20000898 	.word	0x20000898
 8006ae0:	20000864 	.word	0x20000864
 8006ae4:	20000868 	.word	0x20000868

08006ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006aee:	e019      	b.n	8006b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006af0:	f000 fbc8 	bl	8007284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af4:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <prvCheckTasksWaitingTermination+0x50>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe fbe8 	bl	80052d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b06:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <prvCheckTasksWaitingTermination+0x54>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	4a0b      	ldr	r2, [pc, #44]	; (8006b3c <prvCheckTasksWaitingTermination+0x54>)
 8006b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	4a0a      	ldr	r2, [pc, #40]	; (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b1a:	f000 fbe3 	bl	80072e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f810 	bl	8006b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <prvCheckTasksWaitingTermination+0x58>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e1      	bne.n	8006af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000880 	.word	0x20000880
 8006b3c:	200008ac 	.word	0x200008ac
 8006b40:	20000894 	.word	0x20000894

08006b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	334c      	adds	r3, #76	; 0x4c
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 f8f3 	bl	8007d3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d108      	bne.n	8006b72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fd7b 	bl	8007660 <vPortFree>
				vPortFree( pxTCB );
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fd78 	bl	8007660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b70:	e018      	b.n	8006ba4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d103      	bne.n	8006b84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fd6f 	bl	8007660 <vPortFree>
	}
 8006b82:	e00f      	b.n	8006ba4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d00a      	beq.n	8006ba4 <prvDeleteTCB+0x60>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60fb      	str	r3, [r7, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <prvDeleteTCB+0x5e>
	}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <prvResetNextTaskUnblockTime+0x38>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bc4:	e008      	b.n	8006bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <prvResetNextTaskUnblockTime+0x38>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bd6:	6013      	str	r3, [r2, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	20000864 	.word	0x20000864
 8006be8:	200008cc 	.word	0x200008cc

08006bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <xTaskGetSchedulerState+0x34>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	e008      	b.n	8006c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c00:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <xTaskGetSchedulerState+0x38>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	607b      	str	r3, [r7, #4]
 8006c0c:	e001      	b.n	8006c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c12:	687b      	ldr	r3, [r7, #4]
	}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	200008b8 	.word	0x200008b8
 8006c24:	200008d4 	.word	0x200008d4

08006c28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d05e      	beq.n	8006cfc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c42:	4b31      	ldr	r3, [pc, #196]	; (8006d08 <xTaskPriorityInherit+0xe0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d24e      	bcs.n	8006cea <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	db06      	blt.n	8006c62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c54:	4b2c      	ldr	r3, [pc, #176]	; (8006d08 <xTaskPriorityInherit+0xe0>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	f1c3 0207 	rsb	r2, r3, #7
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6959      	ldr	r1, [r3, #20]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4a26      	ldr	r2, [pc, #152]	; (8006d0c <xTaskPriorityInherit+0xe4>)
 8006c74:	4413      	add	r3, r2
 8006c76:	4299      	cmp	r1, r3
 8006c78:	d12f      	bne.n	8006cda <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fb29 	bl	80052d6 <uxListRemove>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	2201      	movs	r2, #1
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	43da      	mvns	r2, r3
 8006c96:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <xTaskPriorityInherit+0xe8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	4a1c      	ldr	r2, [pc, #112]	; (8006d10 <xTaskPriorityInherit+0xe8>)
 8006c9e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ca0:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <xTaskPriorityInherit+0xe0>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	2201      	movs	r2, #1
 8006cb0:	409a      	lsls	r2, r3
 8006cb2:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <xTaskPriorityInherit+0xe8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <xTaskPriorityInherit+0xe8>)
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <xTaskPriorityInherit+0xe4>)
 8006cca:	441a      	add	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	f7fe faa2 	bl	800521c <vListInsertEnd>
 8006cd8:	e004      	b.n	8006ce4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <xTaskPriorityInherit+0xe0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e008      	b.n	8006cfc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <xTaskPriorityInherit+0xe0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d201      	bcs.n	8006cfc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
	}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	200007ac 	.word	0x200007ac
 8006d0c:	200007b0 	.word	0x200007b0
 8006d10:	200008b4 	.word	0x200008b4

08006d14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d06e      	beq.n	8006e08 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d2a:	4b3a      	ldr	r3, [pc, #232]	; (8006e14 <xTaskPriorityDisinherit+0x100>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d00a      	beq.n	8006d4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	60fb      	str	r3, [r7, #12]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60bb      	str	r3, [r7, #8]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6c:	1e5a      	subs	r2, r3, #1
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d044      	beq.n	8006e08 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d140      	bne.n	8006e08 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe faa3 	bl	80052d6 <uxListRemove>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d115      	bne.n	8006dc2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	491f      	ldr	r1, [pc, #124]	; (8006e18 <xTaskPriorityDisinherit+0x104>)
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	440b      	add	r3, r1
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xTaskPriorityDisinherit+0xae>
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	2201      	movs	r2, #1
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43da      	mvns	r2, r3
 8006db8:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <xTaskPriorityDisinherit+0x108>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <xTaskPriorityDisinherit+0x108>)
 8006dc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	f1c3 0207 	rsb	r2, r3, #7
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	2201      	movs	r2, #1
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <xTaskPriorityDisinherit+0x108>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	4a0d      	ldr	r2, [pc, #52]	; (8006e1c <xTaskPriorityDisinherit+0x108>)
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4a08      	ldr	r2, [pc, #32]	; (8006e18 <xTaskPriorityDisinherit+0x104>)
 8006df6:	441a      	add	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7fe fa0c 	bl	800521c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e04:	2301      	movs	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e08:	697b      	ldr	r3, [r7, #20]
	}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	200007ac 	.word	0x200007ac
 8006e18:	200007b0 	.word	0x200007b0
 8006e1c:	200008b4 	.word	0x200008b4

08006e20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d077      	beq.n	8006f28 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	60fb      	str	r3, [r7, #12]
}
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d902      	bls.n	8006e66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	e002      	b.n	8006e6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	69fa      	ldr	r2, [r7, #28]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d058      	beq.n	8006f28 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d153      	bne.n	8006f28 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e80:	4b2b      	ldr	r3, [pc, #172]	; (8006f30 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d10a      	bne.n	8006ea0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60bb      	str	r3, [r7, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db04      	blt.n	8006ebe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f1c3 0207 	rsb	r2, r3, #7
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	6959      	ldr	r1, [r3, #20]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4a19      	ldr	r2, [pc, #100]	; (8006f34 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006ece:	4413      	add	r3, r2
 8006ed0:	4299      	cmp	r1, r3
 8006ed2:	d129      	bne.n	8006f28 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe f9fc 	bl	80052d6 <uxListRemove>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	2201      	movs	r2, #1
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	43da      	mvns	r2, r3
 8006ef0:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	4a10      	ldr	r2, [pc, #64]	; (8006f38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ef8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	2201      	movs	r2, #1
 8006f00:	409a      	lsls	r2, r3
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4a06      	ldr	r2, [pc, #24]	; (8006f34 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006f1a:	441a      	add	r2, r3
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f7fe f97a 	bl	800521c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f28:	bf00      	nop
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	200007ac 	.word	0x200007ac
 8006f34:	200007b0 	.word	0x200007b0
 8006f38:	200008b4 	.word	0x200008b4

08006f3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006f48:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f4e:	3201      	adds	r2, #1
 8006f50:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006f52:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f54:	681b      	ldr	r3, [r3, #0]
	}
 8006f56:	4618      	mov	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	200007ac 	.word	0x200007ac

08006f64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f6e:	4b29      	ldr	r3, [pc, #164]	; (8007014 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f74:	4b28      	ldr	r3, [pc, #160]	; (8007018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe f9ab 	bl	80052d6 <uxListRemove>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f86:	4b24      	ldr	r3, [pc, #144]	; (8007018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	43da      	mvns	r2, r3
 8006f94:	4b21      	ldr	r3, [pc, #132]	; (800701c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	4a20      	ldr	r2, [pc, #128]	; (800701c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d10a      	bne.n	8006fbc <prvAddCurrentTaskToDelayedList+0x58>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fac:	4b1a      	ldr	r3, [pc, #104]	; (8007018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	481a      	ldr	r0, [pc, #104]	; (8007020 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fb6:	f7fe f931 	bl	800521c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fba:	e026      	b.n	800700a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d209      	bcs.n	8006fe8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd4:	4b13      	ldr	r3, [pc, #76]	; (8007024 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f7fe f93f 	bl	8005264 <vListInsert>
}
 8006fe6:	e010      	b.n	800700a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	f7fe f935 	bl	8005264 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	429a      	cmp	r2, r3
 8007002:	d202      	bcs.n	800700a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007004:	4a09      	ldr	r2, [pc, #36]	; (800702c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6013      	str	r3, [r2, #0]
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	200008b0 	.word	0x200008b0
 8007018:	200007ac 	.word	0x200007ac
 800701c:	200008b4 	.word	0x200008b4
 8007020:	20000898 	.word	0x20000898
 8007024:	20000868 	.word	0x20000868
 8007028:	20000864 	.word	0x20000864
 800702c:	200008cc 	.word	0x200008cc

08007030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3b04      	subs	r3, #4
 8007040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3b04      	subs	r3, #4
 800704e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f023 0201 	bic.w	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3b04      	subs	r3, #4
 800705e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007060:	4a0c      	ldr	r2, [pc, #48]	; (8007094 <pxPortInitialiseStack+0x64>)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3b14      	subs	r3, #20
 800706a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3b04      	subs	r3, #4
 8007076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f06f 0202 	mvn.w	r2, #2
 800707e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3b20      	subs	r3, #32
 8007084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	08007099 	.word	0x08007099

08007098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070a2:	4b12      	ldr	r3, [pc, #72]	; (80070ec <prvTaskExitError+0x54>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d00a      	beq.n	80070c2 <prvTaskExitError+0x2a>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	60fb      	str	r3, [r7, #12]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <prvTaskExitError+0x28>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	60bb      	str	r3, [r7, #8]
}
 80070d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070d6:	bf00      	nop
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0fc      	beq.n	80070d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	2000000c 	.word	0x2000000c

080070f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <pxCurrentTCBConst2>)
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	6808      	ldr	r0, [r1, #0]
 80070f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	f380 8809 	msr	PSP, r0
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f380 8811 	msr	BASEPRI, r0
 800710a:	4770      	bx	lr
 800710c:	f3af 8000 	nop.w

08007110 <pxCurrentTCBConst2>:
 8007110:	200007ac 	.word	0x200007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop

08007118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007118:	4808      	ldr	r0, [pc, #32]	; (800713c <prvPortStartFirstTask+0x24>)
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	6800      	ldr	r0, [r0, #0]
 800711e:	f380 8808 	msr	MSP, r0
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f380 8814 	msr	CONTROL, r0
 800712a:	b662      	cpsie	i
 800712c:	b661      	cpsie	f
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	df00      	svc	0
 8007138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800713a:	bf00      	nop
 800713c:	e000ed08 	.word	0xe000ed08

08007140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007146:	4b46      	ldr	r3, [pc, #280]	; (8007260 <xPortStartScheduler+0x120>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a46      	ldr	r2, [pc, #280]	; (8007264 <xPortStartScheduler+0x124>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d10a      	bne.n	8007166 <xPortStartScheduler+0x26>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	613b      	str	r3, [r7, #16]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007166:	4b3e      	ldr	r3, [pc, #248]	; (8007260 <xPortStartScheduler+0x120>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <xPortStartScheduler+0x128>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d10a      	bne.n	8007186 <xPortStartScheduler+0x46>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007186:	4b39      	ldr	r3, [pc, #228]	; (800726c <xPortStartScheduler+0x12c>)
 8007188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	22ff      	movs	r2, #255	; 0xff
 8007196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	4b31      	ldr	r3, [pc, #196]	; (8007270 <xPortStartScheduler+0x130>)
 80071ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071ae:	4b31      	ldr	r3, [pc, #196]	; (8007274 <xPortStartScheduler+0x134>)
 80071b0:	2207      	movs	r2, #7
 80071b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071b4:	e009      	b.n	80071ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80071b6:	4b2f      	ldr	r3, [pc, #188]	; (8007274 <xPortStartScheduler+0x134>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	4a2d      	ldr	r2, [pc, #180]	; (8007274 <xPortStartScheduler+0x134>)
 80071be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b80      	cmp	r3, #128	; 0x80
 80071d4:	d0ef      	beq.n	80071b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071d6:	4b27      	ldr	r3, [pc, #156]	; (8007274 <xPortStartScheduler+0x134>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f1c3 0307 	rsb	r3, r3, #7
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d00a      	beq.n	80071f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	60bb      	str	r3, [r7, #8]
}
 80071f4:	bf00      	nop
 80071f6:	e7fe      	b.n	80071f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071f8:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <xPortStartScheduler+0x134>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <xPortStartScheduler+0x134>)
 8007200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <xPortStartScheduler+0x134>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800720a:	4a1a      	ldr	r2, [pc, #104]	; (8007274 <xPortStartScheduler+0x134>)
 800720c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007216:	4b18      	ldr	r3, [pc, #96]	; (8007278 <xPortStartScheduler+0x138>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a17      	ldr	r2, [pc, #92]	; (8007278 <xPortStartScheduler+0x138>)
 800721c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <xPortStartScheduler+0x138>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a14      	ldr	r2, [pc, #80]	; (8007278 <xPortStartScheduler+0x138>)
 8007228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800722c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800722e:	f000 f8dd 	bl	80073ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007232:	4b12      	ldr	r3, [pc, #72]	; (800727c <xPortStartScheduler+0x13c>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007238:	f000 f8fc 	bl	8007434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <xPortStartScheduler+0x140>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0f      	ldr	r2, [pc, #60]	; (8007280 <xPortStartScheduler+0x140>)
 8007242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007248:	f7ff ff66 	bl	8007118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800724c:	f7ff fa88 	bl	8006760 <vTaskSwitchContext>
	prvTaskExitError();
 8007250:	f7ff ff22 	bl	8007098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	e000ed00 	.word	0xe000ed00
 8007264:	410fc271 	.word	0x410fc271
 8007268:	410fc270 	.word	0x410fc270
 800726c:	e000e400 	.word	0xe000e400
 8007270:	200008d8 	.word	0x200008d8
 8007274:	200008dc 	.word	0x200008dc
 8007278:	e000ed20 	.word	0xe000ed20
 800727c:	2000000c 	.word	0x2000000c
 8007280:	e000ef34 	.word	0xe000ef34

08007284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	607b      	str	r3, [r7, #4]
}
 800729c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <vPortEnterCritical+0x58>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3301      	adds	r3, #1
 80072a4:	4a0d      	ldr	r2, [pc, #52]	; (80072dc <vPortEnterCritical+0x58>)
 80072a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <vPortEnterCritical+0x58>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d10f      	bne.n	80072d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072b0:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <vPortEnterCritical+0x5c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	603b      	str	r3, [r7, #0]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vPortEnterCritical+0x4a>
	}
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	2000000c 	.word	0x2000000c
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <vPortExitCritical+0x50>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <vPortExitCritical+0x24>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	607b      	str	r3, [r7, #4]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <vPortExitCritical+0x50>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3b01      	subs	r3, #1
 800730e:	4a09      	ldr	r2, [pc, #36]	; (8007334 <vPortExitCritical+0x50>)
 8007310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <vPortExitCritical+0x50>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <vPortExitCritical+0x42>
 800731a:	2300      	movs	r3, #0
 800731c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	f383 8811 	msr	BASEPRI, r3
}
 8007324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	2000000c 	.word	0x2000000c
	...

08007340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007340:	f3ef 8009 	mrs	r0, PSP
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <pxCurrentTCBConst>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	f01e 0f10 	tst.w	lr, #16
 8007350:	bf08      	it	eq
 8007352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735a:	6010      	str	r0, [r2, #0]
 800735c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007364:	f380 8811 	msr	BASEPRI, r0
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f7ff f9f6 	bl	8006760 <vTaskSwitchContext>
 8007374:	f04f 0000 	mov.w	r0, #0
 8007378:	f380 8811 	msr	BASEPRI, r0
 800737c:	bc09      	pop	{r0, r3}
 800737e:	6819      	ldr	r1, [r3, #0]
 8007380:	6808      	ldr	r0, [r1, #0]
 8007382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007386:	f01e 0f10 	tst.w	lr, #16
 800738a:	bf08      	it	eq
 800738c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007390:	f380 8809 	msr	PSP, r0
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	f3af 8000 	nop.w

080073a0 <pxCurrentTCBConst>:
 80073a0:	200007ac 	.word	0x200007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop

080073a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	607b      	str	r3, [r7, #4]
}
 80073c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073c2:	f7ff f915 	bl	80065f0 <xTaskIncrementTick>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <SysTick_Handler+0x40>)
 80073ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	2300      	movs	r3, #0
 80073d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f383 8811 	msr	BASEPRI, r3
}
 80073de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	; (8007420 <vPortSetupTimerInterrupt+0x34>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073f6:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <vPortSetupTimerInterrupt+0x38>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <vPortSetupTimerInterrupt+0x3c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a0a      	ldr	r2, [pc, #40]	; (800742c <vPortSetupTimerInterrupt+0x40>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	099b      	lsrs	r3, r3, #6
 8007408:	4a09      	ldr	r2, [pc, #36]	; (8007430 <vPortSetupTimerInterrupt+0x44>)
 800740a:	3b01      	subs	r3, #1
 800740c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800740e:	4b04      	ldr	r3, [pc, #16]	; (8007420 <vPortSetupTimerInterrupt+0x34>)
 8007410:	2207      	movs	r2, #7
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	e000e010 	.word	0xe000e010
 8007424:	e000e018 	.word	0xe000e018
 8007428:	20000000 	.word	0x20000000
 800742c:	10624dd3 	.word	0x10624dd3
 8007430:	e000e014 	.word	0xe000e014

08007434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007444 <vPortEnableVFP+0x10>
 8007438:	6801      	ldr	r1, [r0, #0]
 800743a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800743e:	6001      	str	r1, [r0, #0]
 8007440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007442:	bf00      	nop
 8007444:	e000ed88 	.word	0xe000ed88

08007448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800744e:	f3ef 8305 	mrs	r3, IPSR
 8007452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d914      	bls.n	8007484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800745a:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <vPortValidateInterruptPriority+0x70>)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007464:	4b15      	ldr	r3, [pc, #84]	; (80074bc <vPortValidateInterruptPriority+0x74>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	7afa      	ldrb	r2, [r7, #11]
 800746a:	429a      	cmp	r2, r3
 800746c:	d20a      	bcs.n	8007484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	607b      	str	r3, [r7, #4]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007484:	4b0e      	ldr	r3, [pc, #56]	; (80074c0 <vPortValidateInterruptPriority+0x78>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800748c:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <vPortValidateInterruptPriority+0x7c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d90a      	bls.n	80074aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	603b      	str	r3, [r7, #0]
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <vPortValidateInterruptPriority+0x60>
	}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	e000e3f0 	.word	0xe000e3f0
 80074bc:	200008d8 	.word	0x200008d8
 80074c0:	e000ed0c 	.word	0xe000ed0c
 80074c4:	200008dc 	.word	0x200008dc

080074c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074d4:	f7fe ffe2 	bl	800649c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074d8:	4b5b      	ldr	r3, [pc, #364]	; (8007648 <pvPortMalloc+0x180>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074e0:	f000 f920 	bl	8007724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074e4:	4b59      	ldr	r3, [pc, #356]	; (800764c <pvPortMalloc+0x184>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f040 8093 	bne.w	8007618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01d      	beq.n	8007534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80074f8:	2208      	movs	r2, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d014      	beq.n	8007534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	3308      	adds	r3, #8
 8007512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <pvPortMalloc+0x6c>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	617b      	str	r3, [r7, #20]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d06e      	beq.n	8007618 <pvPortMalloc+0x150>
 800753a:	4b45      	ldr	r3, [pc, #276]	; (8007650 <pvPortMalloc+0x188>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	429a      	cmp	r2, r3
 8007542:	d869      	bhi.n	8007618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007544:	4b43      	ldr	r3, [pc, #268]	; (8007654 <pvPortMalloc+0x18c>)
 8007546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007548:	4b42      	ldr	r3, [pc, #264]	; (8007654 <pvPortMalloc+0x18c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800754e:	e004      	b.n	800755a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d903      	bls.n	800756c <pvPortMalloc+0xa4>
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1f1      	bne.n	8007550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800756c:	4b36      	ldr	r3, [pc, #216]	; (8007648 <pvPortMalloc+0x180>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007572:	429a      	cmp	r2, r3
 8007574:	d050      	beq.n	8007618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2208      	movs	r2, #8
 800757c:	4413      	add	r3, r2
 800757e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1ad2      	subs	r2, r2, r3
 8007590:	2308      	movs	r3, #8
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	429a      	cmp	r2, r3
 8007596:	d91f      	bls.n	80075d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <pvPortMalloc+0xf8>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	613b      	str	r3, [r7, #16]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075d2:	69b8      	ldr	r0, [r7, #24]
 80075d4:	f000 f908 	bl	80077e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075d8:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <pvPortMalloc+0x188>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <pvPortMalloc+0x188>)
 80075e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075e6:	4b1a      	ldr	r3, [pc, #104]	; (8007650 <pvPortMalloc+0x188>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	4b1b      	ldr	r3, [pc, #108]	; (8007658 <pvPortMalloc+0x190>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d203      	bcs.n	80075fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075f2:	4b17      	ldr	r3, [pc, #92]	; (8007650 <pvPortMalloc+0x188>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a18      	ldr	r2, [pc, #96]	; (8007658 <pvPortMalloc+0x190>)
 80075f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	4b13      	ldr	r3, [pc, #76]	; (800764c <pvPortMalloc+0x184>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	431a      	orrs	r2, r3
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800760e:	4b13      	ldr	r3, [pc, #76]	; (800765c <pvPortMalloc+0x194>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	4a11      	ldr	r2, [pc, #68]	; (800765c <pvPortMalloc+0x194>)
 8007616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007618:	f7fe ff4e 	bl	80064b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <pvPortMalloc+0x174>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <pvPortMalloc+0x172>
	return pvReturn;
 800763c:	69fb      	ldr	r3, [r7, #28]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3728      	adds	r7, #40	; 0x28
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20002ff8 	.word	0x20002ff8
 800764c:	2000300c 	.word	0x2000300c
 8007650:	20002ffc 	.word	0x20002ffc
 8007654:	20002ff0 	.word	0x20002ff0
 8007658:	20003000 	.word	0x20003000
 800765c:	20003004 	.word	0x20003004

08007660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d04d      	beq.n	800770e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007672:	2308      	movs	r3, #8
 8007674:	425b      	negs	r3, r3
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	4413      	add	r3, r2
 800767a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	4b24      	ldr	r3, [pc, #144]	; (8007718 <vPortFree+0xb8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <vPortFree+0x44>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	60fb      	str	r3, [r7, #12]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <vPortFree+0x62>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60bb      	str	r3, [r7, #8]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <vPortFree+0xb8>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4013      	ands	r3, r2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01e      	beq.n	800770e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d11a      	bne.n	800770e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <vPortFree+0xb8>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	43db      	mvns	r3, r3
 80076e2:	401a      	ands	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076e8:	f7fe fed8 	bl	800649c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <vPortFree+0xbc>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4413      	add	r3, r2
 80076f6:	4a09      	ldr	r2, [pc, #36]	; (800771c <vPortFree+0xbc>)
 80076f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076fa:	6938      	ldr	r0, [r7, #16]
 80076fc:	f000 f874 	bl	80077e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <vPortFree+0xc0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	4a06      	ldr	r2, [pc, #24]	; (8007720 <vPortFree+0xc0>)
 8007708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800770a:	f7fe fed5 	bl	80064b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800770e:	bf00      	nop
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	2000300c 	.word	0x2000300c
 800771c:	20002ffc 	.word	0x20002ffc
 8007720:	20003008 	.word	0x20003008

08007724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800772a:	f242 7310 	movw	r3, #10000	; 0x2710
 800772e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007730:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <prvHeapInit+0xac>)
 8007732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00c      	beq.n	8007758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3307      	adds	r3, #7
 8007742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0307 	bic.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	4a1f      	ldr	r2, [pc, #124]	; (80077d0 <prvHeapInit+0xac>)
 8007754:	4413      	add	r3, r2
 8007756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800775c:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <prvHeapInit+0xb0>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <prvHeapInit+0xb0>)
 8007764:	2200      	movs	r2, #0
 8007766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	4413      	add	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007770:	2208      	movs	r2, #8
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	1a9b      	subs	r3, r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <prvHeapInit+0xb4>)
 8007784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <prvHeapInit+0xb4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <prvHeapInit+0xb4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077a4:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <prvHeapInit+0xb4>)
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <prvHeapInit+0xb8>)
 80077b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <prvHeapInit+0xbc>)
 80077ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077bc:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <prvHeapInit+0xc0>)
 80077be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	200008e0 	.word	0x200008e0
 80077d4:	20002ff0 	.word	0x20002ff0
 80077d8:	20002ff8 	.word	0x20002ff8
 80077dc:	20003000 	.word	0x20003000
 80077e0:	20002ffc 	.word	0x20002ffc
 80077e4:	2000300c 	.word	0x2000300c

080077e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077f0:	4b28      	ldr	r3, [pc, #160]	; (8007894 <prvInsertBlockIntoFreeList+0xac>)
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e002      	b.n	80077fc <prvInsertBlockIntoFreeList+0x14>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	429a      	cmp	r2, r3
 8007804:	d8f7      	bhi.n	80077f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	4413      	add	r3, r2
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d108      	bne.n	800782a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	441a      	add	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	441a      	add	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d118      	bne.n	8007870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	4b15      	ldr	r3, [pc, #84]	; (8007898 <prvInsertBlockIntoFreeList+0xb0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d00d      	beq.n	8007866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e008      	b.n	8007878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <prvInsertBlockIntoFreeList+0xb0>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e003      	b.n	8007878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	429a      	cmp	r2, r3
 800787e:	d002      	beq.n	8007886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20002ff0 	.word	0x20002ff0
 8007898:	20002ff8 	.word	0x20002ff8

0800789c <atof>:
 800789c:	2100      	movs	r1, #0
 800789e:	f001 b92d 	b.w	8008afc <strtod>

080078a2 <atoi>:
 80078a2:	220a      	movs	r2, #10
 80078a4:	2100      	movs	r1, #0
 80078a6:	f001 b9b7 	b.w	8008c18 <strtol>
	...

080078ac <__errno>:
 80078ac:	4b01      	ldr	r3, [pc, #4]	; (80078b4 <__errno+0x8>)
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20000010 	.word	0x20000010

080078b8 <std>:
 80078b8:	2300      	movs	r3, #0
 80078ba:	b510      	push	{r4, lr}
 80078bc:	4604      	mov	r4, r0
 80078be:	e9c0 3300 	strd	r3, r3, [r0]
 80078c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078c6:	6083      	str	r3, [r0, #8]
 80078c8:	8181      	strh	r1, [r0, #12]
 80078ca:	6643      	str	r3, [r0, #100]	; 0x64
 80078cc:	81c2      	strh	r2, [r0, #14]
 80078ce:	6183      	str	r3, [r0, #24]
 80078d0:	4619      	mov	r1, r3
 80078d2:	2208      	movs	r2, #8
 80078d4:	305c      	adds	r0, #92	; 0x5c
 80078d6:	f000 f923 	bl	8007b20 <memset>
 80078da:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <std+0x38>)
 80078dc:	6263      	str	r3, [r4, #36]	; 0x24
 80078de:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <std+0x3c>)
 80078e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <std+0x40>)
 80078e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078e6:	4b05      	ldr	r3, [pc, #20]	; (80078fc <std+0x44>)
 80078e8:	6224      	str	r4, [r4, #32]
 80078ea:	6323      	str	r3, [r4, #48]	; 0x30
 80078ec:	bd10      	pop	{r4, pc}
 80078ee:	bf00      	nop
 80078f0:	08007e15 	.word	0x08007e15
 80078f4:	08007e37 	.word	0x08007e37
 80078f8:	08007e6f 	.word	0x08007e6f
 80078fc:	08007e93 	.word	0x08007e93

08007900 <_cleanup_r>:
 8007900:	4901      	ldr	r1, [pc, #4]	; (8007908 <_cleanup_r+0x8>)
 8007902:	f000 b8af 	b.w	8007a64 <_fwalk_reent>
 8007906:	bf00      	nop
 8007908:	08008db9 	.word	0x08008db9

0800790c <__sfmoreglue>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	2268      	movs	r2, #104	; 0x68
 8007910:	1e4d      	subs	r5, r1, #1
 8007912:	4355      	muls	r5, r2
 8007914:	460e      	mov	r6, r1
 8007916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800791a:	f000 f975 	bl	8007c08 <_malloc_r>
 800791e:	4604      	mov	r4, r0
 8007920:	b140      	cbz	r0, 8007934 <__sfmoreglue+0x28>
 8007922:	2100      	movs	r1, #0
 8007924:	e9c0 1600 	strd	r1, r6, [r0]
 8007928:	300c      	adds	r0, #12
 800792a:	60a0      	str	r0, [r4, #8]
 800792c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007930:	f000 f8f6 	bl	8007b20 <memset>
 8007934:	4620      	mov	r0, r4
 8007936:	bd70      	pop	{r4, r5, r6, pc}

08007938 <__sfp_lock_acquire>:
 8007938:	4801      	ldr	r0, [pc, #4]	; (8007940 <__sfp_lock_acquire+0x8>)
 800793a:	f000 b8d8 	b.w	8007aee <__retarget_lock_acquire_recursive>
 800793e:	bf00      	nop
 8007940:	20003011 	.word	0x20003011

08007944 <__sfp_lock_release>:
 8007944:	4801      	ldr	r0, [pc, #4]	; (800794c <__sfp_lock_release+0x8>)
 8007946:	f000 b8d3 	b.w	8007af0 <__retarget_lock_release_recursive>
 800794a:	bf00      	nop
 800794c:	20003011 	.word	0x20003011

08007950 <__sinit_lock_acquire>:
 8007950:	4801      	ldr	r0, [pc, #4]	; (8007958 <__sinit_lock_acquire+0x8>)
 8007952:	f000 b8cc 	b.w	8007aee <__retarget_lock_acquire_recursive>
 8007956:	bf00      	nop
 8007958:	20003012 	.word	0x20003012

0800795c <__sinit_lock_release>:
 800795c:	4801      	ldr	r0, [pc, #4]	; (8007964 <__sinit_lock_release+0x8>)
 800795e:	f000 b8c7 	b.w	8007af0 <__retarget_lock_release_recursive>
 8007962:	bf00      	nop
 8007964:	20003012 	.word	0x20003012

08007968 <__sinit>:
 8007968:	b510      	push	{r4, lr}
 800796a:	4604      	mov	r4, r0
 800796c:	f7ff fff0 	bl	8007950 <__sinit_lock_acquire>
 8007970:	69a3      	ldr	r3, [r4, #24]
 8007972:	b11b      	cbz	r3, 800797c <__sinit+0x14>
 8007974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007978:	f7ff bff0 	b.w	800795c <__sinit_lock_release>
 800797c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007980:	6523      	str	r3, [r4, #80]	; 0x50
 8007982:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <__sinit+0x68>)
 8007984:	4a13      	ldr	r2, [pc, #76]	; (80079d4 <__sinit+0x6c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	62a2      	str	r2, [r4, #40]	; 0x28
 800798a:	42a3      	cmp	r3, r4
 800798c:	bf04      	itt	eq
 800798e:	2301      	moveq	r3, #1
 8007990:	61a3      	streq	r3, [r4, #24]
 8007992:	4620      	mov	r0, r4
 8007994:	f000 f820 	bl	80079d8 <__sfp>
 8007998:	6060      	str	r0, [r4, #4]
 800799a:	4620      	mov	r0, r4
 800799c:	f000 f81c 	bl	80079d8 <__sfp>
 80079a0:	60a0      	str	r0, [r4, #8]
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 f818 	bl	80079d8 <__sfp>
 80079a8:	2200      	movs	r2, #0
 80079aa:	60e0      	str	r0, [r4, #12]
 80079ac:	2104      	movs	r1, #4
 80079ae:	6860      	ldr	r0, [r4, #4]
 80079b0:	f7ff ff82 	bl	80078b8 <std>
 80079b4:	68a0      	ldr	r0, [r4, #8]
 80079b6:	2201      	movs	r2, #1
 80079b8:	2109      	movs	r1, #9
 80079ba:	f7ff ff7d 	bl	80078b8 <std>
 80079be:	68e0      	ldr	r0, [r4, #12]
 80079c0:	2202      	movs	r2, #2
 80079c2:	2112      	movs	r1, #18
 80079c4:	f7ff ff78 	bl	80078b8 <std>
 80079c8:	2301      	movs	r3, #1
 80079ca:	61a3      	str	r3, [r4, #24]
 80079cc:	e7d2      	b.n	8007974 <__sinit+0xc>
 80079ce:	bf00      	nop
 80079d0:	0800aa08 	.word	0x0800aa08
 80079d4:	08007901 	.word	0x08007901

080079d8 <__sfp>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	4607      	mov	r7, r0
 80079dc:	f7ff ffac 	bl	8007938 <__sfp_lock_acquire>
 80079e0:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <__sfp+0x84>)
 80079e2:	681e      	ldr	r6, [r3, #0]
 80079e4:	69b3      	ldr	r3, [r6, #24]
 80079e6:	b913      	cbnz	r3, 80079ee <__sfp+0x16>
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7ff ffbd 	bl	8007968 <__sinit>
 80079ee:	3648      	adds	r6, #72	; 0x48
 80079f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	d503      	bpl.n	8007a00 <__sfp+0x28>
 80079f8:	6833      	ldr	r3, [r6, #0]
 80079fa:	b30b      	cbz	r3, 8007a40 <__sfp+0x68>
 80079fc:	6836      	ldr	r6, [r6, #0]
 80079fe:	e7f7      	b.n	80079f0 <__sfp+0x18>
 8007a00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a04:	b9d5      	cbnz	r5, 8007a3c <__sfp+0x64>
 8007a06:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <__sfp+0x88>)
 8007a08:	60e3      	str	r3, [r4, #12]
 8007a0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a0e:	6665      	str	r5, [r4, #100]	; 0x64
 8007a10:	f000 f86c 	bl	8007aec <__retarget_lock_init_recursive>
 8007a14:	f7ff ff96 	bl	8007944 <__sfp_lock_release>
 8007a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a20:	6025      	str	r5, [r4, #0]
 8007a22:	61a5      	str	r5, [r4, #24]
 8007a24:	2208      	movs	r2, #8
 8007a26:	4629      	mov	r1, r5
 8007a28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a2c:	f000 f878 	bl	8007b20 <memset>
 8007a30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a38:	4620      	mov	r0, r4
 8007a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a3c:	3468      	adds	r4, #104	; 0x68
 8007a3e:	e7d9      	b.n	80079f4 <__sfp+0x1c>
 8007a40:	2104      	movs	r1, #4
 8007a42:	4638      	mov	r0, r7
 8007a44:	f7ff ff62 	bl	800790c <__sfmoreglue>
 8007a48:	4604      	mov	r4, r0
 8007a4a:	6030      	str	r0, [r6, #0]
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d1d5      	bne.n	80079fc <__sfp+0x24>
 8007a50:	f7ff ff78 	bl	8007944 <__sfp_lock_release>
 8007a54:	230c      	movs	r3, #12
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	e7ee      	b.n	8007a38 <__sfp+0x60>
 8007a5a:	bf00      	nop
 8007a5c:	0800aa08 	.word	0x0800aa08
 8007a60:	ffff0001 	.word	0xffff0001

08007a64 <_fwalk_reent>:
 8007a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a68:	4606      	mov	r6, r0
 8007a6a:	4688      	mov	r8, r1
 8007a6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a70:	2700      	movs	r7, #0
 8007a72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a76:	f1b9 0901 	subs.w	r9, r9, #1
 8007a7a:	d505      	bpl.n	8007a88 <_fwalk_reent+0x24>
 8007a7c:	6824      	ldr	r4, [r4, #0]
 8007a7e:	2c00      	cmp	r4, #0
 8007a80:	d1f7      	bne.n	8007a72 <_fwalk_reent+0xe>
 8007a82:	4638      	mov	r0, r7
 8007a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a88:	89ab      	ldrh	r3, [r5, #12]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d907      	bls.n	8007a9e <_fwalk_reent+0x3a>
 8007a8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a92:	3301      	adds	r3, #1
 8007a94:	d003      	beq.n	8007a9e <_fwalk_reent+0x3a>
 8007a96:	4629      	mov	r1, r5
 8007a98:	4630      	mov	r0, r6
 8007a9a:	47c0      	blx	r8
 8007a9c:	4307      	orrs	r7, r0
 8007a9e:	3568      	adds	r5, #104	; 0x68
 8007aa0:	e7e9      	b.n	8007a76 <_fwalk_reent+0x12>
	...

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4d0d      	ldr	r5, [pc, #52]	; (8007adc <__libc_init_array+0x38>)
 8007aa8:	4c0d      	ldr	r4, [pc, #52]	; (8007ae0 <__libc_init_array+0x3c>)
 8007aaa:	1b64      	subs	r4, r4, r5
 8007aac:	10a4      	asrs	r4, r4, #2
 8007aae:	2600      	movs	r6, #0
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	4d0b      	ldr	r5, [pc, #44]	; (8007ae4 <__libc_init_array+0x40>)
 8007ab6:	4c0c      	ldr	r4, [pc, #48]	; (8007ae8 <__libc_init_array+0x44>)
 8007ab8:	f002 fefe 	bl	800a8b8 <_init>
 8007abc:	1b64      	subs	r4, r4, r5
 8007abe:	10a4      	asrs	r4, r4, #2
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007acc:	4798      	blx	r3
 8007ace:	3601      	adds	r6, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad6:	4798      	blx	r3
 8007ad8:	3601      	adds	r6, #1
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	0800ade0 	.word	0x0800ade0
 8007ae0:	0800ade0 	.word	0x0800ade0
 8007ae4:	0800ade0 	.word	0x0800ade0
 8007ae8:	0800ade4 	.word	0x0800ade4

08007aec <__retarget_lock_init_recursive>:
 8007aec:	4770      	bx	lr

08007aee <__retarget_lock_acquire_recursive>:
 8007aee:	4770      	bx	lr

08007af0 <__retarget_lock_release_recursive>:
 8007af0:	4770      	bx	lr
	...

08007af4 <malloc>:
 8007af4:	4b02      	ldr	r3, [pc, #8]	; (8007b00 <malloc+0xc>)
 8007af6:	4601      	mov	r1, r0
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	f000 b885 	b.w	8007c08 <_malloc_r>
 8007afe:	bf00      	nop
 8007b00:	20000010 	.word	0x20000010

08007b04 <memcpy>:
 8007b04:	440a      	add	r2, r1
 8007b06:	4291      	cmp	r1, r2
 8007b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b0c:	d100      	bne.n	8007b10 <memcpy+0xc>
 8007b0e:	4770      	bx	lr
 8007b10:	b510      	push	{r4, lr}
 8007b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	d1f9      	bne.n	8007b12 <memcpy+0xe>
 8007b1e:	bd10      	pop	{r4, pc}

08007b20 <memset>:
 8007b20:	4402      	add	r2, r0
 8007b22:	4603      	mov	r3, r0
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d100      	bne.n	8007b2a <memset+0xa>
 8007b28:	4770      	bx	lr
 8007b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2e:	e7f9      	b.n	8007b24 <memset+0x4>

08007b30 <_free_r>:
 8007b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b32:	2900      	cmp	r1, #0
 8007b34:	d044      	beq.n	8007bc0 <_free_r+0x90>
 8007b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b3a:	9001      	str	r0, [sp, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b42:	bfb8      	it	lt
 8007b44:	18e4      	addlt	r4, r4, r3
 8007b46:	f001 fd19 	bl	800957c <__malloc_lock>
 8007b4a:	4a1e      	ldr	r2, [pc, #120]	; (8007bc4 <_free_r+0x94>)
 8007b4c:	9801      	ldr	r0, [sp, #4]
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	b933      	cbnz	r3, 8007b60 <_free_r+0x30>
 8007b52:	6063      	str	r3, [r4, #4]
 8007b54:	6014      	str	r4, [r2, #0]
 8007b56:	b003      	add	sp, #12
 8007b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b5c:	f001 bd14 	b.w	8009588 <__malloc_unlock>
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d908      	bls.n	8007b76 <_free_r+0x46>
 8007b64:	6825      	ldr	r5, [r4, #0]
 8007b66:	1961      	adds	r1, r4, r5
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf01      	itttt	eq
 8007b6c:	6819      	ldreq	r1, [r3, #0]
 8007b6e:	685b      	ldreq	r3, [r3, #4]
 8007b70:	1949      	addeq	r1, r1, r5
 8007b72:	6021      	streq	r1, [r4, #0]
 8007b74:	e7ed      	b.n	8007b52 <_free_r+0x22>
 8007b76:	461a      	mov	r2, r3
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	b10b      	cbz	r3, 8007b80 <_free_r+0x50>
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d9fa      	bls.n	8007b76 <_free_r+0x46>
 8007b80:	6811      	ldr	r1, [r2, #0]
 8007b82:	1855      	adds	r5, r2, r1
 8007b84:	42a5      	cmp	r5, r4
 8007b86:	d10b      	bne.n	8007ba0 <_free_r+0x70>
 8007b88:	6824      	ldr	r4, [r4, #0]
 8007b8a:	4421      	add	r1, r4
 8007b8c:	1854      	adds	r4, r2, r1
 8007b8e:	42a3      	cmp	r3, r4
 8007b90:	6011      	str	r1, [r2, #0]
 8007b92:	d1e0      	bne.n	8007b56 <_free_r+0x26>
 8007b94:	681c      	ldr	r4, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	6053      	str	r3, [r2, #4]
 8007b9a:	4421      	add	r1, r4
 8007b9c:	6011      	str	r1, [r2, #0]
 8007b9e:	e7da      	b.n	8007b56 <_free_r+0x26>
 8007ba0:	d902      	bls.n	8007ba8 <_free_r+0x78>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	6003      	str	r3, [r0, #0]
 8007ba6:	e7d6      	b.n	8007b56 <_free_r+0x26>
 8007ba8:	6825      	ldr	r5, [r4, #0]
 8007baa:	1961      	adds	r1, r4, r5
 8007bac:	428b      	cmp	r3, r1
 8007bae:	bf04      	itt	eq
 8007bb0:	6819      	ldreq	r1, [r3, #0]
 8007bb2:	685b      	ldreq	r3, [r3, #4]
 8007bb4:	6063      	str	r3, [r4, #4]
 8007bb6:	bf04      	itt	eq
 8007bb8:	1949      	addeq	r1, r1, r5
 8007bba:	6021      	streq	r1, [r4, #0]
 8007bbc:	6054      	str	r4, [r2, #4]
 8007bbe:	e7ca      	b.n	8007b56 <_free_r+0x26>
 8007bc0:	b003      	add	sp, #12
 8007bc2:	bd30      	pop	{r4, r5, pc}
 8007bc4:	20003014 	.word	0x20003014

08007bc8 <sbrk_aligned>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	4e0e      	ldr	r6, [pc, #56]	; (8007c04 <sbrk_aligned+0x3c>)
 8007bcc:	460c      	mov	r4, r1
 8007bce:	6831      	ldr	r1, [r6, #0]
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	b911      	cbnz	r1, 8007bda <sbrk_aligned+0x12>
 8007bd4:	f000 f90e 	bl	8007df4 <_sbrk_r>
 8007bd8:	6030      	str	r0, [r6, #0]
 8007bda:	4621      	mov	r1, r4
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f000 f909 	bl	8007df4 <_sbrk_r>
 8007be2:	1c43      	adds	r3, r0, #1
 8007be4:	d00a      	beq.n	8007bfc <sbrk_aligned+0x34>
 8007be6:	1cc4      	adds	r4, r0, #3
 8007be8:	f024 0403 	bic.w	r4, r4, #3
 8007bec:	42a0      	cmp	r0, r4
 8007bee:	d007      	beq.n	8007c00 <sbrk_aligned+0x38>
 8007bf0:	1a21      	subs	r1, r4, r0
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 f8fe 	bl	8007df4 <_sbrk_r>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d101      	bne.n	8007c00 <sbrk_aligned+0x38>
 8007bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8007c00:	4620      	mov	r0, r4
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	20003018 	.word	0x20003018

08007c08 <_malloc_r>:
 8007c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	1ccd      	adds	r5, r1, #3
 8007c0e:	f025 0503 	bic.w	r5, r5, #3
 8007c12:	3508      	adds	r5, #8
 8007c14:	2d0c      	cmp	r5, #12
 8007c16:	bf38      	it	cc
 8007c18:	250c      	movcc	r5, #12
 8007c1a:	2d00      	cmp	r5, #0
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	db01      	blt.n	8007c24 <_malloc_r+0x1c>
 8007c20:	42a9      	cmp	r1, r5
 8007c22:	d905      	bls.n	8007c30 <_malloc_r+0x28>
 8007c24:	230c      	movs	r3, #12
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	2600      	movs	r6, #0
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c30:	4e2e      	ldr	r6, [pc, #184]	; (8007cec <_malloc_r+0xe4>)
 8007c32:	f001 fca3 	bl	800957c <__malloc_lock>
 8007c36:	6833      	ldr	r3, [r6, #0]
 8007c38:	461c      	mov	r4, r3
 8007c3a:	bb34      	cbnz	r4, 8007c8a <_malloc_r+0x82>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7ff ffc2 	bl	8007bc8 <sbrk_aligned>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	4604      	mov	r4, r0
 8007c48:	d14d      	bne.n	8007ce6 <_malloc_r+0xde>
 8007c4a:	6834      	ldr	r4, [r6, #0]
 8007c4c:	4626      	mov	r6, r4
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d140      	bne.n	8007cd4 <_malloc_r+0xcc>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	4631      	mov	r1, r6
 8007c56:	4638      	mov	r0, r7
 8007c58:	eb04 0803 	add.w	r8, r4, r3
 8007c5c:	f000 f8ca 	bl	8007df4 <_sbrk_r>
 8007c60:	4580      	cmp	r8, r0
 8007c62:	d13a      	bne.n	8007cda <_malloc_r+0xd2>
 8007c64:	6821      	ldr	r1, [r4, #0]
 8007c66:	3503      	adds	r5, #3
 8007c68:	1a6d      	subs	r5, r5, r1
 8007c6a:	f025 0503 	bic.w	r5, r5, #3
 8007c6e:	3508      	adds	r5, #8
 8007c70:	2d0c      	cmp	r5, #12
 8007c72:	bf38      	it	cc
 8007c74:	250c      	movcc	r5, #12
 8007c76:	4629      	mov	r1, r5
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7ff ffa5 	bl	8007bc8 <sbrk_aligned>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d02b      	beq.n	8007cda <_malloc_r+0xd2>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	442b      	add	r3, r5
 8007c86:	6023      	str	r3, [r4, #0]
 8007c88:	e00e      	b.n	8007ca8 <_malloc_r+0xa0>
 8007c8a:	6822      	ldr	r2, [r4, #0]
 8007c8c:	1b52      	subs	r2, r2, r5
 8007c8e:	d41e      	bmi.n	8007cce <_malloc_r+0xc6>
 8007c90:	2a0b      	cmp	r2, #11
 8007c92:	d916      	bls.n	8007cc2 <_malloc_r+0xba>
 8007c94:	1961      	adds	r1, r4, r5
 8007c96:	42a3      	cmp	r3, r4
 8007c98:	6025      	str	r5, [r4, #0]
 8007c9a:	bf18      	it	ne
 8007c9c:	6059      	strne	r1, [r3, #4]
 8007c9e:	6863      	ldr	r3, [r4, #4]
 8007ca0:	bf08      	it	eq
 8007ca2:	6031      	streq	r1, [r6, #0]
 8007ca4:	5162      	str	r2, [r4, r5]
 8007ca6:	604b      	str	r3, [r1, #4]
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f104 060b 	add.w	r6, r4, #11
 8007cae:	f001 fc6b 	bl	8009588 <__malloc_unlock>
 8007cb2:	f026 0607 	bic.w	r6, r6, #7
 8007cb6:	1d23      	adds	r3, r4, #4
 8007cb8:	1af2      	subs	r2, r6, r3
 8007cba:	d0b6      	beq.n	8007c2a <_malloc_r+0x22>
 8007cbc:	1b9b      	subs	r3, r3, r6
 8007cbe:	50a3      	str	r3, [r4, r2]
 8007cc0:	e7b3      	b.n	8007c2a <_malloc_r+0x22>
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	bf0c      	ite	eq
 8007cc8:	6032      	streq	r2, [r6, #0]
 8007cca:	605a      	strne	r2, [r3, #4]
 8007ccc:	e7ec      	b.n	8007ca8 <_malloc_r+0xa0>
 8007cce:	4623      	mov	r3, r4
 8007cd0:	6864      	ldr	r4, [r4, #4]
 8007cd2:	e7b2      	b.n	8007c3a <_malloc_r+0x32>
 8007cd4:	4634      	mov	r4, r6
 8007cd6:	6876      	ldr	r6, [r6, #4]
 8007cd8:	e7b9      	b.n	8007c4e <_malloc_r+0x46>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	4638      	mov	r0, r7
 8007ce0:	f001 fc52 	bl	8009588 <__malloc_unlock>
 8007ce4:	e7a1      	b.n	8007c2a <_malloc_r+0x22>
 8007ce6:	6025      	str	r5, [r4, #0]
 8007ce8:	e7de      	b.n	8007ca8 <_malloc_r+0xa0>
 8007cea:	bf00      	nop
 8007cec:	20003014 	.word	0x20003014

08007cf0 <iprintf>:
 8007cf0:	b40f      	push	{r0, r1, r2, r3}
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <iprintf+0x2c>)
 8007cf4:	b513      	push	{r0, r1, r4, lr}
 8007cf6:	681c      	ldr	r4, [r3, #0]
 8007cf8:	b124      	cbz	r4, 8007d04 <iprintf+0x14>
 8007cfa:	69a3      	ldr	r3, [r4, #24]
 8007cfc:	b913      	cbnz	r3, 8007d04 <iprintf+0x14>
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f7ff fe32 	bl	8007968 <__sinit>
 8007d04:	ab05      	add	r3, sp, #20
 8007d06:	9a04      	ldr	r2, [sp, #16]
 8007d08:	68a1      	ldr	r1, [r4, #8]
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f002 f941 	bl	8009f94 <_vfiprintf_r>
 8007d12:	b002      	add	sp, #8
 8007d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d18:	b004      	add	sp, #16
 8007d1a:	4770      	bx	lr
 8007d1c:	20000010 	.word	0x20000010

08007d20 <cleanup_glue>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	6809      	ldr	r1, [r1, #0]
 8007d26:	4605      	mov	r5, r0
 8007d28:	b109      	cbz	r1, 8007d2e <cleanup_glue+0xe>
 8007d2a:	f7ff fff9 	bl	8007d20 <cleanup_glue>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d36:	f7ff befb 	b.w	8007b30 <_free_r>
	...

08007d3c <_reclaim_reent>:
 8007d3c:	4b2c      	ldr	r3, [pc, #176]	; (8007df0 <_reclaim_reent+0xb4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4283      	cmp	r3, r0
 8007d42:	b570      	push	{r4, r5, r6, lr}
 8007d44:	4604      	mov	r4, r0
 8007d46:	d051      	beq.n	8007dec <_reclaim_reent+0xb0>
 8007d48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d4a:	b143      	cbz	r3, 8007d5e <_reclaim_reent+0x22>
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d14a      	bne.n	8007de8 <_reclaim_reent+0xac>
 8007d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d54:	6819      	ldr	r1, [r3, #0]
 8007d56:	b111      	cbz	r1, 8007d5e <_reclaim_reent+0x22>
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7ff fee9 	bl	8007b30 <_free_r>
 8007d5e:	6961      	ldr	r1, [r4, #20]
 8007d60:	b111      	cbz	r1, 8007d68 <_reclaim_reent+0x2c>
 8007d62:	4620      	mov	r0, r4
 8007d64:	f7ff fee4 	bl	8007b30 <_free_r>
 8007d68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d6a:	b111      	cbz	r1, 8007d72 <_reclaim_reent+0x36>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f7ff fedf 	bl	8007b30 <_free_r>
 8007d72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d74:	b111      	cbz	r1, 8007d7c <_reclaim_reent+0x40>
 8007d76:	4620      	mov	r0, r4
 8007d78:	f7ff feda 	bl	8007b30 <_free_r>
 8007d7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d7e:	b111      	cbz	r1, 8007d86 <_reclaim_reent+0x4a>
 8007d80:	4620      	mov	r0, r4
 8007d82:	f7ff fed5 	bl	8007b30 <_free_r>
 8007d86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d88:	b111      	cbz	r1, 8007d90 <_reclaim_reent+0x54>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f7ff fed0 	bl	8007b30 <_free_r>
 8007d90:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d92:	b111      	cbz	r1, 8007d9a <_reclaim_reent+0x5e>
 8007d94:	4620      	mov	r0, r4
 8007d96:	f7ff fecb 	bl	8007b30 <_free_r>
 8007d9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d9c:	b111      	cbz	r1, 8007da4 <_reclaim_reent+0x68>
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f7ff fec6 	bl	8007b30 <_free_r>
 8007da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007da6:	b111      	cbz	r1, 8007dae <_reclaim_reent+0x72>
 8007da8:	4620      	mov	r0, r4
 8007daa:	f7ff fec1 	bl	8007b30 <_free_r>
 8007dae:	69a3      	ldr	r3, [r4, #24]
 8007db0:	b1e3      	cbz	r3, 8007dec <_reclaim_reent+0xb0>
 8007db2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007db4:	4620      	mov	r0, r4
 8007db6:	4798      	blx	r3
 8007db8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dba:	b1b9      	cbz	r1, 8007dec <_reclaim_reent+0xb0>
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007dc2:	f7ff bfad 	b.w	8007d20 <cleanup_glue>
 8007dc6:	5949      	ldr	r1, [r1, r5]
 8007dc8:	b941      	cbnz	r1, 8007ddc <_reclaim_reent+0xa0>
 8007dca:	3504      	adds	r5, #4
 8007dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dce:	2d80      	cmp	r5, #128	; 0x80
 8007dd0:	68d9      	ldr	r1, [r3, #12]
 8007dd2:	d1f8      	bne.n	8007dc6 <_reclaim_reent+0x8a>
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f7ff feab 	bl	8007b30 <_free_r>
 8007dda:	e7ba      	b.n	8007d52 <_reclaim_reent+0x16>
 8007ddc:	680e      	ldr	r6, [r1, #0]
 8007dde:	4620      	mov	r0, r4
 8007de0:	f7ff fea6 	bl	8007b30 <_free_r>
 8007de4:	4631      	mov	r1, r6
 8007de6:	e7ef      	b.n	8007dc8 <_reclaim_reent+0x8c>
 8007de8:	2500      	movs	r5, #0
 8007dea:	e7ef      	b.n	8007dcc <_reclaim_reent+0x90>
 8007dec:	bd70      	pop	{r4, r5, r6, pc}
 8007dee:	bf00      	nop
 8007df0:	20000010 	.word	0x20000010

08007df4 <_sbrk_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d06      	ldr	r5, [pc, #24]	; (8007e10 <_sbrk_r+0x1c>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f7f9 fea4 	bl	8001b4c <_sbrk>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_sbrk_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_sbrk_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	2000301c 	.word	0x2000301c

08007e14 <__sread>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	460c      	mov	r4, r1
 8007e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1c:	f002 fb7e 	bl	800a51c <_read_r>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	bfab      	itete	ge
 8007e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e26:	89a3      	ldrhlt	r3, [r4, #12]
 8007e28:	181b      	addge	r3, r3, r0
 8007e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e2e:	bfac      	ite	ge
 8007e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e32:	81a3      	strhlt	r3, [r4, #12]
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <__swrite>:
 8007e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3a:	461f      	mov	r7, r3
 8007e3c:	898b      	ldrh	r3, [r1, #12]
 8007e3e:	05db      	lsls	r3, r3, #23
 8007e40:	4605      	mov	r5, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	4616      	mov	r6, r2
 8007e46:	d505      	bpl.n	8007e54 <__swrite+0x1e>
 8007e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f001 fb70 	bl	8009534 <_lseek_r>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	4632      	mov	r2, r6
 8007e62:	463b      	mov	r3, r7
 8007e64:	4628      	mov	r0, r5
 8007e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	f000 bedf 	b.w	8008c2c <_write_r>

08007e6e <__sseek>:
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e76:	f001 fb5d 	bl	8009534 <_lseek_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	bf15      	itete	ne
 8007e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e8a:	81a3      	strheq	r3, [r4, #12]
 8007e8c:	bf18      	it	ne
 8007e8e:	81a3      	strhne	r3, [r4, #12]
 8007e90:	bd10      	pop	{r4, pc}

08007e92 <__sclose>:
 8007e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e96:	f000 bef9 	b.w	8008c8c <_close_r>

08007e9a <strchr>:
 8007e9a:	b2c9      	uxtb	r1, r1
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ea2:	b11a      	cbz	r2, 8007eac <strchr+0x12>
 8007ea4:	428a      	cmp	r2, r1
 8007ea6:	d1f9      	bne.n	8007e9c <strchr+0x2>
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	4770      	bx	lr
 8007eac:	2900      	cmp	r1, #0
 8007eae:	bf18      	it	ne
 8007eb0:	2300      	movne	r3, #0
 8007eb2:	e7f9      	b.n	8007ea8 <strchr+0xe>

08007eb4 <sulp>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	460d      	mov	r5, r1
 8007eba:	ec45 4b10 	vmov	d0, r4, r5
 8007ebe:	4616      	mov	r6, r2
 8007ec0:	f001 feda 	bl	8009c78 <__ulp>
 8007ec4:	ec51 0b10 	vmov	r0, r1, d0
 8007ec8:	b17e      	cbz	r6, 8007eea <sulp+0x36>
 8007eca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ece:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	dd09      	ble.n	8007eea <sulp+0x36>
 8007ed6:	051b      	lsls	r3, r3, #20
 8007ed8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007edc:	2400      	movs	r4, #0
 8007ede:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	f7f8 fb97 	bl	8000618 <__aeabi_dmul>
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	0000      	movs	r0, r0
	...

08007ef0 <_strtod_l>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	ed2d 8b02 	vpush	{d8}
 8007ef8:	b09d      	sub	sp, #116	; 0x74
 8007efa:	461f      	mov	r7, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	9318      	str	r3, [sp, #96]	; 0x60
 8007f00:	4ba2      	ldr	r3, [pc, #648]	; (800818c <_strtod_l+0x29c>)
 8007f02:	9213      	str	r2, [sp, #76]	; 0x4c
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	9305      	str	r3, [sp, #20]
 8007f08:	4604      	mov	r4, r0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	4688      	mov	r8, r1
 8007f0e:	f7f8 f969 	bl	80001e4 <strlen>
 8007f12:	f04f 0a00 	mov.w	sl, #0
 8007f16:	4605      	mov	r5, r0
 8007f18:	f04f 0b00 	mov.w	fp, #0
 8007f1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	2a2b      	cmp	r2, #43	; 0x2b
 8007f26:	d04e      	beq.n	8007fc6 <_strtod_l+0xd6>
 8007f28:	d83b      	bhi.n	8007fa2 <_strtod_l+0xb2>
 8007f2a:	2a0d      	cmp	r2, #13
 8007f2c:	d834      	bhi.n	8007f98 <_strtod_l+0xa8>
 8007f2e:	2a08      	cmp	r2, #8
 8007f30:	d834      	bhi.n	8007f9c <_strtod_l+0xac>
 8007f32:	2a00      	cmp	r2, #0
 8007f34:	d03e      	beq.n	8007fb4 <_strtod_l+0xc4>
 8007f36:	2300      	movs	r3, #0
 8007f38:	930a      	str	r3, [sp, #40]	; 0x28
 8007f3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007f3c:	7833      	ldrb	r3, [r6, #0]
 8007f3e:	2b30      	cmp	r3, #48	; 0x30
 8007f40:	f040 80b0 	bne.w	80080a4 <_strtod_l+0x1b4>
 8007f44:	7873      	ldrb	r3, [r6, #1]
 8007f46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f4a:	2b58      	cmp	r3, #88	; 0x58
 8007f4c:	d168      	bne.n	8008020 <_strtod_l+0x130>
 8007f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	ab18      	add	r3, sp, #96	; 0x60
 8007f54:	9702      	str	r7, [sp, #8]
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4a8d      	ldr	r2, [pc, #564]	; (8008190 <_strtod_l+0x2a0>)
 8007f5a:	ab19      	add	r3, sp, #100	; 0x64
 8007f5c:	a917      	add	r1, sp, #92	; 0x5c
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 ffe0 	bl	8008f24 <__gethex>
 8007f64:	f010 0707 	ands.w	r7, r0, #7
 8007f68:	4605      	mov	r5, r0
 8007f6a:	d005      	beq.n	8007f78 <_strtod_l+0x88>
 8007f6c:	2f06      	cmp	r7, #6
 8007f6e:	d12c      	bne.n	8007fca <_strtod_l+0xda>
 8007f70:	3601      	adds	r6, #1
 8007f72:	2300      	movs	r3, #0
 8007f74:	9617      	str	r6, [sp, #92]	; 0x5c
 8007f76:	930a      	str	r3, [sp, #40]	; 0x28
 8007f78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 8590 	bne.w	8008aa0 <_strtod_l+0xbb0>
 8007f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f82:	b1eb      	cbz	r3, 8007fc0 <_strtod_l+0xd0>
 8007f84:	4652      	mov	r2, sl
 8007f86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007f8a:	ec43 2b10 	vmov	d0, r2, r3
 8007f8e:	b01d      	add	sp, #116	; 0x74
 8007f90:	ecbd 8b02 	vpop	{d8}
 8007f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f98:	2a20      	cmp	r2, #32
 8007f9a:	d1cc      	bne.n	8007f36 <_strtod_l+0x46>
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fa0:	e7be      	b.n	8007f20 <_strtod_l+0x30>
 8007fa2:	2a2d      	cmp	r2, #45	; 0x2d
 8007fa4:	d1c7      	bne.n	8007f36 <_strtod_l+0x46>
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	920a      	str	r2, [sp, #40]	; 0x28
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	9217      	str	r2, [sp, #92]	; 0x5c
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1c2      	bne.n	8007f3a <_strtod_l+0x4a>
 8007fb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f040 856e 	bne.w	8008a9c <_strtod_l+0xbac>
 8007fc0:	4652      	mov	r2, sl
 8007fc2:	465b      	mov	r3, fp
 8007fc4:	e7e1      	b.n	8007f8a <_strtod_l+0x9a>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	e7ee      	b.n	8007fa8 <_strtod_l+0xb8>
 8007fca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007fcc:	b13a      	cbz	r2, 8007fde <_strtod_l+0xee>
 8007fce:	2135      	movs	r1, #53	; 0x35
 8007fd0:	a81a      	add	r0, sp, #104	; 0x68
 8007fd2:	f001 ff5c 	bl	8009e8e <__copybits>
 8007fd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f001 fb1b 	bl	8009614 <_Bfree>
 8007fde:	3f01      	subs	r7, #1
 8007fe0:	2f04      	cmp	r7, #4
 8007fe2:	d806      	bhi.n	8007ff2 <_strtod_l+0x102>
 8007fe4:	e8df f007 	tbb	[pc, r7]
 8007fe8:	1714030a 	.word	0x1714030a
 8007fec:	0a          	.byte	0x0a
 8007fed:	00          	.byte	0x00
 8007fee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007ff2:	0728      	lsls	r0, r5, #28
 8007ff4:	d5c0      	bpl.n	8007f78 <_strtod_l+0x88>
 8007ff6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007ffa:	e7bd      	b.n	8007f78 <_strtod_l+0x88>
 8007ffc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800800a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800800e:	e7f0      	b.n	8007ff2 <_strtod_l+0x102>
 8008010:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008194 <_strtod_l+0x2a4>
 8008014:	e7ed      	b.n	8007ff2 <_strtod_l+0x102>
 8008016:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800801a:	f04f 3aff 	mov.w	sl, #4294967295
 800801e:	e7e8      	b.n	8007ff2 <_strtod_l+0x102>
 8008020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	9217      	str	r2, [sp, #92]	; 0x5c
 8008026:	785b      	ldrb	r3, [r3, #1]
 8008028:	2b30      	cmp	r3, #48	; 0x30
 800802a:	d0f9      	beq.n	8008020 <_strtod_l+0x130>
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0a3      	beq.n	8007f78 <_strtod_l+0x88>
 8008030:	2301      	movs	r3, #1
 8008032:	f04f 0900 	mov.w	r9, #0
 8008036:	9304      	str	r3, [sp, #16]
 8008038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800803a:	9308      	str	r3, [sp, #32]
 800803c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008040:	464f      	mov	r7, r9
 8008042:	220a      	movs	r2, #10
 8008044:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008046:	7806      	ldrb	r6, [r0, #0]
 8008048:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800804c:	b2d9      	uxtb	r1, r3
 800804e:	2909      	cmp	r1, #9
 8008050:	d92a      	bls.n	80080a8 <_strtod_l+0x1b8>
 8008052:	9905      	ldr	r1, [sp, #20]
 8008054:	462a      	mov	r2, r5
 8008056:	f002 fa7b 	bl	800a550 <strncmp>
 800805a:	b398      	cbz	r0, 80080c4 <_strtod_l+0x1d4>
 800805c:	2000      	movs	r0, #0
 800805e:	4632      	mov	r2, r6
 8008060:	463d      	mov	r5, r7
 8008062:	9005      	str	r0, [sp, #20]
 8008064:	4603      	mov	r3, r0
 8008066:	2a65      	cmp	r2, #101	; 0x65
 8008068:	d001      	beq.n	800806e <_strtod_l+0x17e>
 800806a:	2a45      	cmp	r2, #69	; 0x45
 800806c:	d118      	bne.n	80080a0 <_strtod_l+0x1b0>
 800806e:	b91d      	cbnz	r5, 8008078 <_strtod_l+0x188>
 8008070:	9a04      	ldr	r2, [sp, #16]
 8008072:	4302      	orrs	r2, r0
 8008074:	d09e      	beq.n	8007fb4 <_strtod_l+0xc4>
 8008076:	2500      	movs	r5, #0
 8008078:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800807c:	f108 0201 	add.w	r2, r8, #1
 8008080:	9217      	str	r2, [sp, #92]	; 0x5c
 8008082:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008086:	2a2b      	cmp	r2, #43	; 0x2b
 8008088:	d075      	beq.n	8008176 <_strtod_l+0x286>
 800808a:	2a2d      	cmp	r2, #45	; 0x2d
 800808c:	d07b      	beq.n	8008186 <_strtod_l+0x296>
 800808e:	f04f 0c00 	mov.w	ip, #0
 8008092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008096:	2909      	cmp	r1, #9
 8008098:	f240 8082 	bls.w	80081a0 <_strtod_l+0x2b0>
 800809c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80080a0:	2600      	movs	r6, #0
 80080a2:	e09d      	b.n	80081e0 <_strtod_l+0x2f0>
 80080a4:	2300      	movs	r3, #0
 80080a6:	e7c4      	b.n	8008032 <_strtod_l+0x142>
 80080a8:	2f08      	cmp	r7, #8
 80080aa:	bfd8      	it	le
 80080ac:	9907      	ldrle	r1, [sp, #28]
 80080ae:	f100 0001 	add.w	r0, r0, #1
 80080b2:	bfda      	itte	le
 80080b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80080b8:	9307      	strle	r3, [sp, #28]
 80080ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80080be:	3701      	adds	r7, #1
 80080c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80080c2:	e7bf      	b.n	8008044 <_strtod_l+0x154>
 80080c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080c6:	195a      	adds	r2, r3, r5
 80080c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80080ca:	5d5a      	ldrb	r2, [r3, r5]
 80080cc:	2f00      	cmp	r7, #0
 80080ce:	d037      	beq.n	8008140 <_strtod_l+0x250>
 80080d0:	9005      	str	r0, [sp, #20]
 80080d2:	463d      	mov	r5, r7
 80080d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80080d8:	2b09      	cmp	r3, #9
 80080da:	d912      	bls.n	8008102 <_strtod_l+0x212>
 80080dc:	2301      	movs	r3, #1
 80080de:	e7c2      	b.n	8008066 <_strtod_l+0x176>
 80080e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80080e6:	785a      	ldrb	r2, [r3, #1]
 80080e8:	3001      	adds	r0, #1
 80080ea:	2a30      	cmp	r2, #48	; 0x30
 80080ec:	d0f8      	beq.n	80080e0 <_strtod_l+0x1f0>
 80080ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80080f2:	2b08      	cmp	r3, #8
 80080f4:	f200 84d9 	bhi.w	8008aaa <_strtod_l+0xbba>
 80080f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080fa:	9005      	str	r0, [sp, #20]
 80080fc:	2000      	movs	r0, #0
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	4605      	mov	r5, r0
 8008102:	3a30      	subs	r2, #48	; 0x30
 8008104:	f100 0301 	add.w	r3, r0, #1
 8008108:	d014      	beq.n	8008134 <_strtod_l+0x244>
 800810a:	9905      	ldr	r1, [sp, #20]
 800810c:	4419      	add	r1, r3
 800810e:	9105      	str	r1, [sp, #20]
 8008110:	462b      	mov	r3, r5
 8008112:	eb00 0e05 	add.w	lr, r0, r5
 8008116:	210a      	movs	r1, #10
 8008118:	4573      	cmp	r3, lr
 800811a:	d113      	bne.n	8008144 <_strtod_l+0x254>
 800811c:	182b      	adds	r3, r5, r0
 800811e:	2b08      	cmp	r3, #8
 8008120:	f105 0501 	add.w	r5, r5, #1
 8008124:	4405      	add	r5, r0
 8008126:	dc1c      	bgt.n	8008162 <_strtod_l+0x272>
 8008128:	9907      	ldr	r1, [sp, #28]
 800812a:	230a      	movs	r3, #10
 800812c:	fb03 2301 	mla	r3, r3, r1, r2
 8008130:	9307      	str	r3, [sp, #28]
 8008132:	2300      	movs	r3, #0
 8008134:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008136:	1c51      	adds	r1, r2, #1
 8008138:	9117      	str	r1, [sp, #92]	; 0x5c
 800813a:	7852      	ldrb	r2, [r2, #1]
 800813c:	4618      	mov	r0, r3
 800813e:	e7c9      	b.n	80080d4 <_strtod_l+0x1e4>
 8008140:	4638      	mov	r0, r7
 8008142:	e7d2      	b.n	80080ea <_strtod_l+0x1fa>
 8008144:	2b08      	cmp	r3, #8
 8008146:	dc04      	bgt.n	8008152 <_strtod_l+0x262>
 8008148:	9e07      	ldr	r6, [sp, #28]
 800814a:	434e      	muls	r6, r1
 800814c:	9607      	str	r6, [sp, #28]
 800814e:	3301      	adds	r3, #1
 8008150:	e7e2      	b.n	8008118 <_strtod_l+0x228>
 8008152:	f103 0c01 	add.w	ip, r3, #1
 8008156:	f1bc 0f10 	cmp.w	ip, #16
 800815a:	bfd8      	it	le
 800815c:	fb01 f909 	mulle.w	r9, r1, r9
 8008160:	e7f5      	b.n	800814e <_strtod_l+0x25e>
 8008162:	2d10      	cmp	r5, #16
 8008164:	bfdc      	itt	le
 8008166:	230a      	movle	r3, #10
 8008168:	fb03 2909 	mlale	r9, r3, r9, r2
 800816c:	e7e1      	b.n	8008132 <_strtod_l+0x242>
 800816e:	2300      	movs	r3, #0
 8008170:	9305      	str	r3, [sp, #20]
 8008172:	2301      	movs	r3, #1
 8008174:	e77c      	b.n	8008070 <_strtod_l+0x180>
 8008176:	f04f 0c00 	mov.w	ip, #0
 800817a:	f108 0202 	add.w	r2, r8, #2
 800817e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008180:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008184:	e785      	b.n	8008092 <_strtod_l+0x1a2>
 8008186:	f04f 0c01 	mov.w	ip, #1
 800818a:	e7f6      	b.n	800817a <_strtod_l+0x28a>
 800818c:	0800ac1c 	.word	0x0800ac1c
 8008190:	0800aa18 	.word	0x0800aa18
 8008194:	7ff00000 	.word	0x7ff00000
 8008198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800819a:	1c51      	adds	r1, r2, #1
 800819c:	9117      	str	r1, [sp, #92]	; 0x5c
 800819e:	7852      	ldrb	r2, [r2, #1]
 80081a0:	2a30      	cmp	r2, #48	; 0x30
 80081a2:	d0f9      	beq.n	8008198 <_strtod_l+0x2a8>
 80081a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80081a8:	2908      	cmp	r1, #8
 80081aa:	f63f af79 	bhi.w	80080a0 <_strtod_l+0x1b0>
 80081ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80081b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081b4:	9206      	str	r2, [sp, #24]
 80081b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081b8:	1c51      	adds	r1, r2, #1
 80081ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80081bc:	7852      	ldrb	r2, [r2, #1]
 80081be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80081c2:	2e09      	cmp	r6, #9
 80081c4:	d937      	bls.n	8008236 <_strtod_l+0x346>
 80081c6:	9e06      	ldr	r6, [sp, #24]
 80081c8:	1b89      	subs	r1, r1, r6
 80081ca:	2908      	cmp	r1, #8
 80081cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80081d0:	dc02      	bgt.n	80081d8 <_strtod_l+0x2e8>
 80081d2:	4576      	cmp	r6, lr
 80081d4:	bfa8      	it	ge
 80081d6:	4676      	movge	r6, lr
 80081d8:	f1bc 0f00 	cmp.w	ip, #0
 80081dc:	d000      	beq.n	80081e0 <_strtod_l+0x2f0>
 80081de:	4276      	negs	r6, r6
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	d14d      	bne.n	8008280 <_strtod_l+0x390>
 80081e4:	9904      	ldr	r1, [sp, #16]
 80081e6:	4301      	orrs	r1, r0
 80081e8:	f47f aec6 	bne.w	8007f78 <_strtod_l+0x88>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f aee1 	bne.w	8007fb4 <_strtod_l+0xc4>
 80081f2:	2a69      	cmp	r2, #105	; 0x69
 80081f4:	d027      	beq.n	8008246 <_strtod_l+0x356>
 80081f6:	dc24      	bgt.n	8008242 <_strtod_l+0x352>
 80081f8:	2a49      	cmp	r2, #73	; 0x49
 80081fa:	d024      	beq.n	8008246 <_strtod_l+0x356>
 80081fc:	2a4e      	cmp	r2, #78	; 0x4e
 80081fe:	f47f aed9 	bne.w	8007fb4 <_strtod_l+0xc4>
 8008202:	499f      	ldr	r1, [pc, #636]	; (8008480 <_strtod_l+0x590>)
 8008204:	a817      	add	r0, sp, #92	; 0x5c
 8008206:	f001 f8e5 	bl	80093d4 <__match>
 800820a:	2800      	cmp	r0, #0
 800820c:	f43f aed2 	beq.w	8007fb4 <_strtod_l+0xc4>
 8008210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b28      	cmp	r3, #40	; 0x28
 8008216:	d12d      	bne.n	8008274 <_strtod_l+0x384>
 8008218:	499a      	ldr	r1, [pc, #616]	; (8008484 <_strtod_l+0x594>)
 800821a:	aa1a      	add	r2, sp, #104	; 0x68
 800821c:	a817      	add	r0, sp, #92	; 0x5c
 800821e:	f001 f8ed 	bl	80093fc <__hexnan>
 8008222:	2805      	cmp	r0, #5
 8008224:	d126      	bne.n	8008274 <_strtod_l+0x384>
 8008226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008228:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800822c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008230:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008234:	e6a0      	b.n	8007f78 <_strtod_l+0x88>
 8008236:	210a      	movs	r1, #10
 8008238:	fb01 2e0e 	mla	lr, r1, lr, r2
 800823c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008240:	e7b9      	b.n	80081b6 <_strtod_l+0x2c6>
 8008242:	2a6e      	cmp	r2, #110	; 0x6e
 8008244:	e7db      	b.n	80081fe <_strtod_l+0x30e>
 8008246:	4990      	ldr	r1, [pc, #576]	; (8008488 <_strtod_l+0x598>)
 8008248:	a817      	add	r0, sp, #92	; 0x5c
 800824a:	f001 f8c3 	bl	80093d4 <__match>
 800824e:	2800      	cmp	r0, #0
 8008250:	f43f aeb0 	beq.w	8007fb4 <_strtod_l+0xc4>
 8008254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008256:	498d      	ldr	r1, [pc, #564]	; (800848c <_strtod_l+0x59c>)
 8008258:	3b01      	subs	r3, #1
 800825a:	a817      	add	r0, sp, #92	; 0x5c
 800825c:	9317      	str	r3, [sp, #92]	; 0x5c
 800825e:	f001 f8b9 	bl	80093d4 <__match>
 8008262:	b910      	cbnz	r0, 800826a <_strtod_l+0x37a>
 8008264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008266:	3301      	adds	r3, #1
 8008268:	9317      	str	r3, [sp, #92]	; 0x5c
 800826a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800849c <_strtod_l+0x5ac>
 800826e:	f04f 0a00 	mov.w	sl, #0
 8008272:	e681      	b.n	8007f78 <_strtod_l+0x88>
 8008274:	4886      	ldr	r0, [pc, #536]	; (8008490 <_strtod_l+0x5a0>)
 8008276:	f002 f963 	bl	800a540 <nan>
 800827a:	ec5b ab10 	vmov	sl, fp, d0
 800827e:	e67b      	b.n	8007f78 <_strtod_l+0x88>
 8008280:	9b05      	ldr	r3, [sp, #20]
 8008282:	9807      	ldr	r0, [sp, #28]
 8008284:	1af3      	subs	r3, r6, r3
 8008286:	2f00      	cmp	r7, #0
 8008288:	bf08      	it	eq
 800828a:	462f      	moveq	r7, r5
 800828c:	2d10      	cmp	r5, #16
 800828e:	9306      	str	r3, [sp, #24]
 8008290:	46a8      	mov	r8, r5
 8008292:	bfa8      	it	ge
 8008294:	f04f 0810 	movge.w	r8, #16
 8008298:	f7f8 f944 	bl	8000524 <__aeabi_ui2d>
 800829c:	2d09      	cmp	r5, #9
 800829e:	4682      	mov	sl, r0
 80082a0:	468b      	mov	fp, r1
 80082a2:	dd13      	ble.n	80082cc <_strtod_l+0x3dc>
 80082a4:	4b7b      	ldr	r3, [pc, #492]	; (8008494 <_strtod_l+0x5a4>)
 80082a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80082aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80082ae:	f7f8 f9b3 	bl	8000618 <__aeabi_dmul>
 80082b2:	4682      	mov	sl, r0
 80082b4:	4648      	mov	r0, r9
 80082b6:	468b      	mov	fp, r1
 80082b8:	f7f8 f934 	bl	8000524 <__aeabi_ui2d>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4650      	mov	r0, sl
 80082c2:	4659      	mov	r1, fp
 80082c4:	f7f7 fff2 	bl	80002ac <__adddf3>
 80082c8:	4682      	mov	sl, r0
 80082ca:	468b      	mov	fp, r1
 80082cc:	2d0f      	cmp	r5, #15
 80082ce:	dc38      	bgt.n	8008342 <_strtod_l+0x452>
 80082d0:	9b06      	ldr	r3, [sp, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f43f ae50 	beq.w	8007f78 <_strtod_l+0x88>
 80082d8:	dd24      	ble.n	8008324 <_strtod_l+0x434>
 80082da:	2b16      	cmp	r3, #22
 80082dc:	dc0b      	bgt.n	80082f6 <_strtod_l+0x406>
 80082de:	496d      	ldr	r1, [pc, #436]	; (8008494 <_strtod_l+0x5a4>)
 80082e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082e8:	4652      	mov	r2, sl
 80082ea:	465b      	mov	r3, fp
 80082ec:	f7f8 f994 	bl	8000618 <__aeabi_dmul>
 80082f0:	4682      	mov	sl, r0
 80082f2:	468b      	mov	fp, r1
 80082f4:	e640      	b.n	8007f78 <_strtod_l+0x88>
 80082f6:	9a06      	ldr	r2, [sp, #24]
 80082f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80082fc:	4293      	cmp	r3, r2
 80082fe:	db20      	blt.n	8008342 <_strtod_l+0x452>
 8008300:	4c64      	ldr	r4, [pc, #400]	; (8008494 <_strtod_l+0x5a4>)
 8008302:	f1c5 050f 	rsb	r5, r5, #15
 8008306:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800830a:	4652      	mov	r2, sl
 800830c:	465b      	mov	r3, fp
 800830e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008312:	f7f8 f981 	bl	8000618 <__aeabi_dmul>
 8008316:	9b06      	ldr	r3, [sp, #24]
 8008318:	1b5d      	subs	r5, r3, r5
 800831a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800831e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008322:	e7e3      	b.n	80082ec <_strtod_l+0x3fc>
 8008324:	9b06      	ldr	r3, [sp, #24]
 8008326:	3316      	adds	r3, #22
 8008328:	db0b      	blt.n	8008342 <_strtod_l+0x452>
 800832a:	9b05      	ldr	r3, [sp, #20]
 800832c:	1b9e      	subs	r6, r3, r6
 800832e:	4b59      	ldr	r3, [pc, #356]	; (8008494 <_strtod_l+0x5a4>)
 8008330:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008334:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008338:	4650      	mov	r0, sl
 800833a:	4659      	mov	r1, fp
 800833c:	f7f8 fa96 	bl	800086c <__aeabi_ddiv>
 8008340:	e7d6      	b.n	80082f0 <_strtod_l+0x400>
 8008342:	9b06      	ldr	r3, [sp, #24]
 8008344:	eba5 0808 	sub.w	r8, r5, r8
 8008348:	4498      	add	r8, r3
 800834a:	f1b8 0f00 	cmp.w	r8, #0
 800834e:	dd74      	ble.n	800843a <_strtod_l+0x54a>
 8008350:	f018 030f 	ands.w	r3, r8, #15
 8008354:	d00a      	beq.n	800836c <_strtod_l+0x47c>
 8008356:	494f      	ldr	r1, [pc, #316]	; (8008494 <_strtod_l+0x5a4>)
 8008358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800835c:	4652      	mov	r2, sl
 800835e:	465b      	mov	r3, fp
 8008360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008364:	f7f8 f958 	bl	8000618 <__aeabi_dmul>
 8008368:	4682      	mov	sl, r0
 800836a:	468b      	mov	fp, r1
 800836c:	f038 080f 	bics.w	r8, r8, #15
 8008370:	d04f      	beq.n	8008412 <_strtod_l+0x522>
 8008372:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008376:	dd22      	ble.n	80083be <_strtod_l+0x4ce>
 8008378:	2500      	movs	r5, #0
 800837a:	462e      	mov	r6, r5
 800837c:	9507      	str	r5, [sp, #28]
 800837e:	9505      	str	r5, [sp, #20]
 8008380:	2322      	movs	r3, #34	; 0x22
 8008382:	f8df b118 	ldr.w	fp, [pc, #280]	; 800849c <_strtod_l+0x5ac>
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	f04f 0a00 	mov.w	sl, #0
 800838c:	9b07      	ldr	r3, [sp, #28]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f43f adf2 	beq.w	8007f78 <_strtod_l+0x88>
 8008394:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008396:	4620      	mov	r0, r4
 8008398:	f001 f93c 	bl	8009614 <_Bfree>
 800839c:	9905      	ldr	r1, [sp, #20]
 800839e:	4620      	mov	r0, r4
 80083a0:	f001 f938 	bl	8009614 <_Bfree>
 80083a4:	4631      	mov	r1, r6
 80083a6:	4620      	mov	r0, r4
 80083a8:	f001 f934 	bl	8009614 <_Bfree>
 80083ac:	9907      	ldr	r1, [sp, #28]
 80083ae:	4620      	mov	r0, r4
 80083b0:	f001 f930 	bl	8009614 <_Bfree>
 80083b4:	4629      	mov	r1, r5
 80083b6:	4620      	mov	r0, r4
 80083b8:	f001 f92c 	bl	8009614 <_Bfree>
 80083bc:	e5dc      	b.n	8007f78 <_strtod_l+0x88>
 80083be:	4b36      	ldr	r3, [pc, #216]	; (8008498 <_strtod_l+0x5a8>)
 80083c0:	9304      	str	r3, [sp, #16]
 80083c2:	2300      	movs	r3, #0
 80083c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80083c8:	4650      	mov	r0, sl
 80083ca:	4659      	mov	r1, fp
 80083cc:	4699      	mov	r9, r3
 80083ce:	f1b8 0f01 	cmp.w	r8, #1
 80083d2:	dc21      	bgt.n	8008418 <_strtod_l+0x528>
 80083d4:	b10b      	cbz	r3, 80083da <_strtod_l+0x4ea>
 80083d6:	4682      	mov	sl, r0
 80083d8:	468b      	mov	fp, r1
 80083da:	4b2f      	ldr	r3, [pc, #188]	; (8008498 <_strtod_l+0x5a8>)
 80083dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80083e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80083e4:	4652      	mov	r2, sl
 80083e6:	465b      	mov	r3, fp
 80083e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80083ec:	f7f8 f914 	bl	8000618 <__aeabi_dmul>
 80083f0:	4b2a      	ldr	r3, [pc, #168]	; (800849c <_strtod_l+0x5ac>)
 80083f2:	460a      	mov	r2, r1
 80083f4:	400b      	ands	r3, r1
 80083f6:	492a      	ldr	r1, [pc, #168]	; (80084a0 <_strtod_l+0x5b0>)
 80083f8:	428b      	cmp	r3, r1
 80083fa:	4682      	mov	sl, r0
 80083fc:	d8bc      	bhi.n	8008378 <_strtod_l+0x488>
 80083fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008402:	428b      	cmp	r3, r1
 8008404:	bf86      	itte	hi
 8008406:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80084a4 <_strtod_l+0x5b4>
 800840a:	f04f 3aff 	movhi.w	sl, #4294967295
 800840e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008412:	2300      	movs	r3, #0
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	e084      	b.n	8008522 <_strtod_l+0x632>
 8008418:	f018 0f01 	tst.w	r8, #1
 800841c:	d005      	beq.n	800842a <_strtod_l+0x53a>
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f8 f8f8 	bl	8000618 <__aeabi_dmul>
 8008428:	2301      	movs	r3, #1
 800842a:	9a04      	ldr	r2, [sp, #16]
 800842c:	3208      	adds	r2, #8
 800842e:	f109 0901 	add.w	r9, r9, #1
 8008432:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008436:	9204      	str	r2, [sp, #16]
 8008438:	e7c9      	b.n	80083ce <_strtod_l+0x4de>
 800843a:	d0ea      	beq.n	8008412 <_strtod_l+0x522>
 800843c:	f1c8 0800 	rsb	r8, r8, #0
 8008440:	f018 020f 	ands.w	r2, r8, #15
 8008444:	d00a      	beq.n	800845c <_strtod_l+0x56c>
 8008446:	4b13      	ldr	r3, [pc, #76]	; (8008494 <_strtod_l+0x5a4>)
 8008448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800844c:	4650      	mov	r0, sl
 800844e:	4659      	mov	r1, fp
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f7f8 fa0a 	bl	800086c <__aeabi_ddiv>
 8008458:	4682      	mov	sl, r0
 800845a:	468b      	mov	fp, r1
 800845c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008460:	d0d7      	beq.n	8008412 <_strtod_l+0x522>
 8008462:	f1b8 0f1f 	cmp.w	r8, #31
 8008466:	dd1f      	ble.n	80084a8 <_strtod_l+0x5b8>
 8008468:	2500      	movs	r5, #0
 800846a:	462e      	mov	r6, r5
 800846c:	9507      	str	r5, [sp, #28]
 800846e:	9505      	str	r5, [sp, #20]
 8008470:	2322      	movs	r3, #34	; 0x22
 8008472:	f04f 0a00 	mov.w	sl, #0
 8008476:	f04f 0b00 	mov.w	fp, #0
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	e786      	b.n	800838c <_strtod_l+0x49c>
 800847e:	bf00      	nop
 8008480:	0800aa15 	.word	0x0800aa15
 8008484:	0800aa2c 	.word	0x0800aa2c
 8008488:	0800aa0c 	.word	0x0800aa0c
 800848c:	0800aa0f 	.word	0x0800aa0f
 8008490:	0800aaa3 	.word	0x0800aaa3
 8008494:	0800acd0 	.word	0x0800acd0
 8008498:	0800aca8 	.word	0x0800aca8
 800849c:	7ff00000 	.word	0x7ff00000
 80084a0:	7ca00000 	.word	0x7ca00000
 80084a4:	7fefffff 	.word	0x7fefffff
 80084a8:	f018 0310 	ands.w	r3, r8, #16
 80084ac:	bf18      	it	ne
 80084ae:	236a      	movne	r3, #106	; 0x6a
 80084b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008860 <_strtod_l+0x970>
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	4650      	mov	r0, sl
 80084b8:	4659      	mov	r1, fp
 80084ba:	2300      	movs	r3, #0
 80084bc:	f018 0f01 	tst.w	r8, #1
 80084c0:	d004      	beq.n	80084cc <_strtod_l+0x5dc>
 80084c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80084c6:	f7f8 f8a7 	bl	8000618 <__aeabi_dmul>
 80084ca:	2301      	movs	r3, #1
 80084cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80084d0:	f109 0908 	add.w	r9, r9, #8
 80084d4:	d1f2      	bne.n	80084bc <_strtod_l+0x5cc>
 80084d6:	b10b      	cbz	r3, 80084dc <_strtod_l+0x5ec>
 80084d8:	4682      	mov	sl, r0
 80084da:	468b      	mov	fp, r1
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	b1c3      	cbz	r3, 8008512 <_strtod_l+0x622>
 80084e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80084e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	4659      	mov	r1, fp
 80084ec:	dd11      	ble.n	8008512 <_strtod_l+0x622>
 80084ee:	2b1f      	cmp	r3, #31
 80084f0:	f340 8124 	ble.w	800873c <_strtod_l+0x84c>
 80084f4:	2b34      	cmp	r3, #52	; 0x34
 80084f6:	bfde      	ittt	le
 80084f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80084fc:	f04f 33ff 	movle.w	r3, #4294967295
 8008500:	fa03 f202 	lslle.w	r2, r3, r2
 8008504:	f04f 0a00 	mov.w	sl, #0
 8008508:	bfcc      	ite	gt
 800850a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800850e:	ea02 0b01 	andle.w	fp, r2, r1
 8008512:	2200      	movs	r2, #0
 8008514:	2300      	movs	r3, #0
 8008516:	4650      	mov	r0, sl
 8008518:	4659      	mov	r1, fp
 800851a:	f7f8 fae5 	bl	8000ae8 <__aeabi_dcmpeq>
 800851e:	2800      	cmp	r0, #0
 8008520:	d1a2      	bne.n	8008468 <_strtod_l+0x578>
 8008522:	9b07      	ldr	r3, [sp, #28]
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	9908      	ldr	r1, [sp, #32]
 8008528:	462b      	mov	r3, r5
 800852a:	463a      	mov	r2, r7
 800852c:	4620      	mov	r0, r4
 800852e:	f001 f8d9 	bl	80096e4 <__s2b>
 8008532:	9007      	str	r0, [sp, #28]
 8008534:	2800      	cmp	r0, #0
 8008536:	f43f af1f 	beq.w	8008378 <_strtod_l+0x488>
 800853a:	9b05      	ldr	r3, [sp, #20]
 800853c:	1b9e      	subs	r6, r3, r6
 800853e:	9b06      	ldr	r3, [sp, #24]
 8008540:	2b00      	cmp	r3, #0
 8008542:	bfb4      	ite	lt
 8008544:	4633      	movlt	r3, r6
 8008546:	2300      	movge	r3, #0
 8008548:	930c      	str	r3, [sp, #48]	; 0x30
 800854a:	9b06      	ldr	r3, [sp, #24]
 800854c:	2500      	movs	r5, #0
 800854e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008552:	9312      	str	r3, [sp, #72]	; 0x48
 8008554:	462e      	mov	r6, r5
 8008556:	9b07      	ldr	r3, [sp, #28]
 8008558:	4620      	mov	r0, r4
 800855a:	6859      	ldr	r1, [r3, #4]
 800855c:	f001 f81a 	bl	8009594 <_Balloc>
 8008560:	9005      	str	r0, [sp, #20]
 8008562:	2800      	cmp	r0, #0
 8008564:	f43f af0c 	beq.w	8008380 <_strtod_l+0x490>
 8008568:	9b07      	ldr	r3, [sp, #28]
 800856a:	691a      	ldr	r2, [r3, #16]
 800856c:	3202      	adds	r2, #2
 800856e:	f103 010c 	add.w	r1, r3, #12
 8008572:	0092      	lsls	r2, r2, #2
 8008574:	300c      	adds	r0, #12
 8008576:	f7ff fac5 	bl	8007b04 <memcpy>
 800857a:	ec4b ab10 	vmov	d0, sl, fp
 800857e:	aa1a      	add	r2, sp, #104	; 0x68
 8008580:	a919      	add	r1, sp, #100	; 0x64
 8008582:	4620      	mov	r0, r4
 8008584:	f001 fbf4 	bl	8009d70 <__d2b>
 8008588:	ec4b ab18 	vmov	d8, sl, fp
 800858c:	9018      	str	r0, [sp, #96]	; 0x60
 800858e:	2800      	cmp	r0, #0
 8008590:	f43f aef6 	beq.w	8008380 <_strtod_l+0x490>
 8008594:	2101      	movs	r1, #1
 8008596:	4620      	mov	r0, r4
 8008598:	f001 f93e 	bl	8009818 <__i2b>
 800859c:	4606      	mov	r6, r0
 800859e:	2800      	cmp	r0, #0
 80085a0:	f43f aeee 	beq.w	8008380 <_strtod_l+0x490>
 80085a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085a6:	9904      	ldr	r1, [sp, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	bfab      	itete	ge
 80085ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80085ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80085b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80085b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80085b6:	bfac      	ite	ge
 80085b8:	eb03 0902 	addge.w	r9, r3, r2
 80085bc:	1ad7      	sublt	r7, r2, r3
 80085be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80085c0:	eba3 0801 	sub.w	r8, r3, r1
 80085c4:	4490      	add	r8, r2
 80085c6:	4ba1      	ldr	r3, [pc, #644]	; (800884c <_strtod_l+0x95c>)
 80085c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80085cc:	4598      	cmp	r8, r3
 80085ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80085d2:	f280 80c7 	bge.w	8008764 <_strtod_l+0x874>
 80085d6:	eba3 0308 	sub.w	r3, r3, r8
 80085da:	2b1f      	cmp	r3, #31
 80085dc:	eba2 0203 	sub.w	r2, r2, r3
 80085e0:	f04f 0101 	mov.w	r1, #1
 80085e4:	f300 80b1 	bgt.w	800874a <_strtod_l+0x85a>
 80085e8:	fa01 f303 	lsl.w	r3, r1, r3
 80085ec:	930d      	str	r3, [sp, #52]	; 0x34
 80085ee:	2300      	movs	r3, #0
 80085f0:	9308      	str	r3, [sp, #32]
 80085f2:	eb09 0802 	add.w	r8, r9, r2
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	45c1      	cmp	r9, r8
 80085fa:	4417      	add	r7, r2
 80085fc:	441f      	add	r7, r3
 80085fe:	464b      	mov	r3, r9
 8008600:	bfa8      	it	ge
 8008602:	4643      	movge	r3, r8
 8008604:	42bb      	cmp	r3, r7
 8008606:	bfa8      	it	ge
 8008608:	463b      	movge	r3, r7
 800860a:	2b00      	cmp	r3, #0
 800860c:	bfc2      	ittt	gt
 800860e:	eba8 0803 	subgt.w	r8, r8, r3
 8008612:	1aff      	subgt	r7, r7, r3
 8008614:	eba9 0903 	subgt.w	r9, r9, r3
 8008618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800861a:	2b00      	cmp	r3, #0
 800861c:	dd17      	ble.n	800864e <_strtod_l+0x75e>
 800861e:	4631      	mov	r1, r6
 8008620:	461a      	mov	r2, r3
 8008622:	4620      	mov	r0, r4
 8008624:	f001 f9b8 	bl	8009998 <__pow5mult>
 8008628:	4606      	mov	r6, r0
 800862a:	2800      	cmp	r0, #0
 800862c:	f43f aea8 	beq.w	8008380 <_strtod_l+0x490>
 8008630:	4601      	mov	r1, r0
 8008632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008634:	4620      	mov	r0, r4
 8008636:	f001 f905 	bl	8009844 <__multiply>
 800863a:	900b      	str	r0, [sp, #44]	; 0x2c
 800863c:	2800      	cmp	r0, #0
 800863e:	f43f ae9f 	beq.w	8008380 <_strtod_l+0x490>
 8008642:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008644:	4620      	mov	r0, r4
 8008646:	f000 ffe5 	bl	8009614 <_Bfree>
 800864a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864c:	9318      	str	r3, [sp, #96]	; 0x60
 800864e:	f1b8 0f00 	cmp.w	r8, #0
 8008652:	f300 808c 	bgt.w	800876e <_strtod_l+0x87e>
 8008656:	9b06      	ldr	r3, [sp, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	dd08      	ble.n	800866e <_strtod_l+0x77e>
 800865c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800865e:	9905      	ldr	r1, [sp, #20]
 8008660:	4620      	mov	r0, r4
 8008662:	f001 f999 	bl	8009998 <__pow5mult>
 8008666:	9005      	str	r0, [sp, #20]
 8008668:	2800      	cmp	r0, #0
 800866a:	f43f ae89 	beq.w	8008380 <_strtod_l+0x490>
 800866e:	2f00      	cmp	r7, #0
 8008670:	dd08      	ble.n	8008684 <_strtod_l+0x794>
 8008672:	9905      	ldr	r1, [sp, #20]
 8008674:	463a      	mov	r2, r7
 8008676:	4620      	mov	r0, r4
 8008678:	f001 f9e8 	bl	8009a4c <__lshift>
 800867c:	9005      	str	r0, [sp, #20]
 800867e:	2800      	cmp	r0, #0
 8008680:	f43f ae7e 	beq.w	8008380 <_strtod_l+0x490>
 8008684:	f1b9 0f00 	cmp.w	r9, #0
 8008688:	dd08      	ble.n	800869c <_strtod_l+0x7ac>
 800868a:	4631      	mov	r1, r6
 800868c:	464a      	mov	r2, r9
 800868e:	4620      	mov	r0, r4
 8008690:	f001 f9dc 	bl	8009a4c <__lshift>
 8008694:	4606      	mov	r6, r0
 8008696:	2800      	cmp	r0, #0
 8008698:	f43f ae72 	beq.w	8008380 <_strtod_l+0x490>
 800869c:	9a05      	ldr	r2, [sp, #20]
 800869e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086a0:	4620      	mov	r0, r4
 80086a2:	f001 fa5f 	bl	8009b64 <__mdiff>
 80086a6:	4605      	mov	r5, r0
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f43f ae69 	beq.w	8008380 <_strtod_l+0x490>
 80086ae:	68c3      	ldr	r3, [r0, #12]
 80086b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086b2:	2300      	movs	r3, #0
 80086b4:	60c3      	str	r3, [r0, #12]
 80086b6:	4631      	mov	r1, r6
 80086b8:	f001 fa38 	bl	8009b2c <__mcmp>
 80086bc:	2800      	cmp	r0, #0
 80086be:	da60      	bge.n	8008782 <_strtod_l+0x892>
 80086c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c2:	ea53 030a 	orrs.w	r3, r3, sl
 80086c6:	f040 8082 	bne.w	80087ce <_strtod_l+0x8de>
 80086ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d17d      	bne.n	80087ce <_strtod_l+0x8de>
 80086d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086d6:	0d1b      	lsrs	r3, r3, #20
 80086d8:	051b      	lsls	r3, r3, #20
 80086da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80086de:	d976      	bls.n	80087ce <_strtod_l+0x8de>
 80086e0:	696b      	ldr	r3, [r5, #20]
 80086e2:	b913      	cbnz	r3, 80086ea <_strtod_l+0x7fa>
 80086e4:	692b      	ldr	r3, [r5, #16]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	dd71      	ble.n	80087ce <_strtod_l+0x8de>
 80086ea:	4629      	mov	r1, r5
 80086ec:	2201      	movs	r2, #1
 80086ee:	4620      	mov	r0, r4
 80086f0:	f001 f9ac 	bl	8009a4c <__lshift>
 80086f4:	4631      	mov	r1, r6
 80086f6:	4605      	mov	r5, r0
 80086f8:	f001 fa18 	bl	8009b2c <__mcmp>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	dd66      	ble.n	80087ce <_strtod_l+0x8de>
 8008700:	9904      	ldr	r1, [sp, #16]
 8008702:	4a53      	ldr	r2, [pc, #332]	; (8008850 <_strtod_l+0x960>)
 8008704:	465b      	mov	r3, fp
 8008706:	2900      	cmp	r1, #0
 8008708:	f000 8081 	beq.w	800880e <_strtod_l+0x91e>
 800870c:	ea02 010b 	and.w	r1, r2, fp
 8008710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008714:	dc7b      	bgt.n	800880e <_strtod_l+0x91e>
 8008716:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800871a:	f77f aea9 	ble.w	8008470 <_strtod_l+0x580>
 800871e:	4b4d      	ldr	r3, [pc, #308]	; (8008854 <_strtod_l+0x964>)
 8008720:	4650      	mov	r0, sl
 8008722:	4659      	mov	r1, fp
 8008724:	2200      	movs	r2, #0
 8008726:	f7f7 ff77 	bl	8000618 <__aeabi_dmul>
 800872a:	460b      	mov	r3, r1
 800872c:	4303      	orrs	r3, r0
 800872e:	bf08      	it	eq
 8008730:	2322      	moveq	r3, #34	; 0x22
 8008732:	4682      	mov	sl, r0
 8008734:	468b      	mov	fp, r1
 8008736:	bf08      	it	eq
 8008738:	6023      	streq	r3, [r4, #0]
 800873a:	e62b      	b.n	8008394 <_strtod_l+0x4a4>
 800873c:	f04f 32ff 	mov.w	r2, #4294967295
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	ea03 0a0a 	and.w	sl, r3, sl
 8008748:	e6e3      	b.n	8008512 <_strtod_l+0x622>
 800874a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800874e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008752:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008756:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800875a:	fa01 f308 	lsl.w	r3, r1, r8
 800875e:	9308      	str	r3, [sp, #32]
 8008760:	910d      	str	r1, [sp, #52]	; 0x34
 8008762:	e746      	b.n	80085f2 <_strtod_l+0x702>
 8008764:	2300      	movs	r3, #0
 8008766:	9308      	str	r3, [sp, #32]
 8008768:	2301      	movs	r3, #1
 800876a:	930d      	str	r3, [sp, #52]	; 0x34
 800876c:	e741      	b.n	80085f2 <_strtod_l+0x702>
 800876e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008770:	4642      	mov	r2, r8
 8008772:	4620      	mov	r0, r4
 8008774:	f001 f96a 	bl	8009a4c <__lshift>
 8008778:	9018      	str	r0, [sp, #96]	; 0x60
 800877a:	2800      	cmp	r0, #0
 800877c:	f47f af6b 	bne.w	8008656 <_strtod_l+0x766>
 8008780:	e5fe      	b.n	8008380 <_strtod_l+0x490>
 8008782:	465f      	mov	r7, fp
 8008784:	d16e      	bne.n	8008864 <_strtod_l+0x974>
 8008786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008788:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800878c:	b342      	cbz	r2, 80087e0 <_strtod_l+0x8f0>
 800878e:	4a32      	ldr	r2, [pc, #200]	; (8008858 <_strtod_l+0x968>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d128      	bne.n	80087e6 <_strtod_l+0x8f6>
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	4651      	mov	r1, sl
 8008798:	b1eb      	cbz	r3, 80087d6 <_strtod_l+0x8e6>
 800879a:	4b2d      	ldr	r3, [pc, #180]	; (8008850 <_strtod_l+0x960>)
 800879c:	403b      	ands	r3, r7
 800879e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087a2:	f04f 32ff 	mov.w	r2, #4294967295
 80087a6:	d819      	bhi.n	80087dc <_strtod_l+0x8ec>
 80087a8:	0d1b      	lsrs	r3, r3, #20
 80087aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80087ae:	fa02 f303 	lsl.w	r3, r2, r3
 80087b2:	4299      	cmp	r1, r3
 80087b4:	d117      	bne.n	80087e6 <_strtod_l+0x8f6>
 80087b6:	4b29      	ldr	r3, [pc, #164]	; (800885c <_strtod_l+0x96c>)
 80087b8:	429f      	cmp	r7, r3
 80087ba:	d102      	bne.n	80087c2 <_strtod_l+0x8d2>
 80087bc:	3101      	adds	r1, #1
 80087be:	f43f addf 	beq.w	8008380 <_strtod_l+0x490>
 80087c2:	4b23      	ldr	r3, [pc, #140]	; (8008850 <_strtod_l+0x960>)
 80087c4:	403b      	ands	r3, r7
 80087c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80087ca:	f04f 0a00 	mov.w	sl, #0
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1a4      	bne.n	800871e <_strtod_l+0x82e>
 80087d4:	e5de      	b.n	8008394 <_strtod_l+0x4a4>
 80087d6:	f04f 33ff 	mov.w	r3, #4294967295
 80087da:	e7ea      	b.n	80087b2 <_strtod_l+0x8c2>
 80087dc:	4613      	mov	r3, r2
 80087de:	e7e8      	b.n	80087b2 <_strtod_l+0x8c2>
 80087e0:	ea53 030a 	orrs.w	r3, r3, sl
 80087e4:	d08c      	beq.n	8008700 <_strtod_l+0x810>
 80087e6:	9b08      	ldr	r3, [sp, #32]
 80087e8:	b1db      	cbz	r3, 8008822 <_strtod_l+0x932>
 80087ea:	423b      	tst	r3, r7
 80087ec:	d0ef      	beq.n	80087ce <_strtod_l+0x8de>
 80087ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087f0:	9a04      	ldr	r2, [sp, #16]
 80087f2:	4650      	mov	r0, sl
 80087f4:	4659      	mov	r1, fp
 80087f6:	b1c3      	cbz	r3, 800882a <_strtod_l+0x93a>
 80087f8:	f7ff fb5c 	bl	8007eb4 <sulp>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	ec51 0b18 	vmov	r0, r1, d8
 8008804:	f7f7 fd52 	bl	80002ac <__adddf3>
 8008808:	4682      	mov	sl, r0
 800880a:	468b      	mov	fp, r1
 800880c:	e7df      	b.n	80087ce <_strtod_l+0x8de>
 800880e:	4013      	ands	r3, r2
 8008810:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008814:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008818:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800881c:	f04f 3aff 	mov.w	sl, #4294967295
 8008820:	e7d5      	b.n	80087ce <_strtod_l+0x8de>
 8008822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008824:	ea13 0f0a 	tst.w	r3, sl
 8008828:	e7e0      	b.n	80087ec <_strtod_l+0x8fc>
 800882a:	f7ff fb43 	bl	8007eb4 <sulp>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	ec51 0b18 	vmov	r0, r1, d8
 8008836:	f7f7 fd37 	bl	80002a8 <__aeabi_dsub>
 800883a:	2200      	movs	r2, #0
 800883c:	2300      	movs	r3, #0
 800883e:	4682      	mov	sl, r0
 8008840:	468b      	mov	fp, r1
 8008842:	f7f8 f951 	bl	8000ae8 <__aeabi_dcmpeq>
 8008846:	2800      	cmp	r0, #0
 8008848:	d0c1      	beq.n	80087ce <_strtod_l+0x8de>
 800884a:	e611      	b.n	8008470 <_strtod_l+0x580>
 800884c:	fffffc02 	.word	0xfffffc02
 8008850:	7ff00000 	.word	0x7ff00000
 8008854:	39500000 	.word	0x39500000
 8008858:	000fffff 	.word	0x000fffff
 800885c:	7fefffff 	.word	0x7fefffff
 8008860:	0800aa40 	.word	0x0800aa40
 8008864:	4631      	mov	r1, r6
 8008866:	4628      	mov	r0, r5
 8008868:	f001 fade 	bl	8009e28 <__ratio>
 800886c:	ec59 8b10 	vmov	r8, r9, d0
 8008870:	ee10 0a10 	vmov	r0, s0
 8008874:	2200      	movs	r2, #0
 8008876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800887a:	4649      	mov	r1, r9
 800887c:	f7f8 f948 	bl	8000b10 <__aeabi_dcmple>
 8008880:	2800      	cmp	r0, #0
 8008882:	d07a      	beq.n	800897a <_strtod_l+0xa8a>
 8008884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d04a      	beq.n	8008920 <_strtod_l+0xa30>
 800888a:	4b95      	ldr	r3, [pc, #596]	; (8008ae0 <_strtod_l+0xbf0>)
 800888c:	2200      	movs	r2, #0
 800888e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008892:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008ae0 <_strtod_l+0xbf0>
 8008896:	f04f 0800 	mov.w	r8, #0
 800889a:	4b92      	ldr	r3, [pc, #584]	; (8008ae4 <_strtod_l+0xbf4>)
 800889c:	403b      	ands	r3, r7
 800889e:	930d      	str	r3, [sp, #52]	; 0x34
 80088a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088a2:	4b91      	ldr	r3, [pc, #580]	; (8008ae8 <_strtod_l+0xbf8>)
 80088a4:	429a      	cmp	r2, r3
 80088a6:	f040 80b0 	bne.w	8008a0a <_strtod_l+0xb1a>
 80088aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80088b2:	ec4b ab10 	vmov	d0, sl, fp
 80088b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088ba:	f001 f9dd 	bl	8009c78 <__ulp>
 80088be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088c2:	ec53 2b10 	vmov	r2, r3, d0
 80088c6:	f7f7 fea7 	bl	8000618 <__aeabi_dmul>
 80088ca:	4652      	mov	r2, sl
 80088cc:	465b      	mov	r3, fp
 80088ce:	f7f7 fced 	bl	80002ac <__adddf3>
 80088d2:	460b      	mov	r3, r1
 80088d4:	4983      	ldr	r1, [pc, #524]	; (8008ae4 <_strtod_l+0xbf4>)
 80088d6:	4a85      	ldr	r2, [pc, #532]	; (8008aec <_strtod_l+0xbfc>)
 80088d8:	4019      	ands	r1, r3
 80088da:	4291      	cmp	r1, r2
 80088dc:	4682      	mov	sl, r0
 80088de:	d960      	bls.n	80089a2 <_strtod_l+0xab2>
 80088e0:	ee18 3a90 	vmov	r3, s17
 80088e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d104      	bne.n	80088f6 <_strtod_l+0xa06>
 80088ec:	ee18 3a10 	vmov	r3, s16
 80088f0:	3301      	adds	r3, #1
 80088f2:	f43f ad45 	beq.w	8008380 <_strtod_l+0x490>
 80088f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008af8 <_strtod_l+0xc08>
 80088fa:	f04f 3aff 	mov.w	sl, #4294967295
 80088fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008900:	4620      	mov	r0, r4
 8008902:	f000 fe87 	bl	8009614 <_Bfree>
 8008906:	9905      	ldr	r1, [sp, #20]
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fe83 	bl	8009614 <_Bfree>
 800890e:	4631      	mov	r1, r6
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fe7f 	bl	8009614 <_Bfree>
 8008916:	4629      	mov	r1, r5
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fe7b 	bl	8009614 <_Bfree>
 800891e:	e61a      	b.n	8008556 <_strtod_l+0x666>
 8008920:	f1ba 0f00 	cmp.w	sl, #0
 8008924:	d11b      	bne.n	800895e <_strtod_l+0xa6e>
 8008926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800892a:	b9f3      	cbnz	r3, 800896a <_strtod_l+0xa7a>
 800892c:	4b6c      	ldr	r3, [pc, #432]	; (8008ae0 <_strtod_l+0xbf0>)
 800892e:	2200      	movs	r2, #0
 8008930:	4640      	mov	r0, r8
 8008932:	4649      	mov	r1, r9
 8008934:	f7f8 f8e2 	bl	8000afc <__aeabi_dcmplt>
 8008938:	b9d0      	cbnz	r0, 8008970 <_strtod_l+0xa80>
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	4b6c      	ldr	r3, [pc, #432]	; (8008af0 <_strtod_l+0xc00>)
 8008940:	2200      	movs	r2, #0
 8008942:	f7f7 fe69 	bl	8000618 <__aeabi_dmul>
 8008946:	4680      	mov	r8, r0
 8008948:	4689      	mov	r9, r1
 800894a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800894e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008952:	9315      	str	r3, [sp, #84]	; 0x54
 8008954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800895c:	e79d      	b.n	800889a <_strtod_l+0x9aa>
 800895e:	f1ba 0f01 	cmp.w	sl, #1
 8008962:	d102      	bne.n	800896a <_strtod_l+0xa7a>
 8008964:	2f00      	cmp	r7, #0
 8008966:	f43f ad83 	beq.w	8008470 <_strtod_l+0x580>
 800896a:	4b62      	ldr	r3, [pc, #392]	; (8008af4 <_strtod_l+0xc04>)
 800896c:	2200      	movs	r2, #0
 800896e:	e78e      	b.n	800888e <_strtod_l+0x99e>
 8008970:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008af0 <_strtod_l+0xc00>
 8008974:	f04f 0800 	mov.w	r8, #0
 8008978:	e7e7      	b.n	800894a <_strtod_l+0xa5a>
 800897a:	4b5d      	ldr	r3, [pc, #372]	; (8008af0 <_strtod_l+0xc00>)
 800897c:	4640      	mov	r0, r8
 800897e:	4649      	mov	r1, r9
 8008980:	2200      	movs	r2, #0
 8008982:	f7f7 fe49 	bl	8000618 <__aeabi_dmul>
 8008986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008988:	4680      	mov	r8, r0
 800898a:	4689      	mov	r9, r1
 800898c:	b933      	cbnz	r3, 800899c <_strtod_l+0xaac>
 800898e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008992:	900e      	str	r0, [sp, #56]	; 0x38
 8008994:	930f      	str	r3, [sp, #60]	; 0x3c
 8008996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800899a:	e7dd      	b.n	8008958 <_strtod_l+0xa68>
 800899c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80089a0:	e7f9      	b.n	8008996 <_strtod_l+0xaa6>
 80089a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1a8      	bne.n	80088fe <_strtod_l+0xa0e>
 80089ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089b2:	0d1b      	lsrs	r3, r3, #20
 80089b4:	051b      	lsls	r3, r3, #20
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d1a1      	bne.n	80088fe <_strtod_l+0xa0e>
 80089ba:	4640      	mov	r0, r8
 80089bc:	4649      	mov	r1, r9
 80089be:	f7f8 f94d 	bl	8000c5c <__aeabi_d2lz>
 80089c2:	f7f7 fdfb 	bl	80005bc <__aeabi_l2d>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	f7f7 fc6b 	bl	80002a8 <__aeabi_dsub>
 80089d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089d8:	ea43 030a 	orr.w	r3, r3, sl
 80089dc:	4313      	orrs	r3, r2
 80089de:	4680      	mov	r8, r0
 80089e0:	4689      	mov	r9, r1
 80089e2:	d055      	beq.n	8008a90 <_strtod_l+0xba0>
 80089e4:	a336      	add	r3, pc, #216	; (adr r3, 8008ac0 <_strtod_l+0xbd0>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f7f8 f887 	bl	8000afc <__aeabi_dcmplt>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f47f acd0 	bne.w	8008394 <_strtod_l+0x4a4>
 80089f4:	a334      	add	r3, pc, #208	; (adr r3, 8008ac8 <_strtod_l+0xbd8>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	4640      	mov	r0, r8
 80089fc:	4649      	mov	r1, r9
 80089fe:	f7f8 f89b 	bl	8000b38 <__aeabi_dcmpgt>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	f43f af7b 	beq.w	80088fe <_strtod_l+0xa0e>
 8008a08:	e4c4      	b.n	8008394 <_strtod_l+0x4a4>
 8008a0a:	9b04      	ldr	r3, [sp, #16]
 8008a0c:	b333      	cbz	r3, 8008a5c <_strtod_l+0xb6c>
 8008a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a14:	d822      	bhi.n	8008a5c <_strtod_l+0xb6c>
 8008a16:	a32e      	add	r3, pc, #184	; (adr r3, 8008ad0 <_strtod_l+0xbe0>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	4640      	mov	r0, r8
 8008a1e:	4649      	mov	r1, r9
 8008a20:	f7f8 f876 	bl	8000b10 <__aeabi_dcmple>
 8008a24:	b1a0      	cbz	r0, 8008a50 <_strtod_l+0xb60>
 8008a26:	4649      	mov	r1, r9
 8008a28:	4640      	mov	r0, r8
 8008a2a:	f7f8 f88f 	bl	8000b4c <__aeabi_d2uiz>
 8008a2e:	2801      	cmp	r0, #1
 8008a30:	bf38      	it	cc
 8008a32:	2001      	movcc	r0, #1
 8008a34:	f7f7 fd76 	bl	8000524 <__aeabi_ui2d>
 8008a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	4689      	mov	r9, r1
 8008a3e:	bb23      	cbnz	r3, 8008a8a <_strtod_l+0xb9a>
 8008a40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a44:	9010      	str	r0, [sp, #64]	; 0x40
 8008a46:	9311      	str	r3, [sp, #68]	; 0x44
 8008a48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008a58:	1a9b      	subs	r3, r3, r2
 8008a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a60:	eeb0 0a48 	vmov.f32	s0, s16
 8008a64:	eef0 0a68 	vmov.f32	s1, s17
 8008a68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a6c:	f001 f904 	bl	8009c78 <__ulp>
 8008a70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a74:	ec53 2b10 	vmov	r2, r3, d0
 8008a78:	f7f7 fdce 	bl	8000618 <__aeabi_dmul>
 8008a7c:	ec53 2b18 	vmov	r2, r3, d8
 8008a80:	f7f7 fc14 	bl	80002ac <__adddf3>
 8008a84:	4682      	mov	sl, r0
 8008a86:	468b      	mov	fp, r1
 8008a88:	e78d      	b.n	80089a6 <_strtod_l+0xab6>
 8008a8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008a8e:	e7db      	b.n	8008a48 <_strtod_l+0xb58>
 8008a90:	a311      	add	r3, pc, #68	; (adr r3, 8008ad8 <_strtod_l+0xbe8>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f7f8 f831 	bl	8000afc <__aeabi_dcmplt>
 8008a9a:	e7b2      	b.n	8008a02 <_strtod_l+0xb12>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008aa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	f7ff ba6b 	b.w	8007f80 <_strtod_l+0x90>
 8008aaa:	2a65      	cmp	r2, #101	; 0x65
 8008aac:	f43f ab5f 	beq.w	800816e <_strtod_l+0x27e>
 8008ab0:	2a45      	cmp	r2, #69	; 0x45
 8008ab2:	f43f ab5c 	beq.w	800816e <_strtod_l+0x27e>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f7ff bb94 	b.w	80081e4 <_strtod_l+0x2f4>
 8008abc:	f3af 8000 	nop.w
 8008ac0:	94a03595 	.word	0x94a03595
 8008ac4:	3fdfffff 	.word	0x3fdfffff
 8008ac8:	35afe535 	.word	0x35afe535
 8008acc:	3fe00000 	.word	0x3fe00000
 8008ad0:	ffc00000 	.word	0xffc00000
 8008ad4:	41dfffff 	.word	0x41dfffff
 8008ad8:	94a03595 	.word	0x94a03595
 8008adc:	3fcfffff 	.word	0x3fcfffff
 8008ae0:	3ff00000 	.word	0x3ff00000
 8008ae4:	7ff00000 	.word	0x7ff00000
 8008ae8:	7fe00000 	.word	0x7fe00000
 8008aec:	7c9fffff 	.word	0x7c9fffff
 8008af0:	3fe00000 	.word	0x3fe00000
 8008af4:	bff00000 	.word	0xbff00000
 8008af8:	7fefffff 	.word	0x7fefffff

08008afc <strtod>:
 8008afc:	460a      	mov	r2, r1
 8008afe:	4601      	mov	r1, r0
 8008b00:	4802      	ldr	r0, [pc, #8]	; (8008b0c <strtod+0x10>)
 8008b02:	4b03      	ldr	r3, [pc, #12]	; (8008b10 <strtod+0x14>)
 8008b04:	6800      	ldr	r0, [r0, #0]
 8008b06:	f7ff b9f3 	b.w	8007ef0 <_strtod_l>
 8008b0a:	bf00      	nop
 8008b0c:	20000010 	.word	0x20000010
 8008b10:	20000078 	.word	0x20000078

08008b14 <_strtol_l.constprop.0>:
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1a:	d001      	beq.n	8008b20 <_strtol_l.constprop.0+0xc>
 8008b1c:	2b24      	cmp	r3, #36	; 0x24
 8008b1e:	d906      	bls.n	8008b2e <_strtol_l.constprop.0+0x1a>
 8008b20:	f7fe fec4 	bl	80078ac <__errno>
 8008b24:	2316      	movs	r3, #22
 8008b26:	6003      	str	r3, [r0, #0]
 8008b28:	2000      	movs	r0, #0
 8008b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c14 <_strtol_l.constprop.0+0x100>
 8008b32:	460d      	mov	r5, r1
 8008b34:	462e      	mov	r6, r5
 8008b36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b3a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008b3e:	f017 0708 	ands.w	r7, r7, #8
 8008b42:	d1f7      	bne.n	8008b34 <_strtol_l.constprop.0+0x20>
 8008b44:	2c2d      	cmp	r4, #45	; 0x2d
 8008b46:	d132      	bne.n	8008bae <_strtol_l.constprop.0+0x9a>
 8008b48:	782c      	ldrb	r4, [r5, #0]
 8008b4a:	2701      	movs	r7, #1
 8008b4c:	1cb5      	adds	r5, r6, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d05b      	beq.n	8008c0a <_strtol_l.constprop.0+0xf6>
 8008b52:	2b10      	cmp	r3, #16
 8008b54:	d109      	bne.n	8008b6a <_strtol_l.constprop.0+0x56>
 8008b56:	2c30      	cmp	r4, #48	; 0x30
 8008b58:	d107      	bne.n	8008b6a <_strtol_l.constprop.0+0x56>
 8008b5a:	782c      	ldrb	r4, [r5, #0]
 8008b5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008b60:	2c58      	cmp	r4, #88	; 0x58
 8008b62:	d14d      	bne.n	8008c00 <_strtol_l.constprop.0+0xec>
 8008b64:	786c      	ldrb	r4, [r5, #1]
 8008b66:	2310      	movs	r3, #16
 8008b68:	3502      	adds	r5, #2
 8008b6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008b6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b72:	f04f 0c00 	mov.w	ip, #0
 8008b76:	fbb8 f9f3 	udiv	r9, r8, r3
 8008b7a:	4666      	mov	r6, ip
 8008b7c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008b80:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008b84:	f1be 0f09 	cmp.w	lr, #9
 8008b88:	d816      	bhi.n	8008bb8 <_strtol_l.constprop.0+0xa4>
 8008b8a:	4674      	mov	r4, lr
 8008b8c:	42a3      	cmp	r3, r4
 8008b8e:	dd24      	ble.n	8008bda <_strtol_l.constprop.0+0xc6>
 8008b90:	f1bc 0f00 	cmp.w	ip, #0
 8008b94:	db1e      	blt.n	8008bd4 <_strtol_l.constprop.0+0xc0>
 8008b96:	45b1      	cmp	r9, r6
 8008b98:	d31c      	bcc.n	8008bd4 <_strtol_l.constprop.0+0xc0>
 8008b9a:	d101      	bne.n	8008ba0 <_strtol_l.constprop.0+0x8c>
 8008b9c:	45a2      	cmp	sl, r4
 8008b9e:	db19      	blt.n	8008bd4 <_strtol_l.constprop.0+0xc0>
 8008ba0:	fb06 4603 	mla	r6, r6, r3, r4
 8008ba4:	f04f 0c01 	mov.w	ip, #1
 8008ba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bac:	e7e8      	b.n	8008b80 <_strtol_l.constprop.0+0x6c>
 8008bae:	2c2b      	cmp	r4, #43	; 0x2b
 8008bb0:	bf04      	itt	eq
 8008bb2:	782c      	ldrbeq	r4, [r5, #0]
 8008bb4:	1cb5      	addeq	r5, r6, #2
 8008bb6:	e7ca      	b.n	8008b4e <_strtol_l.constprop.0+0x3a>
 8008bb8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008bbc:	f1be 0f19 	cmp.w	lr, #25
 8008bc0:	d801      	bhi.n	8008bc6 <_strtol_l.constprop.0+0xb2>
 8008bc2:	3c37      	subs	r4, #55	; 0x37
 8008bc4:	e7e2      	b.n	8008b8c <_strtol_l.constprop.0+0x78>
 8008bc6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008bca:	f1be 0f19 	cmp.w	lr, #25
 8008bce:	d804      	bhi.n	8008bda <_strtol_l.constprop.0+0xc6>
 8008bd0:	3c57      	subs	r4, #87	; 0x57
 8008bd2:	e7db      	b.n	8008b8c <_strtol_l.constprop.0+0x78>
 8008bd4:	f04f 3cff 	mov.w	ip, #4294967295
 8008bd8:	e7e6      	b.n	8008ba8 <_strtol_l.constprop.0+0x94>
 8008bda:	f1bc 0f00 	cmp.w	ip, #0
 8008bde:	da05      	bge.n	8008bec <_strtol_l.constprop.0+0xd8>
 8008be0:	2322      	movs	r3, #34	; 0x22
 8008be2:	6003      	str	r3, [r0, #0]
 8008be4:	4646      	mov	r6, r8
 8008be6:	b942      	cbnz	r2, 8008bfa <_strtol_l.constprop.0+0xe6>
 8008be8:	4630      	mov	r0, r6
 8008bea:	e79e      	b.n	8008b2a <_strtol_l.constprop.0+0x16>
 8008bec:	b107      	cbz	r7, 8008bf0 <_strtol_l.constprop.0+0xdc>
 8008bee:	4276      	negs	r6, r6
 8008bf0:	2a00      	cmp	r2, #0
 8008bf2:	d0f9      	beq.n	8008be8 <_strtol_l.constprop.0+0xd4>
 8008bf4:	f1bc 0f00 	cmp.w	ip, #0
 8008bf8:	d000      	beq.n	8008bfc <_strtol_l.constprop.0+0xe8>
 8008bfa:	1e69      	subs	r1, r5, #1
 8008bfc:	6011      	str	r1, [r2, #0]
 8008bfe:	e7f3      	b.n	8008be8 <_strtol_l.constprop.0+0xd4>
 8008c00:	2430      	movs	r4, #48	; 0x30
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1b1      	bne.n	8008b6a <_strtol_l.constprop.0+0x56>
 8008c06:	2308      	movs	r3, #8
 8008c08:	e7af      	b.n	8008b6a <_strtol_l.constprop.0+0x56>
 8008c0a:	2c30      	cmp	r4, #48	; 0x30
 8008c0c:	d0a5      	beq.n	8008b5a <_strtol_l.constprop.0+0x46>
 8008c0e:	230a      	movs	r3, #10
 8008c10:	e7ab      	b.n	8008b6a <_strtol_l.constprop.0+0x56>
 8008c12:	bf00      	nop
 8008c14:	0800aaa5 	.word	0x0800aaa5

08008c18 <strtol>:
 8008c18:	4613      	mov	r3, r2
 8008c1a:	460a      	mov	r2, r1
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	4802      	ldr	r0, [pc, #8]	; (8008c28 <strtol+0x10>)
 8008c20:	6800      	ldr	r0, [r0, #0]
 8008c22:	f7ff bf77 	b.w	8008b14 <_strtol_l.constprop.0>
 8008c26:	bf00      	nop
 8008c28:	20000010 	.word	0x20000010

08008c2c <_write_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	; (8008c4c <_write_r+0x20>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	4608      	mov	r0, r1
 8008c34:	4611      	mov	r1, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f7f8 ff35 	bl	8001aaa <_write>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_write_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_write_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	2000301c 	.word	0x2000301c

08008c50 <__assert_func>:
 8008c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c52:	4614      	mov	r4, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <__assert_func+0x2c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	68d8      	ldr	r0, [r3, #12]
 8008c5e:	b14c      	cbz	r4, 8008c74 <__assert_func+0x24>
 8008c60:	4b07      	ldr	r3, [pc, #28]	; (8008c80 <__assert_func+0x30>)
 8008c62:	9100      	str	r1, [sp, #0]
 8008c64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c68:	4906      	ldr	r1, [pc, #24]	; (8008c84 <__assert_func+0x34>)
 8008c6a:	462b      	mov	r3, r5
 8008c6c:	f000 f8e0 	bl	8008e30 <fiprintf>
 8008c70:	f001 fd50 	bl	800a714 <abort>
 8008c74:	4b04      	ldr	r3, [pc, #16]	; (8008c88 <__assert_func+0x38>)
 8008c76:	461c      	mov	r4, r3
 8008c78:	e7f3      	b.n	8008c62 <__assert_func+0x12>
 8008c7a:	bf00      	nop
 8008c7c:	20000010 	.word	0x20000010
 8008c80:	0800aa68 	.word	0x0800aa68
 8008c84:	0800aa75 	.word	0x0800aa75
 8008c88:	0800aaa3 	.word	0x0800aaa3

08008c8c <_close_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	4d06      	ldr	r5, [pc, #24]	; (8008ca8 <_close_r+0x1c>)
 8008c90:	2300      	movs	r3, #0
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	f7f8 ff23 	bl	8001ae2 <_close>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_close_r+0x1a>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_close_r+0x1a>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	2000301c 	.word	0x2000301c

08008cac <__sflush_r>:
 8008cac:	898a      	ldrh	r2, [r1, #12]
 8008cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	0710      	lsls	r0, r2, #28
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	d458      	bmi.n	8008d6c <__sflush_r+0xc0>
 8008cba:	684b      	ldr	r3, [r1, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dc05      	bgt.n	8008ccc <__sflush_r+0x20>
 8008cc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dc02      	bgt.n	8008ccc <__sflush_r+0x20>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d0f9      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008cd8:	682f      	ldr	r7, [r5, #0]
 8008cda:	602b      	str	r3, [r5, #0]
 8008cdc:	d032      	beq.n	8008d44 <__sflush_r+0x98>
 8008cde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	075a      	lsls	r2, r3, #29
 8008ce4:	d505      	bpl.n	8008cf2 <__sflush_r+0x46>
 8008ce6:	6863      	ldr	r3, [r4, #4]
 8008ce8:	1ac0      	subs	r0, r0, r3
 8008cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cec:	b10b      	cbz	r3, 8008cf2 <__sflush_r+0x46>
 8008cee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008cf0:	1ac0      	subs	r0, r0, r3
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cf8:	6a21      	ldr	r1, [r4, #32]
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b0      	blx	r6
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	d106      	bne.n	8008d12 <__sflush_r+0x66>
 8008d04:	6829      	ldr	r1, [r5, #0]
 8008d06:	291d      	cmp	r1, #29
 8008d08:	d82c      	bhi.n	8008d64 <__sflush_r+0xb8>
 8008d0a:	4a2a      	ldr	r2, [pc, #168]	; (8008db4 <__sflush_r+0x108>)
 8008d0c:	40ca      	lsrs	r2, r1
 8008d0e:	07d6      	lsls	r6, r2, #31
 8008d10:	d528      	bpl.n	8008d64 <__sflush_r+0xb8>
 8008d12:	2200      	movs	r2, #0
 8008d14:	6062      	str	r2, [r4, #4]
 8008d16:	04d9      	lsls	r1, r3, #19
 8008d18:	6922      	ldr	r2, [r4, #16]
 8008d1a:	6022      	str	r2, [r4, #0]
 8008d1c:	d504      	bpl.n	8008d28 <__sflush_r+0x7c>
 8008d1e:	1c42      	adds	r2, r0, #1
 8008d20:	d101      	bne.n	8008d26 <__sflush_r+0x7a>
 8008d22:	682b      	ldr	r3, [r5, #0]
 8008d24:	b903      	cbnz	r3, 8008d28 <__sflush_r+0x7c>
 8008d26:	6560      	str	r0, [r4, #84]	; 0x54
 8008d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d2a:	602f      	str	r7, [r5, #0]
 8008d2c:	2900      	cmp	r1, #0
 8008d2e:	d0ca      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008d30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d34:	4299      	cmp	r1, r3
 8008d36:	d002      	beq.n	8008d3e <__sflush_r+0x92>
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f7fe fef9 	bl	8007b30 <_free_r>
 8008d3e:	2000      	movs	r0, #0
 8008d40:	6360      	str	r0, [r4, #52]	; 0x34
 8008d42:	e7c1      	b.n	8008cc8 <__sflush_r+0x1c>
 8008d44:	6a21      	ldr	r1, [r4, #32]
 8008d46:	2301      	movs	r3, #1
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b0      	blx	r6
 8008d4c:	1c41      	adds	r1, r0, #1
 8008d4e:	d1c7      	bne.n	8008ce0 <__sflush_r+0x34>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0c4      	beq.n	8008ce0 <__sflush_r+0x34>
 8008d56:	2b1d      	cmp	r3, #29
 8008d58:	d001      	beq.n	8008d5e <__sflush_r+0xb2>
 8008d5a:	2b16      	cmp	r3, #22
 8008d5c:	d101      	bne.n	8008d62 <__sflush_r+0xb6>
 8008d5e:	602f      	str	r7, [r5, #0]
 8008d60:	e7b1      	b.n	8008cc6 <__sflush_r+0x1a>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d68:	81a3      	strh	r3, [r4, #12]
 8008d6a:	e7ad      	b.n	8008cc8 <__sflush_r+0x1c>
 8008d6c:	690f      	ldr	r7, [r1, #16]
 8008d6e:	2f00      	cmp	r7, #0
 8008d70:	d0a9      	beq.n	8008cc6 <__sflush_r+0x1a>
 8008d72:	0793      	lsls	r3, r2, #30
 8008d74:	680e      	ldr	r6, [r1, #0]
 8008d76:	bf08      	it	eq
 8008d78:	694b      	ldreq	r3, [r1, #20]
 8008d7a:	600f      	str	r7, [r1, #0]
 8008d7c:	bf18      	it	ne
 8008d7e:	2300      	movne	r3, #0
 8008d80:	eba6 0807 	sub.w	r8, r6, r7
 8008d84:	608b      	str	r3, [r1, #8]
 8008d86:	f1b8 0f00 	cmp.w	r8, #0
 8008d8a:	dd9c      	ble.n	8008cc6 <__sflush_r+0x1a>
 8008d8c:	6a21      	ldr	r1, [r4, #32]
 8008d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d90:	4643      	mov	r3, r8
 8008d92:	463a      	mov	r2, r7
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b0      	blx	r6
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	dc06      	bgt.n	8008daa <__sflush_r+0xfe>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da2:	81a3      	strh	r3, [r4, #12]
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295
 8008da8:	e78e      	b.n	8008cc8 <__sflush_r+0x1c>
 8008daa:	4407      	add	r7, r0
 8008dac:	eba8 0800 	sub.w	r8, r8, r0
 8008db0:	e7e9      	b.n	8008d86 <__sflush_r+0xda>
 8008db2:	bf00      	nop
 8008db4:	20400001 	.word	0x20400001

08008db8 <_fflush_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	690b      	ldr	r3, [r1, #16]
 8008dbc:	4605      	mov	r5, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	b913      	cbnz	r3, 8008dc8 <_fflush_r+0x10>
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	b118      	cbz	r0, 8008dd2 <_fflush_r+0x1a>
 8008dca:	6983      	ldr	r3, [r0, #24]
 8008dcc:	b90b      	cbnz	r3, 8008dd2 <_fflush_r+0x1a>
 8008dce:	f7fe fdcb 	bl	8007968 <__sinit>
 8008dd2:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <_fflush_r+0x6c>)
 8008dd4:	429c      	cmp	r4, r3
 8008dd6:	d11b      	bne.n	8008e10 <_fflush_r+0x58>
 8008dd8:	686c      	ldr	r4, [r5, #4]
 8008dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0ef      	beq.n	8008dc2 <_fflush_r+0xa>
 8008de2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008de4:	07d0      	lsls	r0, r2, #31
 8008de6:	d404      	bmi.n	8008df2 <_fflush_r+0x3a>
 8008de8:	0599      	lsls	r1, r3, #22
 8008dea:	d402      	bmi.n	8008df2 <_fflush_r+0x3a>
 8008dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dee:	f7fe fe7e 	bl	8007aee <__retarget_lock_acquire_recursive>
 8008df2:	4628      	mov	r0, r5
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7ff ff59 	bl	8008cac <__sflush_r>
 8008dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dfc:	07da      	lsls	r2, r3, #31
 8008dfe:	4605      	mov	r5, r0
 8008e00:	d4e0      	bmi.n	8008dc4 <_fflush_r+0xc>
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	059b      	lsls	r3, r3, #22
 8008e06:	d4dd      	bmi.n	8008dc4 <_fflush_r+0xc>
 8008e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e0a:	f7fe fe71 	bl	8007af0 <__retarget_lock_release_recursive>
 8008e0e:	e7d9      	b.n	8008dc4 <_fflush_r+0xc>
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <_fflush_r+0x70>)
 8008e12:	429c      	cmp	r4, r3
 8008e14:	d101      	bne.n	8008e1a <_fflush_r+0x62>
 8008e16:	68ac      	ldr	r4, [r5, #8]
 8008e18:	e7df      	b.n	8008dda <_fflush_r+0x22>
 8008e1a:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <_fflush_r+0x74>)
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	bf08      	it	eq
 8008e20:	68ec      	ldreq	r4, [r5, #12]
 8008e22:	e7da      	b.n	8008dda <_fflush_r+0x22>
 8008e24:	0800a9c8 	.word	0x0800a9c8
 8008e28:	0800a9e8 	.word	0x0800a9e8
 8008e2c:	0800a9a8 	.word	0x0800a9a8

08008e30 <fiprintf>:
 8008e30:	b40e      	push	{r1, r2, r3}
 8008e32:	b503      	push	{r0, r1, lr}
 8008e34:	4601      	mov	r1, r0
 8008e36:	ab03      	add	r3, sp, #12
 8008e38:	4805      	ldr	r0, [pc, #20]	; (8008e50 <fiprintf+0x20>)
 8008e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3e:	6800      	ldr	r0, [r0, #0]
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	f001 f8a7 	bl	8009f94 <_vfiprintf_r>
 8008e46:	b002      	add	sp, #8
 8008e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e4c:	b003      	add	sp, #12
 8008e4e:	4770      	bx	lr
 8008e50:	20000010 	.word	0x20000010

08008e54 <rshift>:
 8008e54:	6903      	ldr	r3, [r0, #16]
 8008e56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e62:	f100 0414 	add.w	r4, r0, #20
 8008e66:	dd45      	ble.n	8008ef4 <rshift+0xa0>
 8008e68:	f011 011f 	ands.w	r1, r1, #31
 8008e6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e74:	d10c      	bne.n	8008e90 <rshift+0x3c>
 8008e76:	f100 0710 	add.w	r7, r0, #16
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	42b1      	cmp	r1, r6
 8008e7e:	d334      	bcc.n	8008eea <rshift+0x96>
 8008e80:	1a9b      	subs	r3, r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	1eea      	subs	r2, r5, #3
 8008e86:	4296      	cmp	r6, r2
 8008e88:	bf38      	it	cc
 8008e8a:	2300      	movcc	r3, #0
 8008e8c:	4423      	add	r3, r4
 8008e8e:	e015      	b.n	8008ebc <rshift+0x68>
 8008e90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e94:	f1c1 0820 	rsb	r8, r1, #32
 8008e98:	40cf      	lsrs	r7, r1
 8008e9a:	f105 0e04 	add.w	lr, r5, #4
 8008e9e:	46a1      	mov	r9, r4
 8008ea0:	4576      	cmp	r6, lr
 8008ea2:	46f4      	mov	ip, lr
 8008ea4:	d815      	bhi.n	8008ed2 <rshift+0x7e>
 8008ea6:	1a9a      	subs	r2, r3, r2
 8008ea8:	0092      	lsls	r2, r2, #2
 8008eaa:	3a04      	subs	r2, #4
 8008eac:	3501      	adds	r5, #1
 8008eae:	42ae      	cmp	r6, r5
 8008eb0:	bf38      	it	cc
 8008eb2:	2200      	movcc	r2, #0
 8008eb4:	18a3      	adds	r3, r4, r2
 8008eb6:	50a7      	str	r7, [r4, r2]
 8008eb8:	b107      	cbz	r7, 8008ebc <rshift+0x68>
 8008eba:	3304      	adds	r3, #4
 8008ebc:	1b1a      	subs	r2, r3, r4
 8008ebe:	42a3      	cmp	r3, r4
 8008ec0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ec4:	bf08      	it	eq
 8008ec6:	2300      	moveq	r3, #0
 8008ec8:	6102      	str	r2, [r0, #16]
 8008eca:	bf08      	it	eq
 8008ecc:	6143      	streq	r3, [r0, #20]
 8008ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed2:	f8dc c000 	ldr.w	ip, [ip]
 8008ed6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008eda:	ea4c 0707 	orr.w	r7, ip, r7
 8008ede:	f849 7b04 	str.w	r7, [r9], #4
 8008ee2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ee6:	40cf      	lsrs	r7, r1
 8008ee8:	e7da      	b.n	8008ea0 <rshift+0x4c>
 8008eea:	f851 cb04 	ldr.w	ip, [r1], #4
 8008eee:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ef2:	e7c3      	b.n	8008e7c <rshift+0x28>
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	e7e1      	b.n	8008ebc <rshift+0x68>

08008ef8 <__hexdig_fun>:
 8008ef8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008efc:	2b09      	cmp	r3, #9
 8008efe:	d802      	bhi.n	8008f06 <__hexdig_fun+0xe>
 8008f00:	3820      	subs	r0, #32
 8008f02:	b2c0      	uxtb	r0, r0
 8008f04:	4770      	bx	lr
 8008f06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d801      	bhi.n	8008f12 <__hexdig_fun+0x1a>
 8008f0e:	3847      	subs	r0, #71	; 0x47
 8008f10:	e7f7      	b.n	8008f02 <__hexdig_fun+0xa>
 8008f12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d801      	bhi.n	8008f1e <__hexdig_fun+0x26>
 8008f1a:	3827      	subs	r0, #39	; 0x27
 8008f1c:	e7f1      	b.n	8008f02 <__hexdig_fun+0xa>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	4770      	bx	lr
	...

08008f24 <__gethex>:
 8008f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f28:	ed2d 8b02 	vpush	{d8}
 8008f2c:	b089      	sub	sp, #36	; 0x24
 8008f2e:	ee08 0a10 	vmov	s16, r0
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	4bb4      	ldr	r3, [pc, #720]	; (8009208 <__gethex+0x2e4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	468b      	mov	fp, r1
 8008f3e:	4690      	mov	r8, r2
 8008f40:	f7f7 f950 	bl	80001e4 <strlen>
 8008f44:	9b01      	ldr	r3, [sp, #4]
 8008f46:	f8db 2000 	ldr.w	r2, [fp]
 8008f4a:	4403      	add	r3, r0
 8008f4c:	4682      	mov	sl, r0
 8008f4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	1c93      	adds	r3, r2, #2
 8008f56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008f5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008f5e:	32fe      	adds	r2, #254	; 0xfe
 8008f60:	18d1      	adds	r1, r2, r3
 8008f62:	461f      	mov	r7, r3
 8008f64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f68:	9100      	str	r1, [sp, #0]
 8008f6a:	2830      	cmp	r0, #48	; 0x30
 8008f6c:	d0f8      	beq.n	8008f60 <__gethex+0x3c>
 8008f6e:	f7ff ffc3 	bl	8008ef8 <__hexdig_fun>
 8008f72:	4604      	mov	r4, r0
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d13a      	bne.n	8008fee <__gethex+0xca>
 8008f78:	9901      	ldr	r1, [sp, #4]
 8008f7a:	4652      	mov	r2, sl
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f001 fae7 	bl	800a550 <strncmp>
 8008f82:	4605      	mov	r5, r0
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d168      	bne.n	800905a <__gethex+0x136>
 8008f88:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008f8c:	eb07 060a 	add.w	r6, r7, sl
 8008f90:	f7ff ffb2 	bl	8008ef8 <__hexdig_fun>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d062      	beq.n	800905e <__gethex+0x13a>
 8008f98:	4633      	mov	r3, r6
 8008f9a:	7818      	ldrb	r0, [r3, #0]
 8008f9c:	2830      	cmp	r0, #48	; 0x30
 8008f9e:	461f      	mov	r7, r3
 8008fa0:	f103 0301 	add.w	r3, r3, #1
 8008fa4:	d0f9      	beq.n	8008f9a <__gethex+0x76>
 8008fa6:	f7ff ffa7 	bl	8008ef8 <__hexdig_fun>
 8008faa:	2301      	movs	r3, #1
 8008fac:	fab0 f480 	clz	r4, r0
 8008fb0:	0964      	lsrs	r4, r4, #5
 8008fb2:	4635      	mov	r5, r6
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	463a      	mov	r2, r7
 8008fb8:	4616      	mov	r6, r2
 8008fba:	3201      	adds	r2, #1
 8008fbc:	7830      	ldrb	r0, [r6, #0]
 8008fbe:	f7ff ff9b 	bl	8008ef8 <__hexdig_fun>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d1f8      	bne.n	8008fb8 <__gethex+0x94>
 8008fc6:	9901      	ldr	r1, [sp, #4]
 8008fc8:	4652      	mov	r2, sl
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f001 fac0 	bl	800a550 <strncmp>
 8008fd0:	b980      	cbnz	r0, 8008ff4 <__gethex+0xd0>
 8008fd2:	b94d      	cbnz	r5, 8008fe8 <__gethex+0xc4>
 8008fd4:	eb06 050a 	add.w	r5, r6, sl
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4616      	mov	r6, r2
 8008fdc:	3201      	adds	r2, #1
 8008fde:	7830      	ldrb	r0, [r6, #0]
 8008fe0:	f7ff ff8a 	bl	8008ef8 <__hexdig_fun>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d1f8      	bne.n	8008fda <__gethex+0xb6>
 8008fe8:	1bad      	subs	r5, r5, r6
 8008fea:	00ad      	lsls	r5, r5, #2
 8008fec:	e004      	b.n	8008ff8 <__gethex+0xd4>
 8008fee:	2400      	movs	r4, #0
 8008ff0:	4625      	mov	r5, r4
 8008ff2:	e7e0      	b.n	8008fb6 <__gethex+0x92>
 8008ff4:	2d00      	cmp	r5, #0
 8008ff6:	d1f7      	bne.n	8008fe8 <__gethex+0xc4>
 8008ff8:	7833      	ldrb	r3, [r6, #0]
 8008ffa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ffe:	2b50      	cmp	r3, #80	; 0x50
 8009000:	d13b      	bne.n	800907a <__gethex+0x156>
 8009002:	7873      	ldrb	r3, [r6, #1]
 8009004:	2b2b      	cmp	r3, #43	; 0x2b
 8009006:	d02c      	beq.n	8009062 <__gethex+0x13e>
 8009008:	2b2d      	cmp	r3, #45	; 0x2d
 800900a:	d02e      	beq.n	800906a <__gethex+0x146>
 800900c:	1c71      	adds	r1, r6, #1
 800900e:	f04f 0900 	mov.w	r9, #0
 8009012:	7808      	ldrb	r0, [r1, #0]
 8009014:	f7ff ff70 	bl	8008ef8 <__hexdig_fun>
 8009018:	1e43      	subs	r3, r0, #1
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b18      	cmp	r3, #24
 800901e:	d82c      	bhi.n	800907a <__gethex+0x156>
 8009020:	f1a0 0210 	sub.w	r2, r0, #16
 8009024:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009028:	f7ff ff66 	bl	8008ef8 <__hexdig_fun>
 800902c:	1e43      	subs	r3, r0, #1
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b18      	cmp	r3, #24
 8009032:	d91d      	bls.n	8009070 <__gethex+0x14c>
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	d000      	beq.n	800903c <__gethex+0x118>
 800903a:	4252      	negs	r2, r2
 800903c:	4415      	add	r5, r2
 800903e:	f8cb 1000 	str.w	r1, [fp]
 8009042:	b1e4      	cbz	r4, 800907e <__gethex+0x15a>
 8009044:	9b00      	ldr	r3, [sp, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	bf14      	ite	ne
 800904a:	2700      	movne	r7, #0
 800904c:	2706      	moveq	r7, #6
 800904e:	4638      	mov	r0, r7
 8009050:	b009      	add	sp, #36	; 0x24
 8009052:	ecbd 8b02 	vpop	{d8}
 8009056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905a:	463e      	mov	r6, r7
 800905c:	4625      	mov	r5, r4
 800905e:	2401      	movs	r4, #1
 8009060:	e7ca      	b.n	8008ff8 <__gethex+0xd4>
 8009062:	f04f 0900 	mov.w	r9, #0
 8009066:	1cb1      	adds	r1, r6, #2
 8009068:	e7d3      	b.n	8009012 <__gethex+0xee>
 800906a:	f04f 0901 	mov.w	r9, #1
 800906e:	e7fa      	b.n	8009066 <__gethex+0x142>
 8009070:	230a      	movs	r3, #10
 8009072:	fb03 0202 	mla	r2, r3, r2, r0
 8009076:	3a10      	subs	r2, #16
 8009078:	e7d4      	b.n	8009024 <__gethex+0x100>
 800907a:	4631      	mov	r1, r6
 800907c:	e7df      	b.n	800903e <__gethex+0x11a>
 800907e:	1bf3      	subs	r3, r6, r7
 8009080:	3b01      	subs	r3, #1
 8009082:	4621      	mov	r1, r4
 8009084:	2b07      	cmp	r3, #7
 8009086:	dc0b      	bgt.n	80090a0 <__gethex+0x17c>
 8009088:	ee18 0a10 	vmov	r0, s16
 800908c:	f000 fa82 	bl	8009594 <_Balloc>
 8009090:	4604      	mov	r4, r0
 8009092:	b940      	cbnz	r0, 80090a6 <__gethex+0x182>
 8009094:	4b5d      	ldr	r3, [pc, #372]	; (800920c <__gethex+0x2e8>)
 8009096:	4602      	mov	r2, r0
 8009098:	21de      	movs	r1, #222	; 0xde
 800909a:	485d      	ldr	r0, [pc, #372]	; (8009210 <__gethex+0x2ec>)
 800909c:	f7ff fdd8 	bl	8008c50 <__assert_func>
 80090a0:	3101      	adds	r1, #1
 80090a2:	105b      	asrs	r3, r3, #1
 80090a4:	e7ee      	b.n	8009084 <__gethex+0x160>
 80090a6:	f100 0914 	add.w	r9, r0, #20
 80090aa:	f04f 0b00 	mov.w	fp, #0
 80090ae:	f1ca 0301 	rsb	r3, sl, #1
 80090b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80090b6:	f8cd b000 	str.w	fp, [sp]
 80090ba:	9306      	str	r3, [sp, #24]
 80090bc:	42b7      	cmp	r7, r6
 80090be:	d340      	bcc.n	8009142 <__gethex+0x21e>
 80090c0:	9802      	ldr	r0, [sp, #8]
 80090c2:	9b00      	ldr	r3, [sp, #0]
 80090c4:	f840 3b04 	str.w	r3, [r0], #4
 80090c8:	eba0 0009 	sub.w	r0, r0, r9
 80090cc:	1080      	asrs	r0, r0, #2
 80090ce:	0146      	lsls	r6, r0, #5
 80090d0:	6120      	str	r0, [r4, #16]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fb50 	bl	8009778 <__hi0bits>
 80090d8:	1a30      	subs	r0, r6, r0
 80090da:	f8d8 6000 	ldr.w	r6, [r8]
 80090de:	42b0      	cmp	r0, r6
 80090e0:	dd63      	ble.n	80091aa <__gethex+0x286>
 80090e2:	1b87      	subs	r7, r0, r6
 80090e4:	4639      	mov	r1, r7
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 fef4 	bl	8009ed4 <__any_on>
 80090ec:	4682      	mov	sl, r0
 80090ee:	b1a8      	cbz	r0, 800911c <__gethex+0x1f8>
 80090f0:	1e7b      	subs	r3, r7, #1
 80090f2:	1159      	asrs	r1, r3, #5
 80090f4:	f003 021f 	and.w	r2, r3, #31
 80090f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80090fc:	f04f 0a01 	mov.w	sl, #1
 8009100:	fa0a f202 	lsl.w	r2, sl, r2
 8009104:	420a      	tst	r2, r1
 8009106:	d009      	beq.n	800911c <__gethex+0x1f8>
 8009108:	4553      	cmp	r3, sl
 800910a:	dd05      	ble.n	8009118 <__gethex+0x1f4>
 800910c:	1eb9      	subs	r1, r7, #2
 800910e:	4620      	mov	r0, r4
 8009110:	f000 fee0 	bl	8009ed4 <__any_on>
 8009114:	2800      	cmp	r0, #0
 8009116:	d145      	bne.n	80091a4 <__gethex+0x280>
 8009118:	f04f 0a02 	mov.w	sl, #2
 800911c:	4639      	mov	r1, r7
 800911e:	4620      	mov	r0, r4
 8009120:	f7ff fe98 	bl	8008e54 <rshift>
 8009124:	443d      	add	r5, r7
 8009126:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800912a:	42ab      	cmp	r3, r5
 800912c:	da4c      	bge.n	80091c8 <__gethex+0x2a4>
 800912e:	ee18 0a10 	vmov	r0, s16
 8009132:	4621      	mov	r1, r4
 8009134:	f000 fa6e 	bl	8009614 <_Bfree>
 8009138:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800913a:	2300      	movs	r3, #0
 800913c:	6013      	str	r3, [r2, #0]
 800913e:	27a3      	movs	r7, #163	; 0xa3
 8009140:	e785      	b.n	800904e <__gethex+0x12a>
 8009142:	1e73      	subs	r3, r6, #1
 8009144:	9a05      	ldr	r2, [sp, #20]
 8009146:	9303      	str	r3, [sp, #12]
 8009148:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800914c:	4293      	cmp	r3, r2
 800914e:	d019      	beq.n	8009184 <__gethex+0x260>
 8009150:	f1bb 0f20 	cmp.w	fp, #32
 8009154:	d107      	bne.n	8009166 <__gethex+0x242>
 8009156:	9b02      	ldr	r3, [sp, #8]
 8009158:	9a00      	ldr	r2, [sp, #0]
 800915a:	f843 2b04 	str.w	r2, [r3], #4
 800915e:	9302      	str	r3, [sp, #8]
 8009160:	2300      	movs	r3, #0
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	469b      	mov	fp, r3
 8009166:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800916a:	f7ff fec5 	bl	8008ef8 <__hexdig_fun>
 800916e:	9b00      	ldr	r3, [sp, #0]
 8009170:	f000 000f 	and.w	r0, r0, #15
 8009174:	fa00 f00b 	lsl.w	r0, r0, fp
 8009178:	4303      	orrs	r3, r0
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	f10b 0b04 	add.w	fp, fp, #4
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	e00d      	b.n	80091a0 <__gethex+0x27c>
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	9a06      	ldr	r2, [sp, #24]
 8009188:	4413      	add	r3, r2
 800918a:	42bb      	cmp	r3, r7
 800918c:	d3e0      	bcc.n	8009150 <__gethex+0x22c>
 800918e:	4618      	mov	r0, r3
 8009190:	9901      	ldr	r1, [sp, #4]
 8009192:	9307      	str	r3, [sp, #28]
 8009194:	4652      	mov	r2, sl
 8009196:	f001 f9db 	bl	800a550 <strncmp>
 800919a:	9b07      	ldr	r3, [sp, #28]
 800919c:	2800      	cmp	r0, #0
 800919e:	d1d7      	bne.n	8009150 <__gethex+0x22c>
 80091a0:	461e      	mov	r6, r3
 80091a2:	e78b      	b.n	80090bc <__gethex+0x198>
 80091a4:	f04f 0a03 	mov.w	sl, #3
 80091a8:	e7b8      	b.n	800911c <__gethex+0x1f8>
 80091aa:	da0a      	bge.n	80091c2 <__gethex+0x29e>
 80091ac:	1a37      	subs	r7, r6, r0
 80091ae:	4621      	mov	r1, r4
 80091b0:	ee18 0a10 	vmov	r0, s16
 80091b4:	463a      	mov	r2, r7
 80091b6:	f000 fc49 	bl	8009a4c <__lshift>
 80091ba:	1bed      	subs	r5, r5, r7
 80091bc:	4604      	mov	r4, r0
 80091be:	f100 0914 	add.w	r9, r0, #20
 80091c2:	f04f 0a00 	mov.w	sl, #0
 80091c6:	e7ae      	b.n	8009126 <__gethex+0x202>
 80091c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80091cc:	42a8      	cmp	r0, r5
 80091ce:	dd72      	ble.n	80092b6 <__gethex+0x392>
 80091d0:	1b45      	subs	r5, r0, r5
 80091d2:	42ae      	cmp	r6, r5
 80091d4:	dc36      	bgt.n	8009244 <__gethex+0x320>
 80091d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d02a      	beq.n	8009234 <__gethex+0x310>
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d02c      	beq.n	800923c <__gethex+0x318>
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d11c      	bne.n	8009220 <__gethex+0x2fc>
 80091e6:	42ae      	cmp	r6, r5
 80091e8:	d11a      	bne.n	8009220 <__gethex+0x2fc>
 80091ea:	2e01      	cmp	r6, #1
 80091ec:	d112      	bne.n	8009214 <__gethex+0x2f0>
 80091ee:	9a04      	ldr	r2, [sp, #16]
 80091f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	2301      	movs	r3, #1
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	f8c9 3000 	str.w	r3, [r9]
 80091fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009200:	2762      	movs	r7, #98	; 0x62
 8009202:	601c      	str	r4, [r3, #0]
 8009204:	e723      	b.n	800904e <__gethex+0x12a>
 8009206:	bf00      	nop
 8009208:	0800ac1c 	.word	0x0800ac1c
 800920c:	0800aba5 	.word	0x0800aba5
 8009210:	0800abb6 	.word	0x0800abb6
 8009214:	1e71      	subs	r1, r6, #1
 8009216:	4620      	mov	r0, r4
 8009218:	f000 fe5c 	bl	8009ed4 <__any_on>
 800921c:	2800      	cmp	r0, #0
 800921e:	d1e6      	bne.n	80091ee <__gethex+0x2ca>
 8009220:	ee18 0a10 	vmov	r0, s16
 8009224:	4621      	mov	r1, r4
 8009226:	f000 f9f5 	bl	8009614 <_Bfree>
 800922a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800922c:	2300      	movs	r3, #0
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	2750      	movs	r7, #80	; 0x50
 8009232:	e70c      	b.n	800904e <__gethex+0x12a>
 8009234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1f2      	bne.n	8009220 <__gethex+0x2fc>
 800923a:	e7d8      	b.n	80091ee <__gethex+0x2ca>
 800923c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1d5      	bne.n	80091ee <__gethex+0x2ca>
 8009242:	e7ed      	b.n	8009220 <__gethex+0x2fc>
 8009244:	1e6f      	subs	r7, r5, #1
 8009246:	f1ba 0f00 	cmp.w	sl, #0
 800924a:	d131      	bne.n	80092b0 <__gethex+0x38c>
 800924c:	b127      	cbz	r7, 8009258 <__gethex+0x334>
 800924e:	4639      	mov	r1, r7
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fe3f 	bl	8009ed4 <__any_on>
 8009256:	4682      	mov	sl, r0
 8009258:	117b      	asrs	r3, r7, #5
 800925a:	2101      	movs	r1, #1
 800925c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009260:	f007 071f 	and.w	r7, r7, #31
 8009264:	fa01 f707 	lsl.w	r7, r1, r7
 8009268:	421f      	tst	r7, r3
 800926a:	4629      	mov	r1, r5
 800926c:	4620      	mov	r0, r4
 800926e:	bf18      	it	ne
 8009270:	f04a 0a02 	orrne.w	sl, sl, #2
 8009274:	1b76      	subs	r6, r6, r5
 8009276:	f7ff fded 	bl	8008e54 <rshift>
 800927a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800927e:	2702      	movs	r7, #2
 8009280:	f1ba 0f00 	cmp.w	sl, #0
 8009284:	d048      	beq.n	8009318 <__gethex+0x3f4>
 8009286:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d015      	beq.n	80092ba <__gethex+0x396>
 800928e:	2b03      	cmp	r3, #3
 8009290:	d017      	beq.n	80092c2 <__gethex+0x39e>
 8009292:	2b01      	cmp	r3, #1
 8009294:	d109      	bne.n	80092aa <__gethex+0x386>
 8009296:	f01a 0f02 	tst.w	sl, #2
 800929a:	d006      	beq.n	80092aa <__gethex+0x386>
 800929c:	f8d9 0000 	ldr.w	r0, [r9]
 80092a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80092a4:	f01a 0f01 	tst.w	sl, #1
 80092a8:	d10e      	bne.n	80092c8 <__gethex+0x3a4>
 80092aa:	f047 0710 	orr.w	r7, r7, #16
 80092ae:	e033      	b.n	8009318 <__gethex+0x3f4>
 80092b0:	f04f 0a01 	mov.w	sl, #1
 80092b4:	e7d0      	b.n	8009258 <__gethex+0x334>
 80092b6:	2701      	movs	r7, #1
 80092b8:	e7e2      	b.n	8009280 <__gethex+0x35c>
 80092ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092bc:	f1c3 0301 	rsb	r3, r3, #1
 80092c0:	9315      	str	r3, [sp, #84]	; 0x54
 80092c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0f0      	beq.n	80092aa <__gethex+0x386>
 80092c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80092cc:	f104 0314 	add.w	r3, r4, #20
 80092d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80092d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80092d8:	f04f 0c00 	mov.w	ip, #0
 80092dc:	4618      	mov	r0, r3
 80092de:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092e6:	d01c      	beq.n	8009322 <__gethex+0x3fe>
 80092e8:	3201      	adds	r2, #1
 80092ea:	6002      	str	r2, [r0, #0]
 80092ec:	2f02      	cmp	r7, #2
 80092ee:	f104 0314 	add.w	r3, r4, #20
 80092f2:	d13f      	bne.n	8009374 <__gethex+0x450>
 80092f4:	f8d8 2000 	ldr.w	r2, [r8]
 80092f8:	3a01      	subs	r2, #1
 80092fa:	42b2      	cmp	r2, r6
 80092fc:	d10a      	bne.n	8009314 <__gethex+0x3f0>
 80092fe:	1171      	asrs	r1, r6, #5
 8009300:	2201      	movs	r2, #1
 8009302:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009306:	f006 061f 	and.w	r6, r6, #31
 800930a:	fa02 f606 	lsl.w	r6, r2, r6
 800930e:	421e      	tst	r6, r3
 8009310:	bf18      	it	ne
 8009312:	4617      	movne	r7, r2
 8009314:	f047 0720 	orr.w	r7, r7, #32
 8009318:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800931a:	601c      	str	r4, [r3, #0]
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	601d      	str	r5, [r3, #0]
 8009320:	e695      	b.n	800904e <__gethex+0x12a>
 8009322:	4299      	cmp	r1, r3
 8009324:	f843 cc04 	str.w	ip, [r3, #-4]
 8009328:	d8d8      	bhi.n	80092dc <__gethex+0x3b8>
 800932a:	68a3      	ldr	r3, [r4, #8]
 800932c:	459b      	cmp	fp, r3
 800932e:	db19      	blt.n	8009364 <__gethex+0x440>
 8009330:	6861      	ldr	r1, [r4, #4]
 8009332:	ee18 0a10 	vmov	r0, s16
 8009336:	3101      	adds	r1, #1
 8009338:	f000 f92c 	bl	8009594 <_Balloc>
 800933c:	4681      	mov	r9, r0
 800933e:	b918      	cbnz	r0, 8009348 <__gethex+0x424>
 8009340:	4b1a      	ldr	r3, [pc, #104]	; (80093ac <__gethex+0x488>)
 8009342:	4602      	mov	r2, r0
 8009344:	2184      	movs	r1, #132	; 0x84
 8009346:	e6a8      	b.n	800909a <__gethex+0x176>
 8009348:	6922      	ldr	r2, [r4, #16]
 800934a:	3202      	adds	r2, #2
 800934c:	f104 010c 	add.w	r1, r4, #12
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	300c      	adds	r0, #12
 8009354:	f7fe fbd6 	bl	8007b04 <memcpy>
 8009358:	4621      	mov	r1, r4
 800935a:	ee18 0a10 	vmov	r0, s16
 800935e:	f000 f959 	bl	8009614 <_Bfree>
 8009362:	464c      	mov	r4, r9
 8009364:	6923      	ldr	r3, [r4, #16]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800936c:	6122      	str	r2, [r4, #16]
 800936e:	2201      	movs	r2, #1
 8009370:	615a      	str	r2, [r3, #20]
 8009372:	e7bb      	b.n	80092ec <__gethex+0x3c8>
 8009374:	6922      	ldr	r2, [r4, #16]
 8009376:	455a      	cmp	r2, fp
 8009378:	dd0b      	ble.n	8009392 <__gethex+0x46e>
 800937a:	2101      	movs	r1, #1
 800937c:	4620      	mov	r0, r4
 800937e:	f7ff fd69 	bl	8008e54 <rshift>
 8009382:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009386:	3501      	adds	r5, #1
 8009388:	42ab      	cmp	r3, r5
 800938a:	f6ff aed0 	blt.w	800912e <__gethex+0x20a>
 800938e:	2701      	movs	r7, #1
 8009390:	e7c0      	b.n	8009314 <__gethex+0x3f0>
 8009392:	f016 061f 	ands.w	r6, r6, #31
 8009396:	d0fa      	beq.n	800938e <__gethex+0x46a>
 8009398:	4453      	add	r3, sl
 800939a:	f1c6 0620 	rsb	r6, r6, #32
 800939e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80093a2:	f000 f9e9 	bl	8009778 <__hi0bits>
 80093a6:	42b0      	cmp	r0, r6
 80093a8:	dbe7      	blt.n	800937a <__gethex+0x456>
 80093aa:	e7f0      	b.n	800938e <__gethex+0x46a>
 80093ac:	0800aba5 	.word	0x0800aba5

080093b0 <L_shift>:
 80093b0:	f1c2 0208 	rsb	r2, r2, #8
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	b570      	push	{r4, r5, r6, lr}
 80093b8:	f1c2 0620 	rsb	r6, r2, #32
 80093bc:	6843      	ldr	r3, [r0, #4]
 80093be:	6804      	ldr	r4, [r0, #0]
 80093c0:	fa03 f506 	lsl.w	r5, r3, r6
 80093c4:	432c      	orrs	r4, r5
 80093c6:	40d3      	lsrs	r3, r2
 80093c8:	6004      	str	r4, [r0, #0]
 80093ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80093ce:	4288      	cmp	r0, r1
 80093d0:	d3f4      	bcc.n	80093bc <L_shift+0xc>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}

080093d4 <__match>:
 80093d4:	b530      	push	{r4, r5, lr}
 80093d6:	6803      	ldr	r3, [r0, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093de:	b914      	cbnz	r4, 80093e6 <__match+0x12>
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	2001      	movs	r0, #1
 80093e4:	bd30      	pop	{r4, r5, pc}
 80093e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80093ee:	2d19      	cmp	r5, #25
 80093f0:	bf98      	it	ls
 80093f2:	3220      	addls	r2, #32
 80093f4:	42a2      	cmp	r2, r4
 80093f6:	d0f0      	beq.n	80093da <__match+0x6>
 80093f8:	2000      	movs	r0, #0
 80093fa:	e7f3      	b.n	80093e4 <__match+0x10>

080093fc <__hexnan>:
 80093fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	680b      	ldr	r3, [r1, #0]
 8009402:	115e      	asrs	r6, r3, #5
 8009404:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009408:	f013 031f 	ands.w	r3, r3, #31
 800940c:	b087      	sub	sp, #28
 800940e:	bf18      	it	ne
 8009410:	3604      	addne	r6, #4
 8009412:	2500      	movs	r5, #0
 8009414:	1f37      	subs	r7, r6, #4
 8009416:	4690      	mov	r8, r2
 8009418:	6802      	ldr	r2, [r0, #0]
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	4682      	mov	sl, r0
 800941e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009422:	46b9      	mov	r9, r7
 8009424:	463c      	mov	r4, r7
 8009426:	9502      	str	r5, [sp, #8]
 8009428:	46ab      	mov	fp, r5
 800942a:	7851      	ldrb	r1, [r2, #1]
 800942c:	1c53      	adds	r3, r2, #1
 800942e:	9303      	str	r3, [sp, #12]
 8009430:	b341      	cbz	r1, 8009484 <__hexnan+0x88>
 8009432:	4608      	mov	r0, r1
 8009434:	9205      	str	r2, [sp, #20]
 8009436:	9104      	str	r1, [sp, #16]
 8009438:	f7ff fd5e 	bl	8008ef8 <__hexdig_fun>
 800943c:	2800      	cmp	r0, #0
 800943e:	d14f      	bne.n	80094e0 <__hexnan+0xe4>
 8009440:	9904      	ldr	r1, [sp, #16]
 8009442:	9a05      	ldr	r2, [sp, #20]
 8009444:	2920      	cmp	r1, #32
 8009446:	d818      	bhi.n	800947a <__hexnan+0x7e>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	459b      	cmp	fp, r3
 800944c:	dd13      	ble.n	8009476 <__hexnan+0x7a>
 800944e:	454c      	cmp	r4, r9
 8009450:	d206      	bcs.n	8009460 <__hexnan+0x64>
 8009452:	2d07      	cmp	r5, #7
 8009454:	dc04      	bgt.n	8009460 <__hexnan+0x64>
 8009456:	462a      	mov	r2, r5
 8009458:	4649      	mov	r1, r9
 800945a:	4620      	mov	r0, r4
 800945c:	f7ff ffa8 	bl	80093b0 <L_shift>
 8009460:	4544      	cmp	r4, r8
 8009462:	d950      	bls.n	8009506 <__hexnan+0x10a>
 8009464:	2300      	movs	r3, #0
 8009466:	f1a4 0904 	sub.w	r9, r4, #4
 800946a:	f844 3c04 	str.w	r3, [r4, #-4]
 800946e:	f8cd b008 	str.w	fp, [sp, #8]
 8009472:	464c      	mov	r4, r9
 8009474:	461d      	mov	r5, r3
 8009476:	9a03      	ldr	r2, [sp, #12]
 8009478:	e7d7      	b.n	800942a <__hexnan+0x2e>
 800947a:	2929      	cmp	r1, #41	; 0x29
 800947c:	d156      	bne.n	800952c <__hexnan+0x130>
 800947e:	3202      	adds	r2, #2
 8009480:	f8ca 2000 	str.w	r2, [sl]
 8009484:	f1bb 0f00 	cmp.w	fp, #0
 8009488:	d050      	beq.n	800952c <__hexnan+0x130>
 800948a:	454c      	cmp	r4, r9
 800948c:	d206      	bcs.n	800949c <__hexnan+0xa0>
 800948e:	2d07      	cmp	r5, #7
 8009490:	dc04      	bgt.n	800949c <__hexnan+0xa0>
 8009492:	462a      	mov	r2, r5
 8009494:	4649      	mov	r1, r9
 8009496:	4620      	mov	r0, r4
 8009498:	f7ff ff8a 	bl	80093b0 <L_shift>
 800949c:	4544      	cmp	r4, r8
 800949e:	d934      	bls.n	800950a <__hexnan+0x10e>
 80094a0:	f1a8 0204 	sub.w	r2, r8, #4
 80094a4:	4623      	mov	r3, r4
 80094a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80094aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80094ae:	429f      	cmp	r7, r3
 80094b0:	d2f9      	bcs.n	80094a6 <__hexnan+0xaa>
 80094b2:	1b3b      	subs	r3, r7, r4
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	3304      	adds	r3, #4
 80094ba:	3401      	adds	r4, #1
 80094bc:	3e03      	subs	r6, #3
 80094be:	42b4      	cmp	r4, r6
 80094c0:	bf88      	it	hi
 80094c2:	2304      	movhi	r3, #4
 80094c4:	4443      	add	r3, r8
 80094c6:	2200      	movs	r2, #0
 80094c8:	f843 2b04 	str.w	r2, [r3], #4
 80094cc:	429f      	cmp	r7, r3
 80094ce:	d2fb      	bcs.n	80094c8 <__hexnan+0xcc>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	b91b      	cbnz	r3, 80094dc <__hexnan+0xe0>
 80094d4:	4547      	cmp	r7, r8
 80094d6:	d127      	bne.n	8009528 <__hexnan+0x12c>
 80094d8:	2301      	movs	r3, #1
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	2005      	movs	r0, #5
 80094de:	e026      	b.n	800952e <__hexnan+0x132>
 80094e0:	3501      	adds	r5, #1
 80094e2:	2d08      	cmp	r5, #8
 80094e4:	f10b 0b01 	add.w	fp, fp, #1
 80094e8:	dd06      	ble.n	80094f8 <__hexnan+0xfc>
 80094ea:	4544      	cmp	r4, r8
 80094ec:	d9c3      	bls.n	8009476 <__hexnan+0x7a>
 80094ee:	2300      	movs	r3, #0
 80094f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80094f4:	2501      	movs	r5, #1
 80094f6:	3c04      	subs	r4, #4
 80094f8:	6822      	ldr	r2, [r4, #0]
 80094fa:	f000 000f 	and.w	r0, r0, #15
 80094fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009502:	6022      	str	r2, [r4, #0]
 8009504:	e7b7      	b.n	8009476 <__hexnan+0x7a>
 8009506:	2508      	movs	r5, #8
 8009508:	e7b5      	b.n	8009476 <__hexnan+0x7a>
 800950a:	9b01      	ldr	r3, [sp, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0df      	beq.n	80094d0 <__hexnan+0xd4>
 8009510:	f04f 32ff 	mov.w	r2, #4294967295
 8009514:	f1c3 0320 	rsb	r3, r3, #32
 8009518:	fa22 f303 	lsr.w	r3, r2, r3
 800951c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009520:	401a      	ands	r2, r3
 8009522:	f846 2c04 	str.w	r2, [r6, #-4]
 8009526:	e7d3      	b.n	80094d0 <__hexnan+0xd4>
 8009528:	3f04      	subs	r7, #4
 800952a:	e7d1      	b.n	80094d0 <__hexnan+0xd4>
 800952c:	2004      	movs	r0, #4
 800952e:	b007      	add	sp, #28
 8009530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009534 <_lseek_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d07      	ldr	r5, [pc, #28]	; (8009554 <_lseek_r+0x20>)
 8009538:	4604      	mov	r4, r0
 800953a:	4608      	mov	r0, r1
 800953c:	4611      	mov	r1, r2
 800953e:	2200      	movs	r2, #0
 8009540:	602a      	str	r2, [r5, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	f7f8 faf4 	bl	8001b30 <_lseek>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_lseek_r+0x1e>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_lseek_r+0x1e>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	2000301c 	.word	0x2000301c

08009558 <__ascii_mbtowc>:
 8009558:	b082      	sub	sp, #8
 800955a:	b901      	cbnz	r1, 800955e <__ascii_mbtowc+0x6>
 800955c:	a901      	add	r1, sp, #4
 800955e:	b142      	cbz	r2, 8009572 <__ascii_mbtowc+0x1a>
 8009560:	b14b      	cbz	r3, 8009576 <__ascii_mbtowc+0x1e>
 8009562:	7813      	ldrb	r3, [r2, #0]
 8009564:	600b      	str	r3, [r1, #0]
 8009566:	7812      	ldrb	r2, [r2, #0]
 8009568:	1e10      	subs	r0, r2, #0
 800956a:	bf18      	it	ne
 800956c:	2001      	movne	r0, #1
 800956e:	b002      	add	sp, #8
 8009570:	4770      	bx	lr
 8009572:	4610      	mov	r0, r2
 8009574:	e7fb      	b.n	800956e <__ascii_mbtowc+0x16>
 8009576:	f06f 0001 	mvn.w	r0, #1
 800957a:	e7f8      	b.n	800956e <__ascii_mbtowc+0x16>

0800957c <__malloc_lock>:
 800957c:	4801      	ldr	r0, [pc, #4]	; (8009584 <__malloc_lock+0x8>)
 800957e:	f7fe bab6 	b.w	8007aee <__retarget_lock_acquire_recursive>
 8009582:	bf00      	nop
 8009584:	20003010 	.word	0x20003010

08009588 <__malloc_unlock>:
 8009588:	4801      	ldr	r0, [pc, #4]	; (8009590 <__malloc_unlock+0x8>)
 800958a:	f7fe bab1 	b.w	8007af0 <__retarget_lock_release_recursive>
 800958e:	bf00      	nop
 8009590:	20003010 	.word	0x20003010

08009594 <_Balloc>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009598:	4604      	mov	r4, r0
 800959a:	460d      	mov	r5, r1
 800959c:	b976      	cbnz	r6, 80095bc <_Balloc+0x28>
 800959e:	2010      	movs	r0, #16
 80095a0:	f7fe faa8 	bl	8007af4 <malloc>
 80095a4:	4602      	mov	r2, r0
 80095a6:	6260      	str	r0, [r4, #36]	; 0x24
 80095a8:	b920      	cbnz	r0, 80095b4 <_Balloc+0x20>
 80095aa:	4b18      	ldr	r3, [pc, #96]	; (800960c <_Balloc+0x78>)
 80095ac:	4818      	ldr	r0, [pc, #96]	; (8009610 <_Balloc+0x7c>)
 80095ae:	2166      	movs	r1, #102	; 0x66
 80095b0:	f7ff fb4e 	bl	8008c50 <__assert_func>
 80095b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095b8:	6006      	str	r6, [r0, #0]
 80095ba:	60c6      	str	r6, [r0, #12]
 80095bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095be:	68f3      	ldr	r3, [r6, #12]
 80095c0:	b183      	cbz	r3, 80095e4 <_Balloc+0x50>
 80095c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095ca:	b9b8      	cbnz	r0, 80095fc <_Balloc+0x68>
 80095cc:	2101      	movs	r1, #1
 80095ce:	fa01 f605 	lsl.w	r6, r1, r5
 80095d2:	1d72      	adds	r2, r6, #5
 80095d4:	0092      	lsls	r2, r2, #2
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 fc9d 	bl	8009f16 <_calloc_r>
 80095dc:	b160      	cbz	r0, 80095f8 <_Balloc+0x64>
 80095de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095e2:	e00e      	b.n	8009602 <_Balloc+0x6e>
 80095e4:	2221      	movs	r2, #33	; 0x21
 80095e6:	2104      	movs	r1, #4
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 fc94 	bl	8009f16 <_calloc_r>
 80095ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f0:	60f0      	str	r0, [r6, #12]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e4      	bne.n	80095c2 <_Balloc+0x2e>
 80095f8:	2000      	movs	r0, #0
 80095fa:	bd70      	pop	{r4, r5, r6, pc}
 80095fc:	6802      	ldr	r2, [r0, #0]
 80095fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009602:	2300      	movs	r3, #0
 8009604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009608:	e7f7      	b.n	80095fa <_Balloc+0x66>
 800960a:	bf00      	nop
 800960c:	0800ac30 	.word	0x0800ac30
 8009610:	0800ac47 	.word	0x0800ac47

08009614 <_Bfree>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009618:	4605      	mov	r5, r0
 800961a:	460c      	mov	r4, r1
 800961c:	b976      	cbnz	r6, 800963c <_Bfree+0x28>
 800961e:	2010      	movs	r0, #16
 8009620:	f7fe fa68 	bl	8007af4 <malloc>
 8009624:	4602      	mov	r2, r0
 8009626:	6268      	str	r0, [r5, #36]	; 0x24
 8009628:	b920      	cbnz	r0, 8009634 <_Bfree+0x20>
 800962a:	4b09      	ldr	r3, [pc, #36]	; (8009650 <_Bfree+0x3c>)
 800962c:	4809      	ldr	r0, [pc, #36]	; (8009654 <_Bfree+0x40>)
 800962e:	218a      	movs	r1, #138	; 0x8a
 8009630:	f7ff fb0e 	bl	8008c50 <__assert_func>
 8009634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009638:	6006      	str	r6, [r0, #0]
 800963a:	60c6      	str	r6, [r0, #12]
 800963c:	b13c      	cbz	r4, 800964e <_Bfree+0x3a>
 800963e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009640:	6862      	ldr	r2, [r4, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009648:	6021      	str	r1, [r4, #0]
 800964a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	0800ac30 	.word	0x0800ac30
 8009654:	0800ac47 	.word	0x0800ac47

08009658 <__multadd>:
 8009658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965c:	690d      	ldr	r5, [r1, #16]
 800965e:	4607      	mov	r7, r0
 8009660:	460c      	mov	r4, r1
 8009662:	461e      	mov	r6, r3
 8009664:	f101 0c14 	add.w	ip, r1, #20
 8009668:	2000      	movs	r0, #0
 800966a:	f8dc 3000 	ldr.w	r3, [ip]
 800966e:	b299      	uxth	r1, r3
 8009670:	fb02 6101 	mla	r1, r2, r1, r6
 8009674:	0c1e      	lsrs	r6, r3, #16
 8009676:	0c0b      	lsrs	r3, r1, #16
 8009678:	fb02 3306 	mla	r3, r2, r6, r3
 800967c:	b289      	uxth	r1, r1
 800967e:	3001      	adds	r0, #1
 8009680:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009684:	4285      	cmp	r5, r0
 8009686:	f84c 1b04 	str.w	r1, [ip], #4
 800968a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800968e:	dcec      	bgt.n	800966a <__multadd+0x12>
 8009690:	b30e      	cbz	r6, 80096d6 <__multadd+0x7e>
 8009692:	68a3      	ldr	r3, [r4, #8]
 8009694:	42ab      	cmp	r3, r5
 8009696:	dc19      	bgt.n	80096cc <__multadd+0x74>
 8009698:	6861      	ldr	r1, [r4, #4]
 800969a:	4638      	mov	r0, r7
 800969c:	3101      	adds	r1, #1
 800969e:	f7ff ff79 	bl	8009594 <_Balloc>
 80096a2:	4680      	mov	r8, r0
 80096a4:	b928      	cbnz	r0, 80096b2 <__multadd+0x5a>
 80096a6:	4602      	mov	r2, r0
 80096a8:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <__multadd+0x84>)
 80096aa:	480d      	ldr	r0, [pc, #52]	; (80096e0 <__multadd+0x88>)
 80096ac:	21b5      	movs	r1, #181	; 0xb5
 80096ae:	f7ff facf 	bl	8008c50 <__assert_func>
 80096b2:	6922      	ldr	r2, [r4, #16]
 80096b4:	3202      	adds	r2, #2
 80096b6:	f104 010c 	add.w	r1, r4, #12
 80096ba:	0092      	lsls	r2, r2, #2
 80096bc:	300c      	adds	r0, #12
 80096be:	f7fe fa21 	bl	8007b04 <memcpy>
 80096c2:	4621      	mov	r1, r4
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff ffa5 	bl	8009614 <_Bfree>
 80096ca:	4644      	mov	r4, r8
 80096cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096d0:	3501      	adds	r5, #1
 80096d2:	615e      	str	r6, [r3, #20]
 80096d4:	6125      	str	r5, [r4, #16]
 80096d6:	4620      	mov	r0, r4
 80096d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096dc:	0800aba5 	.word	0x0800aba5
 80096e0:	0800ac47 	.word	0x0800ac47

080096e4 <__s2b>:
 80096e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e8:	460c      	mov	r4, r1
 80096ea:	4615      	mov	r5, r2
 80096ec:	461f      	mov	r7, r3
 80096ee:	2209      	movs	r2, #9
 80096f0:	3308      	adds	r3, #8
 80096f2:	4606      	mov	r6, r0
 80096f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80096f8:	2100      	movs	r1, #0
 80096fa:	2201      	movs	r2, #1
 80096fc:	429a      	cmp	r2, r3
 80096fe:	db09      	blt.n	8009714 <__s2b+0x30>
 8009700:	4630      	mov	r0, r6
 8009702:	f7ff ff47 	bl	8009594 <_Balloc>
 8009706:	b940      	cbnz	r0, 800971a <__s2b+0x36>
 8009708:	4602      	mov	r2, r0
 800970a:	4b19      	ldr	r3, [pc, #100]	; (8009770 <__s2b+0x8c>)
 800970c:	4819      	ldr	r0, [pc, #100]	; (8009774 <__s2b+0x90>)
 800970e:	21ce      	movs	r1, #206	; 0xce
 8009710:	f7ff fa9e 	bl	8008c50 <__assert_func>
 8009714:	0052      	lsls	r2, r2, #1
 8009716:	3101      	adds	r1, #1
 8009718:	e7f0      	b.n	80096fc <__s2b+0x18>
 800971a:	9b08      	ldr	r3, [sp, #32]
 800971c:	6143      	str	r3, [r0, #20]
 800971e:	2d09      	cmp	r5, #9
 8009720:	f04f 0301 	mov.w	r3, #1
 8009724:	6103      	str	r3, [r0, #16]
 8009726:	dd16      	ble.n	8009756 <__s2b+0x72>
 8009728:	f104 0909 	add.w	r9, r4, #9
 800972c:	46c8      	mov	r8, r9
 800972e:	442c      	add	r4, r5
 8009730:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009734:	4601      	mov	r1, r0
 8009736:	3b30      	subs	r3, #48	; 0x30
 8009738:	220a      	movs	r2, #10
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ff8c 	bl	8009658 <__multadd>
 8009740:	45a0      	cmp	r8, r4
 8009742:	d1f5      	bne.n	8009730 <__s2b+0x4c>
 8009744:	f1a5 0408 	sub.w	r4, r5, #8
 8009748:	444c      	add	r4, r9
 800974a:	1b2d      	subs	r5, r5, r4
 800974c:	1963      	adds	r3, r4, r5
 800974e:	42bb      	cmp	r3, r7
 8009750:	db04      	blt.n	800975c <__s2b+0x78>
 8009752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009756:	340a      	adds	r4, #10
 8009758:	2509      	movs	r5, #9
 800975a:	e7f6      	b.n	800974a <__s2b+0x66>
 800975c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009760:	4601      	mov	r1, r0
 8009762:	3b30      	subs	r3, #48	; 0x30
 8009764:	220a      	movs	r2, #10
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ff76 	bl	8009658 <__multadd>
 800976c:	e7ee      	b.n	800974c <__s2b+0x68>
 800976e:	bf00      	nop
 8009770:	0800aba5 	.word	0x0800aba5
 8009774:	0800ac47 	.word	0x0800ac47

08009778 <__hi0bits>:
 8009778:	0c03      	lsrs	r3, r0, #16
 800977a:	041b      	lsls	r3, r3, #16
 800977c:	b9d3      	cbnz	r3, 80097b4 <__hi0bits+0x3c>
 800977e:	0400      	lsls	r0, r0, #16
 8009780:	2310      	movs	r3, #16
 8009782:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009786:	bf04      	itt	eq
 8009788:	0200      	lsleq	r0, r0, #8
 800978a:	3308      	addeq	r3, #8
 800978c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009790:	bf04      	itt	eq
 8009792:	0100      	lsleq	r0, r0, #4
 8009794:	3304      	addeq	r3, #4
 8009796:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800979a:	bf04      	itt	eq
 800979c:	0080      	lsleq	r0, r0, #2
 800979e:	3302      	addeq	r3, #2
 80097a0:	2800      	cmp	r0, #0
 80097a2:	db05      	blt.n	80097b0 <__hi0bits+0x38>
 80097a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097a8:	f103 0301 	add.w	r3, r3, #1
 80097ac:	bf08      	it	eq
 80097ae:	2320      	moveq	r3, #32
 80097b0:	4618      	mov	r0, r3
 80097b2:	4770      	bx	lr
 80097b4:	2300      	movs	r3, #0
 80097b6:	e7e4      	b.n	8009782 <__hi0bits+0xa>

080097b8 <__lo0bits>:
 80097b8:	6803      	ldr	r3, [r0, #0]
 80097ba:	f013 0207 	ands.w	r2, r3, #7
 80097be:	4601      	mov	r1, r0
 80097c0:	d00b      	beq.n	80097da <__lo0bits+0x22>
 80097c2:	07da      	lsls	r2, r3, #31
 80097c4:	d423      	bmi.n	800980e <__lo0bits+0x56>
 80097c6:	0798      	lsls	r0, r3, #30
 80097c8:	bf49      	itett	mi
 80097ca:	085b      	lsrmi	r3, r3, #1
 80097cc:	089b      	lsrpl	r3, r3, #2
 80097ce:	2001      	movmi	r0, #1
 80097d0:	600b      	strmi	r3, [r1, #0]
 80097d2:	bf5c      	itt	pl
 80097d4:	600b      	strpl	r3, [r1, #0]
 80097d6:	2002      	movpl	r0, #2
 80097d8:	4770      	bx	lr
 80097da:	b298      	uxth	r0, r3
 80097dc:	b9a8      	cbnz	r0, 800980a <__lo0bits+0x52>
 80097de:	0c1b      	lsrs	r3, r3, #16
 80097e0:	2010      	movs	r0, #16
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	b90a      	cbnz	r2, 80097ea <__lo0bits+0x32>
 80097e6:	3008      	adds	r0, #8
 80097e8:	0a1b      	lsrs	r3, r3, #8
 80097ea:	071a      	lsls	r2, r3, #28
 80097ec:	bf04      	itt	eq
 80097ee:	091b      	lsreq	r3, r3, #4
 80097f0:	3004      	addeq	r0, #4
 80097f2:	079a      	lsls	r2, r3, #30
 80097f4:	bf04      	itt	eq
 80097f6:	089b      	lsreq	r3, r3, #2
 80097f8:	3002      	addeq	r0, #2
 80097fa:	07da      	lsls	r2, r3, #31
 80097fc:	d403      	bmi.n	8009806 <__lo0bits+0x4e>
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	f100 0001 	add.w	r0, r0, #1
 8009804:	d005      	beq.n	8009812 <__lo0bits+0x5a>
 8009806:	600b      	str	r3, [r1, #0]
 8009808:	4770      	bx	lr
 800980a:	4610      	mov	r0, r2
 800980c:	e7e9      	b.n	80097e2 <__lo0bits+0x2a>
 800980e:	2000      	movs	r0, #0
 8009810:	4770      	bx	lr
 8009812:	2020      	movs	r0, #32
 8009814:	4770      	bx	lr
	...

08009818 <__i2b>:
 8009818:	b510      	push	{r4, lr}
 800981a:	460c      	mov	r4, r1
 800981c:	2101      	movs	r1, #1
 800981e:	f7ff feb9 	bl	8009594 <_Balloc>
 8009822:	4602      	mov	r2, r0
 8009824:	b928      	cbnz	r0, 8009832 <__i2b+0x1a>
 8009826:	4b05      	ldr	r3, [pc, #20]	; (800983c <__i2b+0x24>)
 8009828:	4805      	ldr	r0, [pc, #20]	; (8009840 <__i2b+0x28>)
 800982a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800982e:	f7ff fa0f 	bl	8008c50 <__assert_func>
 8009832:	2301      	movs	r3, #1
 8009834:	6144      	str	r4, [r0, #20]
 8009836:	6103      	str	r3, [r0, #16]
 8009838:	bd10      	pop	{r4, pc}
 800983a:	bf00      	nop
 800983c:	0800aba5 	.word	0x0800aba5
 8009840:	0800ac47 	.word	0x0800ac47

08009844 <__multiply>:
 8009844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	4691      	mov	r9, r2
 800984a:	690a      	ldr	r2, [r1, #16]
 800984c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009850:	429a      	cmp	r2, r3
 8009852:	bfb8      	it	lt
 8009854:	460b      	movlt	r3, r1
 8009856:	460c      	mov	r4, r1
 8009858:	bfbc      	itt	lt
 800985a:	464c      	movlt	r4, r9
 800985c:	4699      	movlt	r9, r3
 800985e:	6927      	ldr	r7, [r4, #16]
 8009860:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009864:	68a3      	ldr	r3, [r4, #8]
 8009866:	6861      	ldr	r1, [r4, #4]
 8009868:	eb07 060a 	add.w	r6, r7, sl
 800986c:	42b3      	cmp	r3, r6
 800986e:	b085      	sub	sp, #20
 8009870:	bfb8      	it	lt
 8009872:	3101      	addlt	r1, #1
 8009874:	f7ff fe8e 	bl	8009594 <_Balloc>
 8009878:	b930      	cbnz	r0, 8009888 <__multiply+0x44>
 800987a:	4602      	mov	r2, r0
 800987c:	4b44      	ldr	r3, [pc, #272]	; (8009990 <__multiply+0x14c>)
 800987e:	4845      	ldr	r0, [pc, #276]	; (8009994 <__multiply+0x150>)
 8009880:	f240 115d 	movw	r1, #349	; 0x15d
 8009884:	f7ff f9e4 	bl	8008c50 <__assert_func>
 8009888:	f100 0514 	add.w	r5, r0, #20
 800988c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009890:	462b      	mov	r3, r5
 8009892:	2200      	movs	r2, #0
 8009894:	4543      	cmp	r3, r8
 8009896:	d321      	bcc.n	80098dc <__multiply+0x98>
 8009898:	f104 0314 	add.w	r3, r4, #20
 800989c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098a0:	f109 0314 	add.w	r3, r9, #20
 80098a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098a8:	9202      	str	r2, [sp, #8]
 80098aa:	1b3a      	subs	r2, r7, r4
 80098ac:	3a15      	subs	r2, #21
 80098ae:	f022 0203 	bic.w	r2, r2, #3
 80098b2:	3204      	adds	r2, #4
 80098b4:	f104 0115 	add.w	r1, r4, #21
 80098b8:	428f      	cmp	r7, r1
 80098ba:	bf38      	it	cc
 80098bc:	2204      	movcc	r2, #4
 80098be:	9201      	str	r2, [sp, #4]
 80098c0:	9a02      	ldr	r2, [sp, #8]
 80098c2:	9303      	str	r3, [sp, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d80c      	bhi.n	80098e2 <__multiply+0x9e>
 80098c8:	2e00      	cmp	r6, #0
 80098ca:	dd03      	ble.n	80098d4 <__multiply+0x90>
 80098cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d05a      	beq.n	800998a <__multiply+0x146>
 80098d4:	6106      	str	r6, [r0, #16]
 80098d6:	b005      	add	sp, #20
 80098d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098dc:	f843 2b04 	str.w	r2, [r3], #4
 80098e0:	e7d8      	b.n	8009894 <__multiply+0x50>
 80098e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80098e6:	f1ba 0f00 	cmp.w	sl, #0
 80098ea:	d024      	beq.n	8009936 <__multiply+0xf2>
 80098ec:	f104 0e14 	add.w	lr, r4, #20
 80098f0:	46a9      	mov	r9, r5
 80098f2:	f04f 0c00 	mov.w	ip, #0
 80098f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098fa:	f8d9 1000 	ldr.w	r1, [r9]
 80098fe:	fa1f fb82 	uxth.w	fp, r2
 8009902:	b289      	uxth	r1, r1
 8009904:	fb0a 110b 	mla	r1, sl, fp, r1
 8009908:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800990c:	f8d9 2000 	ldr.w	r2, [r9]
 8009910:	4461      	add	r1, ip
 8009912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009916:	fb0a c20b 	mla	r2, sl, fp, ip
 800991a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800991e:	b289      	uxth	r1, r1
 8009920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009924:	4577      	cmp	r7, lr
 8009926:	f849 1b04 	str.w	r1, [r9], #4
 800992a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800992e:	d8e2      	bhi.n	80098f6 <__multiply+0xb2>
 8009930:	9a01      	ldr	r2, [sp, #4]
 8009932:	f845 c002 	str.w	ip, [r5, r2]
 8009936:	9a03      	ldr	r2, [sp, #12]
 8009938:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800993c:	3304      	adds	r3, #4
 800993e:	f1b9 0f00 	cmp.w	r9, #0
 8009942:	d020      	beq.n	8009986 <__multiply+0x142>
 8009944:	6829      	ldr	r1, [r5, #0]
 8009946:	f104 0c14 	add.w	ip, r4, #20
 800994a:	46ae      	mov	lr, r5
 800994c:	f04f 0a00 	mov.w	sl, #0
 8009950:	f8bc b000 	ldrh.w	fp, [ip]
 8009954:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009958:	fb09 220b 	mla	r2, r9, fp, r2
 800995c:	4492      	add	sl, r2
 800995e:	b289      	uxth	r1, r1
 8009960:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009964:	f84e 1b04 	str.w	r1, [lr], #4
 8009968:	f85c 2b04 	ldr.w	r2, [ip], #4
 800996c:	f8be 1000 	ldrh.w	r1, [lr]
 8009970:	0c12      	lsrs	r2, r2, #16
 8009972:	fb09 1102 	mla	r1, r9, r2, r1
 8009976:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800997a:	4567      	cmp	r7, ip
 800997c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009980:	d8e6      	bhi.n	8009950 <__multiply+0x10c>
 8009982:	9a01      	ldr	r2, [sp, #4]
 8009984:	50a9      	str	r1, [r5, r2]
 8009986:	3504      	adds	r5, #4
 8009988:	e79a      	b.n	80098c0 <__multiply+0x7c>
 800998a:	3e01      	subs	r6, #1
 800998c:	e79c      	b.n	80098c8 <__multiply+0x84>
 800998e:	bf00      	nop
 8009990:	0800aba5 	.word	0x0800aba5
 8009994:	0800ac47 	.word	0x0800ac47

08009998 <__pow5mult>:
 8009998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800999c:	4615      	mov	r5, r2
 800999e:	f012 0203 	ands.w	r2, r2, #3
 80099a2:	4606      	mov	r6, r0
 80099a4:	460f      	mov	r7, r1
 80099a6:	d007      	beq.n	80099b8 <__pow5mult+0x20>
 80099a8:	4c25      	ldr	r4, [pc, #148]	; (8009a40 <__pow5mult+0xa8>)
 80099aa:	3a01      	subs	r2, #1
 80099ac:	2300      	movs	r3, #0
 80099ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099b2:	f7ff fe51 	bl	8009658 <__multadd>
 80099b6:	4607      	mov	r7, r0
 80099b8:	10ad      	asrs	r5, r5, #2
 80099ba:	d03d      	beq.n	8009a38 <__pow5mult+0xa0>
 80099bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099be:	b97c      	cbnz	r4, 80099e0 <__pow5mult+0x48>
 80099c0:	2010      	movs	r0, #16
 80099c2:	f7fe f897 	bl	8007af4 <malloc>
 80099c6:	4602      	mov	r2, r0
 80099c8:	6270      	str	r0, [r6, #36]	; 0x24
 80099ca:	b928      	cbnz	r0, 80099d8 <__pow5mult+0x40>
 80099cc:	4b1d      	ldr	r3, [pc, #116]	; (8009a44 <__pow5mult+0xac>)
 80099ce:	481e      	ldr	r0, [pc, #120]	; (8009a48 <__pow5mult+0xb0>)
 80099d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099d4:	f7ff f93c 	bl	8008c50 <__assert_func>
 80099d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099dc:	6004      	str	r4, [r0, #0]
 80099de:	60c4      	str	r4, [r0, #12]
 80099e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80099e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099e8:	b94c      	cbnz	r4, 80099fe <__pow5mult+0x66>
 80099ea:	f240 2171 	movw	r1, #625	; 0x271
 80099ee:	4630      	mov	r0, r6
 80099f0:	f7ff ff12 	bl	8009818 <__i2b>
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099fa:	4604      	mov	r4, r0
 80099fc:	6003      	str	r3, [r0, #0]
 80099fe:	f04f 0900 	mov.w	r9, #0
 8009a02:	07eb      	lsls	r3, r5, #31
 8009a04:	d50a      	bpl.n	8009a1c <__pow5mult+0x84>
 8009a06:	4639      	mov	r1, r7
 8009a08:	4622      	mov	r2, r4
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f7ff ff1a 	bl	8009844 <__multiply>
 8009a10:	4639      	mov	r1, r7
 8009a12:	4680      	mov	r8, r0
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7ff fdfd 	bl	8009614 <_Bfree>
 8009a1a:	4647      	mov	r7, r8
 8009a1c:	106d      	asrs	r5, r5, #1
 8009a1e:	d00b      	beq.n	8009a38 <__pow5mult+0xa0>
 8009a20:	6820      	ldr	r0, [r4, #0]
 8009a22:	b938      	cbnz	r0, 8009a34 <__pow5mult+0x9c>
 8009a24:	4622      	mov	r2, r4
 8009a26:	4621      	mov	r1, r4
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7ff ff0b 	bl	8009844 <__multiply>
 8009a2e:	6020      	str	r0, [r4, #0]
 8009a30:	f8c0 9000 	str.w	r9, [r0]
 8009a34:	4604      	mov	r4, r0
 8009a36:	e7e4      	b.n	8009a02 <__pow5mult+0x6a>
 8009a38:	4638      	mov	r0, r7
 8009a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800ad98 	.word	0x0800ad98
 8009a44:	0800ac30 	.word	0x0800ac30
 8009a48:	0800ac47 	.word	0x0800ac47

08009a4c <__lshift>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	460c      	mov	r4, r1
 8009a52:	6849      	ldr	r1, [r1, #4]
 8009a54:	6923      	ldr	r3, [r4, #16]
 8009a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	4691      	mov	r9, r2
 8009a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a64:	f108 0601 	add.w	r6, r8, #1
 8009a68:	42b3      	cmp	r3, r6
 8009a6a:	db0b      	blt.n	8009a84 <__lshift+0x38>
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff fd91 	bl	8009594 <_Balloc>
 8009a72:	4605      	mov	r5, r0
 8009a74:	b948      	cbnz	r0, 8009a8a <__lshift+0x3e>
 8009a76:	4602      	mov	r2, r0
 8009a78:	4b2a      	ldr	r3, [pc, #168]	; (8009b24 <__lshift+0xd8>)
 8009a7a:	482b      	ldr	r0, [pc, #172]	; (8009b28 <__lshift+0xdc>)
 8009a7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a80:	f7ff f8e6 	bl	8008c50 <__assert_func>
 8009a84:	3101      	adds	r1, #1
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	e7ee      	b.n	8009a68 <__lshift+0x1c>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f100 0114 	add.w	r1, r0, #20
 8009a90:	f100 0210 	add.w	r2, r0, #16
 8009a94:	4618      	mov	r0, r3
 8009a96:	4553      	cmp	r3, sl
 8009a98:	db37      	blt.n	8009b0a <__lshift+0xbe>
 8009a9a:	6920      	ldr	r0, [r4, #16]
 8009a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aa0:	f104 0314 	add.w	r3, r4, #20
 8009aa4:	f019 091f 	ands.w	r9, r9, #31
 8009aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009aac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ab0:	d02f      	beq.n	8009b12 <__lshift+0xc6>
 8009ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ab6:	468a      	mov	sl, r1
 8009ab8:	f04f 0c00 	mov.w	ip, #0
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	fa02 f209 	lsl.w	r2, r2, r9
 8009ac2:	ea42 020c 	orr.w	r2, r2, ip
 8009ac6:	f84a 2b04 	str.w	r2, [sl], #4
 8009aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ad4:	d8f2      	bhi.n	8009abc <__lshift+0x70>
 8009ad6:	1b03      	subs	r3, r0, r4
 8009ad8:	3b15      	subs	r3, #21
 8009ada:	f023 0303 	bic.w	r3, r3, #3
 8009ade:	3304      	adds	r3, #4
 8009ae0:	f104 0215 	add.w	r2, r4, #21
 8009ae4:	4290      	cmp	r0, r2
 8009ae6:	bf38      	it	cc
 8009ae8:	2304      	movcc	r3, #4
 8009aea:	f841 c003 	str.w	ip, [r1, r3]
 8009aee:	f1bc 0f00 	cmp.w	ip, #0
 8009af2:	d001      	beq.n	8009af8 <__lshift+0xac>
 8009af4:	f108 0602 	add.w	r6, r8, #2
 8009af8:	3e01      	subs	r6, #1
 8009afa:	4638      	mov	r0, r7
 8009afc:	612e      	str	r6, [r5, #16]
 8009afe:	4621      	mov	r1, r4
 8009b00:	f7ff fd88 	bl	8009614 <_Bfree>
 8009b04:	4628      	mov	r0, r5
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b0e:	3301      	adds	r3, #1
 8009b10:	e7c1      	b.n	8009a96 <__lshift+0x4a>
 8009b12:	3904      	subs	r1, #4
 8009b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b1c:	4298      	cmp	r0, r3
 8009b1e:	d8f9      	bhi.n	8009b14 <__lshift+0xc8>
 8009b20:	e7ea      	b.n	8009af8 <__lshift+0xac>
 8009b22:	bf00      	nop
 8009b24:	0800aba5 	.word	0x0800aba5
 8009b28:	0800ac47 	.word	0x0800ac47

08009b2c <__mcmp>:
 8009b2c:	b530      	push	{r4, r5, lr}
 8009b2e:	6902      	ldr	r2, [r0, #16]
 8009b30:	690c      	ldr	r4, [r1, #16]
 8009b32:	1b12      	subs	r2, r2, r4
 8009b34:	d10e      	bne.n	8009b54 <__mcmp+0x28>
 8009b36:	f100 0314 	add.w	r3, r0, #20
 8009b3a:	3114      	adds	r1, #20
 8009b3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b4c:	42a5      	cmp	r5, r4
 8009b4e:	d003      	beq.n	8009b58 <__mcmp+0x2c>
 8009b50:	d305      	bcc.n	8009b5e <__mcmp+0x32>
 8009b52:	2201      	movs	r2, #1
 8009b54:	4610      	mov	r0, r2
 8009b56:	bd30      	pop	{r4, r5, pc}
 8009b58:	4283      	cmp	r3, r0
 8009b5a:	d3f3      	bcc.n	8009b44 <__mcmp+0x18>
 8009b5c:	e7fa      	b.n	8009b54 <__mcmp+0x28>
 8009b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b62:	e7f7      	b.n	8009b54 <__mcmp+0x28>

08009b64 <__mdiff>:
 8009b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	460c      	mov	r4, r1
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4690      	mov	r8, r2
 8009b72:	f7ff ffdb 	bl	8009b2c <__mcmp>
 8009b76:	1e05      	subs	r5, r0, #0
 8009b78:	d110      	bne.n	8009b9c <__mdiff+0x38>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7ff fd09 	bl	8009594 <_Balloc>
 8009b82:	b930      	cbnz	r0, 8009b92 <__mdiff+0x2e>
 8009b84:	4b3a      	ldr	r3, [pc, #232]	; (8009c70 <__mdiff+0x10c>)
 8009b86:	4602      	mov	r2, r0
 8009b88:	f240 2132 	movw	r1, #562	; 0x232
 8009b8c:	4839      	ldr	r0, [pc, #228]	; (8009c74 <__mdiff+0x110>)
 8009b8e:	f7ff f85f 	bl	8008c50 <__assert_func>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9c:	bfa4      	itt	ge
 8009b9e:	4643      	movge	r3, r8
 8009ba0:	46a0      	movge	r8, r4
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ba8:	bfa6      	itte	ge
 8009baa:	461c      	movge	r4, r3
 8009bac:	2500      	movge	r5, #0
 8009bae:	2501      	movlt	r5, #1
 8009bb0:	f7ff fcf0 	bl	8009594 <_Balloc>
 8009bb4:	b920      	cbnz	r0, 8009bc0 <__mdiff+0x5c>
 8009bb6:	4b2e      	ldr	r3, [pc, #184]	; (8009c70 <__mdiff+0x10c>)
 8009bb8:	4602      	mov	r2, r0
 8009bba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009bbe:	e7e5      	b.n	8009b8c <__mdiff+0x28>
 8009bc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bc4:	6926      	ldr	r6, [r4, #16]
 8009bc6:	60c5      	str	r5, [r0, #12]
 8009bc8:	f104 0914 	add.w	r9, r4, #20
 8009bcc:	f108 0514 	add.w	r5, r8, #20
 8009bd0:	f100 0e14 	add.w	lr, r0, #20
 8009bd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009bd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009bdc:	f108 0210 	add.w	r2, r8, #16
 8009be0:	46f2      	mov	sl, lr
 8009be2:	2100      	movs	r1, #0
 8009be4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009be8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009bec:	fa1f f883 	uxth.w	r8, r3
 8009bf0:	fa11 f18b 	uxtah	r1, r1, fp
 8009bf4:	0c1b      	lsrs	r3, r3, #16
 8009bf6:	eba1 0808 	sub.w	r8, r1, r8
 8009bfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c02:	fa1f f888 	uxth.w	r8, r8
 8009c06:	1419      	asrs	r1, r3, #16
 8009c08:	454e      	cmp	r6, r9
 8009c0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c0e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c12:	d8e7      	bhi.n	8009be4 <__mdiff+0x80>
 8009c14:	1b33      	subs	r3, r6, r4
 8009c16:	3b15      	subs	r3, #21
 8009c18:	f023 0303 	bic.w	r3, r3, #3
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	3415      	adds	r4, #21
 8009c20:	42a6      	cmp	r6, r4
 8009c22:	bf38      	it	cc
 8009c24:	2304      	movcc	r3, #4
 8009c26:	441d      	add	r5, r3
 8009c28:	4473      	add	r3, lr
 8009c2a:	469e      	mov	lr, r3
 8009c2c:	462e      	mov	r6, r5
 8009c2e:	4566      	cmp	r6, ip
 8009c30:	d30e      	bcc.n	8009c50 <__mdiff+0xec>
 8009c32:	f10c 0203 	add.w	r2, ip, #3
 8009c36:	1b52      	subs	r2, r2, r5
 8009c38:	f022 0203 	bic.w	r2, r2, #3
 8009c3c:	3d03      	subs	r5, #3
 8009c3e:	45ac      	cmp	ip, r5
 8009c40:	bf38      	it	cc
 8009c42:	2200      	movcc	r2, #0
 8009c44:	441a      	add	r2, r3
 8009c46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c4a:	b17b      	cbz	r3, 8009c6c <__mdiff+0x108>
 8009c4c:	6107      	str	r7, [r0, #16]
 8009c4e:	e7a3      	b.n	8009b98 <__mdiff+0x34>
 8009c50:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c54:	fa11 f288 	uxtah	r2, r1, r8
 8009c58:	1414      	asrs	r4, r2, #16
 8009c5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c64:	f84e 2b04 	str.w	r2, [lr], #4
 8009c68:	1421      	asrs	r1, r4, #16
 8009c6a:	e7e0      	b.n	8009c2e <__mdiff+0xca>
 8009c6c:	3f01      	subs	r7, #1
 8009c6e:	e7ea      	b.n	8009c46 <__mdiff+0xe2>
 8009c70:	0800aba5 	.word	0x0800aba5
 8009c74:	0800ac47 	.word	0x0800ac47

08009c78 <__ulp>:
 8009c78:	b082      	sub	sp, #8
 8009c7a:	ed8d 0b00 	vstr	d0, [sp]
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	4912      	ldr	r1, [pc, #72]	; (8009ccc <__ulp+0x54>)
 8009c82:	4019      	ands	r1, r3
 8009c84:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	dd05      	ble.n	8009c98 <__ulp+0x20>
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	ec43 2b10 	vmov	d0, r2, r3
 8009c94:	b002      	add	sp, #8
 8009c96:	4770      	bx	lr
 8009c98:	4249      	negs	r1, r1
 8009c9a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009c9e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	da04      	bge.n	8009cb6 <__ulp+0x3e>
 8009cac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009cb0:	fa41 f300 	asr.w	r3, r1, r0
 8009cb4:	e7ec      	b.n	8009c90 <__ulp+0x18>
 8009cb6:	f1a0 0114 	sub.w	r1, r0, #20
 8009cba:	291e      	cmp	r1, #30
 8009cbc:	bfda      	itte	le
 8009cbe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009cc2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009cc6:	2101      	movgt	r1, #1
 8009cc8:	460a      	mov	r2, r1
 8009cca:	e7e1      	b.n	8009c90 <__ulp+0x18>
 8009ccc:	7ff00000 	.word	0x7ff00000

08009cd0 <__b2d>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	6905      	ldr	r5, [r0, #16]
 8009cd4:	f100 0714 	add.w	r7, r0, #20
 8009cd8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009cdc:	1f2e      	subs	r6, r5, #4
 8009cde:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff fd48 	bl	8009778 <__hi0bits>
 8009ce8:	f1c0 0320 	rsb	r3, r0, #32
 8009cec:	280a      	cmp	r0, #10
 8009cee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009d6c <__b2d+0x9c>
 8009cf2:	600b      	str	r3, [r1, #0]
 8009cf4:	dc14      	bgt.n	8009d20 <__b2d+0x50>
 8009cf6:	f1c0 0e0b 	rsb	lr, r0, #11
 8009cfa:	fa24 f10e 	lsr.w	r1, r4, lr
 8009cfe:	42b7      	cmp	r7, r6
 8009d00:	ea41 030c 	orr.w	r3, r1, ip
 8009d04:	bf34      	ite	cc
 8009d06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d0a:	2100      	movcs	r1, #0
 8009d0c:	3015      	adds	r0, #21
 8009d0e:	fa04 f000 	lsl.w	r0, r4, r0
 8009d12:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d16:	ea40 0201 	orr.w	r2, r0, r1
 8009d1a:	ec43 2b10 	vmov	d0, r2, r3
 8009d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d20:	42b7      	cmp	r7, r6
 8009d22:	bf3a      	itte	cc
 8009d24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d28:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d2c:	2100      	movcs	r1, #0
 8009d2e:	380b      	subs	r0, #11
 8009d30:	d017      	beq.n	8009d62 <__b2d+0x92>
 8009d32:	f1c0 0c20 	rsb	ip, r0, #32
 8009d36:	fa04 f500 	lsl.w	r5, r4, r0
 8009d3a:	42be      	cmp	r6, r7
 8009d3c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d40:	ea45 0504 	orr.w	r5, r5, r4
 8009d44:	bf8c      	ite	hi
 8009d46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d4a:	2400      	movls	r4, #0
 8009d4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d50:	fa01 f000 	lsl.w	r0, r1, r0
 8009d54:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d5c:	ea40 0204 	orr.w	r2, r0, r4
 8009d60:	e7db      	b.n	8009d1a <__b2d+0x4a>
 8009d62:	ea44 030c 	orr.w	r3, r4, ip
 8009d66:	460a      	mov	r2, r1
 8009d68:	e7d7      	b.n	8009d1a <__b2d+0x4a>
 8009d6a:	bf00      	nop
 8009d6c:	3ff00000 	.word	0x3ff00000

08009d70 <__d2b>:
 8009d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d74:	4689      	mov	r9, r1
 8009d76:	2101      	movs	r1, #1
 8009d78:	ec57 6b10 	vmov	r6, r7, d0
 8009d7c:	4690      	mov	r8, r2
 8009d7e:	f7ff fc09 	bl	8009594 <_Balloc>
 8009d82:	4604      	mov	r4, r0
 8009d84:	b930      	cbnz	r0, 8009d94 <__d2b+0x24>
 8009d86:	4602      	mov	r2, r0
 8009d88:	4b25      	ldr	r3, [pc, #148]	; (8009e20 <__d2b+0xb0>)
 8009d8a:	4826      	ldr	r0, [pc, #152]	; (8009e24 <__d2b+0xb4>)
 8009d8c:	f240 310a 	movw	r1, #778	; 0x30a
 8009d90:	f7fe ff5e 	bl	8008c50 <__assert_func>
 8009d94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d9c:	bb35      	cbnz	r5, 8009dec <__d2b+0x7c>
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	d028      	beq.n	8009df6 <__d2b+0x86>
 8009da4:	4668      	mov	r0, sp
 8009da6:	9600      	str	r6, [sp, #0]
 8009da8:	f7ff fd06 	bl	80097b8 <__lo0bits>
 8009dac:	9900      	ldr	r1, [sp, #0]
 8009dae:	b300      	cbz	r0, 8009df2 <__d2b+0x82>
 8009db0:	9a01      	ldr	r2, [sp, #4]
 8009db2:	f1c0 0320 	rsb	r3, r0, #32
 8009db6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	40c2      	lsrs	r2, r0
 8009dbe:	6163      	str	r3, [r4, #20]
 8009dc0:	9201      	str	r2, [sp, #4]
 8009dc2:	9b01      	ldr	r3, [sp, #4]
 8009dc4:	61a3      	str	r3, [r4, #24]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bf14      	ite	ne
 8009dca:	2202      	movne	r2, #2
 8009dcc:	2201      	moveq	r2, #1
 8009dce:	6122      	str	r2, [r4, #16]
 8009dd0:	b1d5      	cbz	r5, 8009e08 <__d2b+0x98>
 8009dd2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dd6:	4405      	add	r5, r0
 8009dd8:	f8c9 5000 	str.w	r5, [r9]
 8009ddc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009de0:	f8c8 0000 	str.w	r0, [r8]
 8009de4:	4620      	mov	r0, r4
 8009de6:	b003      	add	sp, #12
 8009de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009df0:	e7d5      	b.n	8009d9e <__d2b+0x2e>
 8009df2:	6161      	str	r1, [r4, #20]
 8009df4:	e7e5      	b.n	8009dc2 <__d2b+0x52>
 8009df6:	a801      	add	r0, sp, #4
 8009df8:	f7ff fcde 	bl	80097b8 <__lo0bits>
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	6163      	str	r3, [r4, #20]
 8009e00:	2201      	movs	r2, #1
 8009e02:	6122      	str	r2, [r4, #16]
 8009e04:	3020      	adds	r0, #32
 8009e06:	e7e3      	b.n	8009dd0 <__d2b+0x60>
 8009e08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e10:	f8c9 0000 	str.w	r0, [r9]
 8009e14:	6918      	ldr	r0, [r3, #16]
 8009e16:	f7ff fcaf 	bl	8009778 <__hi0bits>
 8009e1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e1e:	e7df      	b.n	8009de0 <__d2b+0x70>
 8009e20:	0800aba5 	.word	0x0800aba5
 8009e24:	0800ac47 	.word	0x0800ac47

08009e28 <__ratio>:
 8009e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	4688      	mov	r8, r1
 8009e2e:	4669      	mov	r1, sp
 8009e30:	4681      	mov	r9, r0
 8009e32:	f7ff ff4d 	bl	8009cd0 <__b2d>
 8009e36:	a901      	add	r1, sp, #4
 8009e38:	4640      	mov	r0, r8
 8009e3a:	ec55 4b10 	vmov	r4, r5, d0
 8009e3e:	f7ff ff47 	bl	8009cd0 <__b2d>
 8009e42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e4a:	eba3 0c02 	sub.w	ip, r3, r2
 8009e4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e52:	1a9b      	subs	r3, r3, r2
 8009e54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e58:	ec51 0b10 	vmov	r0, r1, d0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	bfd6      	itet	le
 8009e60:	460a      	movle	r2, r1
 8009e62:	462a      	movgt	r2, r5
 8009e64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e68:	468b      	mov	fp, r1
 8009e6a:	462f      	mov	r7, r5
 8009e6c:	bfd4      	ite	le
 8009e6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e76:	4620      	mov	r0, r4
 8009e78:	ee10 2a10 	vmov	r2, s0
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	4639      	mov	r1, r7
 8009e80:	f7f6 fcf4 	bl	800086c <__aeabi_ddiv>
 8009e84:	ec41 0b10 	vmov	d0, r0, r1
 8009e88:	b003      	add	sp, #12
 8009e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e8e <__copybits>:
 8009e8e:	3901      	subs	r1, #1
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	1149      	asrs	r1, r1, #5
 8009e94:	6914      	ldr	r4, [r2, #16]
 8009e96:	3101      	adds	r1, #1
 8009e98:	f102 0314 	add.w	r3, r2, #20
 8009e9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ea0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ea4:	1f05      	subs	r5, r0, #4
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	d30c      	bcc.n	8009ec4 <__copybits+0x36>
 8009eaa:	1aa3      	subs	r3, r4, r2
 8009eac:	3b11      	subs	r3, #17
 8009eae:	f023 0303 	bic.w	r3, r3, #3
 8009eb2:	3211      	adds	r2, #17
 8009eb4:	42a2      	cmp	r2, r4
 8009eb6:	bf88      	it	hi
 8009eb8:	2300      	movhi	r3, #0
 8009eba:	4418      	add	r0, r3
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4288      	cmp	r0, r1
 8009ec0:	d305      	bcc.n	8009ece <__copybits+0x40>
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ec8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ecc:	e7eb      	b.n	8009ea6 <__copybits+0x18>
 8009ece:	f840 3b04 	str.w	r3, [r0], #4
 8009ed2:	e7f4      	b.n	8009ebe <__copybits+0x30>

08009ed4 <__any_on>:
 8009ed4:	f100 0214 	add.w	r2, r0, #20
 8009ed8:	6900      	ldr	r0, [r0, #16]
 8009eda:	114b      	asrs	r3, r1, #5
 8009edc:	4298      	cmp	r0, r3
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	db11      	blt.n	8009f06 <__any_on+0x32>
 8009ee2:	dd0a      	ble.n	8009efa <__any_on+0x26>
 8009ee4:	f011 011f 	ands.w	r1, r1, #31
 8009ee8:	d007      	beq.n	8009efa <__any_on+0x26>
 8009eea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009eee:	fa24 f001 	lsr.w	r0, r4, r1
 8009ef2:	fa00 f101 	lsl.w	r1, r0, r1
 8009ef6:	428c      	cmp	r4, r1
 8009ef8:	d10b      	bne.n	8009f12 <__any_on+0x3e>
 8009efa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d803      	bhi.n	8009f0a <__any_on+0x36>
 8009f02:	2000      	movs	r0, #0
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	4603      	mov	r3, r0
 8009f08:	e7f7      	b.n	8009efa <__any_on+0x26>
 8009f0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d0f5      	beq.n	8009efe <__any_on+0x2a>
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7f6      	b.n	8009f04 <__any_on+0x30>

08009f16 <_calloc_r>:
 8009f16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f18:	fba1 2402 	umull	r2, r4, r1, r2
 8009f1c:	b94c      	cbnz	r4, 8009f32 <_calloc_r+0x1c>
 8009f1e:	4611      	mov	r1, r2
 8009f20:	9201      	str	r2, [sp, #4]
 8009f22:	f7fd fe71 	bl	8007c08 <_malloc_r>
 8009f26:	9a01      	ldr	r2, [sp, #4]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b930      	cbnz	r0, 8009f3a <_calloc_r+0x24>
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	b003      	add	sp, #12
 8009f30:	bd30      	pop	{r4, r5, pc}
 8009f32:	220c      	movs	r2, #12
 8009f34:	6002      	str	r2, [r0, #0]
 8009f36:	2500      	movs	r5, #0
 8009f38:	e7f8      	b.n	8009f2c <_calloc_r+0x16>
 8009f3a:	4621      	mov	r1, r4
 8009f3c:	f7fd fdf0 	bl	8007b20 <memset>
 8009f40:	e7f4      	b.n	8009f2c <_calloc_r+0x16>

08009f42 <__sfputc_r>:
 8009f42:	6893      	ldr	r3, [r2, #8]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	b410      	push	{r4}
 8009f4a:	6093      	str	r3, [r2, #8]
 8009f4c:	da08      	bge.n	8009f60 <__sfputc_r+0x1e>
 8009f4e:	6994      	ldr	r4, [r2, #24]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	db01      	blt.n	8009f58 <__sfputc_r+0x16>
 8009f54:	290a      	cmp	r1, #10
 8009f56:	d103      	bne.n	8009f60 <__sfputc_r+0x1e>
 8009f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f5c:	f000 bb0c 	b.w	800a578 <__swbuf_r>
 8009f60:	6813      	ldr	r3, [r2, #0]
 8009f62:	1c58      	adds	r0, r3, #1
 8009f64:	6010      	str	r0, [r2, #0]
 8009f66:	7019      	strb	r1, [r3, #0]
 8009f68:	4608      	mov	r0, r1
 8009f6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <__sfputs_r>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	4606      	mov	r6, r0
 8009f74:	460f      	mov	r7, r1
 8009f76:	4614      	mov	r4, r2
 8009f78:	18d5      	adds	r5, r2, r3
 8009f7a:	42ac      	cmp	r4, r5
 8009f7c:	d101      	bne.n	8009f82 <__sfputs_r+0x12>
 8009f7e:	2000      	movs	r0, #0
 8009f80:	e007      	b.n	8009f92 <__sfputs_r+0x22>
 8009f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f86:	463a      	mov	r2, r7
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff ffda 	bl	8009f42 <__sfputc_r>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	d1f3      	bne.n	8009f7a <__sfputs_r+0xa>
 8009f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f94 <_vfiprintf_r>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	460d      	mov	r5, r1
 8009f9a:	b09d      	sub	sp, #116	; 0x74
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	4698      	mov	r8, r3
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	b118      	cbz	r0, 8009fac <_vfiprintf_r+0x18>
 8009fa4:	6983      	ldr	r3, [r0, #24]
 8009fa6:	b90b      	cbnz	r3, 8009fac <_vfiprintf_r+0x18>
 8009fa8:	f7fd fcde 	bl	8007968 <__sinit>
 8009fac:	4b89      	ldr	r3, [pc, #548]	; (800a1d4 <_vfiprintf_r+0x240>)
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	d11b      	bne.n	8009fea <_vfiprintf_r+0x56>
 8009fb2:	6875      	ldr	r5, [r6, #4]
 8009fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fb6:	07d9      	lsls	r1, r3, #31
 8009fb8:	d405      	bmi.n	8009fc6 <_vfiprintf_r+0x32>
 8009fba:	89ab      	ldrh	r3, [r5, #12]
 8009fbc:	059a      	lsls	r2, r3, #22
 8009fbe:	d402      	bmi.n	8009fc6 <_vfiprintf_r+0x32>
 8009fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fc2:	f7fd fd94 	bl	8007aee <__retarget_lock_acquire_recursive>
 8009fc6:	89ab      	ldrh	r3, [r5, #12]
 8009fc8:	071b      	lsls	r3, r3, #28
 8009fca:	d501      	bpl.n	8009fd0 <_vfiprintf_r+0x3c>
 8009fcc:	692b      	ldr	r3, [r5, #16]
 8009fce:	b9eb      	cbnz	r3, 800a00c <_vfiprintf_r+0x78>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f000 fb30 	bl	800a638 <__swsetup_r>
 8009fd8:	b1c0      	cbz	r0, 800a00c <_vfiprintf_r+0x78>
 8009fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fdc:	07dc      	lsls	r4, r3, #31
 8009fde:	d50e      	bpl.n	8009ffe <_vfiprintf_r+0x6a>
 8009fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe4:	b01d      	add	sp, #116	; 0x74
 8009fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fea:	4b7b      	ldr	r3, [pc, #492]	; (800a1d8 <_vfiprintf_r+0x244>)
 8009fec:	429d      	cmp	r5, r3
 8009fee:	d101      	bne.n	8009ff4 <_vfiprintf_r+0x60>
 8009ff0:	68b5      	ldr	r5, [r6, #8]
 8009ff2:	e7df      	b.n	8009fb4 <_vfiprintf_r+0x20>
 8009ff4:	4b79      	ldr	r3, [pc, #484]	; (800a1dc <_vfiprintf_r+0x248>)
 8009ff6:	429d      	cmp	r5, r3
 8009ff8:	bf08      	it	eq
 8009ffa:	68f5      	ldreq	r5, [r6, #12]
 8009ffc:	e7da      	b.n	8009fb4 <_vfiprintf_r+0x20>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	0598      	lsls	r0, r3, #22
 800a002:	d4ed      	bmi.n	8009fe0 <_vfiprintf_r+0x4c>
 800a004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a006:	f7fd fd73 	bl	8007af0 <__retarget_lock_release_recursive>
 800a00a:	e7e9      	b.n	8009fe0 <_vfiprintf_r+0x4c>
 800a00c:	2300      	movs	r3, #0
 800a00e:	9309      	str	r3, [sp, #36]	; 0x24
 800a010:	2320      	movs	r3, #32
 800a012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a016:	f8cd 800c 	str.w	r8, [sp, #12]
 800a01a:	2330      	movs	r3, #48	; 0x30
 800a01c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1e0 <_vfiprintf_r+0x24c>
 800a020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a024:	f04f 0901 	mov.w	r9, #1
 800a028:	4623      	mov	r3, r4
 800a02a:	469a      	mov	sl, r3
 800a02c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a030:	b10a      	cbz	r2, 800a036 <_vfiprintf_r+0xa2>
 800a032:	2a25      	cmp	r2, #37	; 0x25
 800a034:	d1f9      	bne.n	800a02a <_vfiprintf_r+0x96>
 800a036:	ebba 0b04 	subs.w	fp, sl, r4
 800a03a:	d00b      	beq.n	800a054 <_vfiprintf_r+0xc0>
 800a03c:	465b      	mov	r3, fp
 800a03e:	4622      	mov	r2, r4
 800a040:	4629      	mov	r1, r5
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff94 	bl	8009f70 <__sfputs_r>
 800a048:	3001      	adds	r0, #1
 800a04a:	f000 80aa 	beq.w	800a1a2 <_vfiprintf_r+0x20e>
 800a04e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a050:	445a      	add	r2, fp
 800a052:	9209      	str	r2, [sp, #36]	; 0x24
 800a054:	f89a 3000 	ldrb.w	r3, [sl]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 80a2 	beq.w	800a1a2 <_vfiprintf_r+0x20e>
 800a05e:	2300      	movs	r3, #0
 800a060:	f04f 32ff 	mov.w	r2, #4294967295
 800a064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a068:	f10a 0a01 	add.w	sl, sl, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	9307      	str	r3, [sp, #28]
 800a070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a074:	931a      	str	r3, [sp, #104]	; 0x68
 800a076:	4654      	mov	r4, sl
 800a078:	2205      	movs	r2, #5
 800a07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a07e:	4858      	ldr	r0, [pc, #352]	; (800a1e0 <_vfiprintf_r+0x24c>)
 800a080:	f7f6 f8be 	bl	8000200 <memchr>
 800a084:	9a04      	ldr	r2, [sp, #16]
 800a086:	b9d8      	cbnz	r0, 800a0c0 <_vfiprintf_r+0x12c>
 800a088:	06d1      	lsls	r1, r2, #27
 800a08a:	bf44      	itt	mi
 800a08c:	2320      	movmi	r3, #32
 800a08e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a092:	0713      	lsls	r3, r2, #28
 800a094:	bf44      	itt	mi
 800a096:	232b      	movmi	r3, #43	; 0x2b
 800a098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a09c:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a2:	d015      	beq.n	800a0d0 <_vfiprintf_r+0x13c>
 800a0a4:	9a07      	ldr	r2, [sp, #28]
 800a0a6:	4654      	mov	r4, sl
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	f04f 0c0a 	mov.w	ip, #10
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0b4:	3b30      	subs	r3, #48	; 0x30
 800a0b6:	2b09      	cmp	r3, #9
 800a0b8:	d94e      	bls.n	800a158 <_vfiprintf_r+0x1c4>
 800a0ba:	b1b0      	cbz	r0, 800a0ea <_vfiprintf_r+0x156>
 800a0bc:	9207      	str	r2, [sp, #28]
 800a0be:	e014      	b.n	800a0ea <_vfiprintf_r+0x156>
 800a0c0:	eba0 0308 	sub.w	r3, r0, r8
 800a0c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	46a2      	mov	sl, r4
 800a0ce:	e7d2      	b.n	800a076 <_vfiprintf_r+0xe2>
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	1d19      	adds	r1, r3, #4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	9103      	str	r1, [sp, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	bfbb      	ittet	lt
 800a0dc:	425b      	neglt	r3, r3
 800a0de:	f042 0202 	orrlt.w	r2, r2, #2
 800a0e2:	9307      	strge	r3, [sp, #28]
 800a0e4:	9307      	strlt	r3, [sp, #28]
 800a0e6:	bfb8      	it	lt
 800a0e8:	9204      	strlt	r2, [sp, #16]
 800a0ea:	7823      	ldrb	r3, [r4, #0]
 800a0ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ee:	d10c      	bne.n	800a10a <_vfiprintf_r+0x176>
 800a0f0:	7863      	ldrb	r3, [r4, #1]
 800a0f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f4:	d135      	bne.n	800a162 <_vfiprintf_r+0x1ce>
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	1d1a      	adds	r2, r3, #4
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	9203      	str	r2, [sp, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfb8      	it	lt
 800a102:	f04f 33ff 	movlt.w	r3, #4294967295
 800a106:	3402      	adds	r4, #2
 800a108:	9305      	str	r3, [sp, #20]
 800a10a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1f0 <_vfiprintf_r+0x25c>
 800a10e:	7821      	ldrb	r1, [r4, #0]
 800a110:	2203      	movs	r2, #3
 800a112:	4650      	mov	r0, sl
 800a114:	f7f6 f874 	bl	8000200 <memchr>
 800a118:	b140      	cbz	r0, 800a12c <_vfiprintf_r+0x198>
 800a11a:	2340      	movs	r3, #64	; 0x40
 800a11c:	eba0 000a 	sub.w	r0, r0, sl
 800a120:	fa03 f000 	lsl.w	r0, r3, r0
 800a124:	9b04      	ldr	r3, [sp, #16]
 800a126:	4303      	orrs	r3, r0
 800a128:	3401      	adds	r4, #1
 800a12a:	9304      	str	r3, [sp, #16]
 800a12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a130:	482c      	ldr	r0, [pc, #176]	; (800a1e4 <_vfiprintf_r+0x250>)
 800a132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a136:	2206      	movs	r2, #6
 800a138:	f7f6 f862 	bl	8000200 <memchr>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d03f      	beq.n	800a1c0 <_vfiprintf_r+0x22c>
 800a140:	4b29      	ldr	r3, [pc, #164]	; (800a1e8 <_vfiprintf_r+0x254>)
 800a142:	bb1b      	cbnz	r3, 800a18c <_vfiprintf_r+0x1f8>
 800a144:	9b03      	ldr	r3, [sp, #12]
 800a146:	3307      	adds	r3, #7
 800a148:	f023 0307 	bic.w	r3, r3, #7
 800a14c:	3308      	adds	r3, #8
 800a14e:	9303      	str	r3, [sp, #12]
 800a150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a152:	443b      	add	r3, r7
 800a154:	9309      	str	r3, [sp, #36]	; 0x24
 800a156:	e767      	b.n	800a028 <_vfiprintf_r+0x94>
 800a158:	fb0c 3202 	mla	r2, ip, r2, r3
 800a15c:	460c      	mov	r4, r1
 800a15e:	2001      	movs	r0, #1
 800a160:	e7a5      	b.n	800a0ae <_vfiprintf_r+0x11a>
 800a162:	2300      	movs	r3, #0
 800a164:	3401      	adds	r4, #1
 800a166:	9305      	str	r3, [sp, #20]
 800a168:	4619      	mov	r1, r3
 800a16a:	f04f 0c0a 	mov.w	ip, #10
 800a16e:	4620      	mov	r0, r4
 800a170:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a174:	3a30      	subs	r2, #48	; 0x30
 800a176:	2a09      	cmp	r2, #9
 800a178:	d903      	bls.n	800a182 <_vfiprintf_r+0x1ee>
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d0c5      	beq.n	800a10a <_vfiprintf_r+0x176>
 800a17e:	9105      	str	r1, [sp, #20]
 800a180:	e7c3      	b.n	800a10a <_vfiprintf_r+0x176>
 800a182:	fb0c 2101 	mla	r1, ip, r1, r2
 800a186:	4604      	mov	r4, r0
 800a188:	2301      	movs	r3, #1
 800a18a:	e7f0      	b.n	800a16e <_vfiprintf_r+0x1da>
 800a18c:	ab03      	add	r3, sp, #12
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	462a      	mov	r2, r5
 800a192:	4b16      	ldr	r3, [pc, #88]	; (800a1ec <_vfiprintf_r+0x258>)
 800a194:	a904      	add	r1, sp, #16
 800a196:	4630      	mov	r0, r6
 800a198:	f3af 8000 	nop.w
 800a19c:	4607      	mov	r7, r0
 800a19e:	1c78      	adds	r0, r7, #1
 800a1a0:	d1d6      	bne.n	800a150 <_vfiprintf_r+0x1bc>
 800a1a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1a4:	07d9      	lsls	r1, r3, #31
 800a1a6:	d405      	bmi.n	800a1b4 <_vfiprintf_r+0x220>
 800a1a8:	89ab      	ldrh	r3, [r5, #12]
 800a1aa:	059a      	lsls	r2, r3, #22
 800a1ac:	d402      	bmi.n	800a1b4 <_vfiprintf_r+0x220>
 800a1ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1b0:	f7fd fc9e 	bl	8007af0 <__retarget_lock_release_recursive>
 800a1b4:	89ab      	ldrh	r3, [r5, #12]
 800a1b6:	065b      	lsls	r3, r3, #25
 800a1b8:	f53f af12 	bmi.w	8009fe0 <_vfiprintf_r+0x4c>
 800a1bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1be:	e711      	b.n	8009fe4 <_vfiprintf_r+0x50>
 800a1c0:	ab03      	add	r3, sp, #12
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	462a      	mov	r2, r5
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <_vfiprintf_r+0x258>)
 800a1c8:	a904      	add	r1, sp, #16
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	f000 f880 	bl	800a2d0 <_printf_i>
 800a1d0:	e7e4      	b.n	800a19c <_vfiprintf_r+0x208>
 800a1d2:	bf00      	nop
 800a1d4:	0800a9c8 	.word	0x0800a9c8
 800a1d8:	0800a9e8 	.word	0x0800a9e8
 800a1dc:	0800a9a8 	.word	0x0800a9a8
 800a1e0:	0800ada4 	.word	0x0800ada4
 800a1e4:	0800adae 	.word	0x0800adae
 800a1e8:	00000000 	.word	0x00000000
 800a1ec:	08009f71 	.word	0x08009f71
 800a1f0:	0800adaa 	.word	0x0800adaa

0800a1f4 <_printf_common>:
 800a1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f8:	4616      	mov	r6, r2
 800a1fa:	4699      	mov	r9, r3
 800a1fc:	688a      	ldr	r2, [r1, #8]
 800a1fe:	690b      	ldr	r3, [r1, #16]
 800a200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a204:	4293      	cmp	r3, r2
 800a206:	bfb8      	it	lt
 800a208:	4613      	movlt	r3, r2
 800a20a:	6033      	str	r3, [r6, #0]
 800a20c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a210:	4607      	mov	r7, r0
 800a212:	460c      	mov	r4, r1
 800a214:	b10a      	cbz	r2, 800a21a <_printf_common+0x26>
 800a216:	3301      	adds	r3, #1
 800a218:	6033      	str	r3, [r6, #0]
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	0699      	lsls	r1, r3, #26
 800a21e:	bf42      	ittt	mi
 800a220:	6833      	ldrmi	r3, [r6, #0]
 800a222:	3302      	addmi	r3, #2
 800a224:	6033      	strmi	r3, [r6, #0]
 800a226:	6825      	ldr	r5, [r4, #0]
 800a228:	f015 0506 	ands.w	r5, r5, #6
 800a22c:	d106      	bne.n	800a23c <_printf_common+0x48>
 800a22e:	f104 0a19 	add.w	sl, r4, #25
 800a232:	68e3      	ldr	r3, [r4, #12]
 800a234:	6832      	ldr	r2, [r6, #0]
 800a236:	1a9b      	subs	r3, r3, r2
 800a238:	42ab      	cmp	r3, r5
 800a23a:	dc26      	bgt.n	800a28a <_printf_common+0x96>
 800a23c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a240:	1e13      	subs	r3, r2, #0
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	bf18      	it	ne
 800a246:	2301      	movne	r3, #1
 800a248:	0692      	lsls	r2, r2, #26
 800a24a:	d42b      	bmi.n	800a2a4 <_printf_common+0xb0>
 800a24c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a250:	4649      	mov	r1, r9
 800a252:	4638      	mov	r0, r7
 800a254:	47c0      	blx	r8
 800a256:	3001      	adds	r0, #1
 800a258:	d01e      	beq.n	800a298 <_printf_common+0xa4>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	68e5      	ldr	r5, [r4, #12]
 800a25e:	6832      	ldr	r2, [r6, #0]
 800a260:	f003 0306 	and.w	r3, r3, #6
 800a264:	2b04      	cmp	r3, #4
 800a266:	bf08      	it	eq
 800a268:	1aad      	subeq	r5, r5, r2
 800a26a:	68a3      	ldr	r3, [r4, #8]
 800a26c:	6922      	ldr	r2, [r4, #16]
 800a26e:	bf0c      	ite	eq
 800a270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a274:	2500      	movne	r5, #0
 800a276:	4293      	cmp	r3, r2
 800a278:	bfc4      	itt	gt
 800a27a:	1a9b      	subgt	r3, r3, r2
 800a27c:	18ed      	addgt	r5, r5, r3
 800a27e:	2600      	movs	r6, #0
 800a280:	341a      	adds	r4, #26
 800a282:	42b5      	cmp	r5, r6
 800a284:	d11a      	bne.n	800a2bc <_printf_common+0xc8>
 800a286:	2000      	movs	r0, #0
 800a288:	e008      	b.n	800a29c <_printf_common+0xa8>
 800a28a:	2301      	movs	r3, #1
 800a28c:	4652      	mov	r2, sl
 800a28e:	4649      	mov	r1, r9
 800a290:	4638      	mov	r0, r7
 800a292:	47c0      	blx	r8
 800a294:	3001      	adds	r0, #1
 800a296:	d103      	bne.n	800a2a0 <_printf_common+0xac>
 800a298:	f04f 30ff 	mov.w	r0, #4294967295
 800a29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a0:	3501      	adds	r5, #1
 800a2a2:	e7c6      	b.n	800a232 <_printf_common+0x3e>
 800a2a4:	18e1      	adds	r1, r4, r3
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	2030      	movs	r0, #48	; 0x30
 800a2aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2ae:	4422      	add	r2, r4
 800a2b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2b8:	3302      	adds	r3, #2
 800a2ba:	e7c7      	b.n	800a24c <_printf_common+0x58>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	4622      	mov	r2, r4
 800a2c0:	4649      	mov	r1, r9
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	47c0      	blx	r8
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	d0e6      	beq.n	800a298 <_printf_common+0xa4>
 800a2ca:	3601      	adds	r6, #1
 800a2cc:	e7d9      	b.n	800a282 <_printf_common+0x8e>
	...

0800a2d0 <_printf_i>:
 800a2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d4:	7e0f      	ldrb	r7, [r1, #24]
 800a2d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2d8:	2f78      	cmp	r7, #120	; 0x78
 800a2da:	4691      	mov	r9, r2
 800a2dc:	4680      	mov	r8, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	469a      	mov	sl, r3
 800a2e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2e6:	d807      	bhi.n	800a2f8 <_printf_i+0x28>
 800a2e8:	2f62      	cmp	r7, #98	; 0x62
 800a2ea:	d80a      	bhi.n	800a302 <_printf_i+0x32>
 800a2ec:	2f00      	cmp	r7, #0
 800a2ee:	f000 80d8 	beq.w	800a4a2 <_printf_i+0x1d2>
 800a2f2:	2f58      	cmp	r7, #88	; 0x58
 800a2f4:	f000 80a3 	beq.w	800a43e <_printf_i+0x16e>
 800a2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a300:	e03a      	b.n	800a378 <_printf_i+0xa8>
 800a302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a306:	2b15      	cmp	r3, #21
 800a308:	d8f6      	bhi.n	800a2f8 <_printf_i+0x28>
 800a30a:	a101      	add	r1, pc, #4	; (adr r1, 800a310 <_printf_i+0x40>)
 800a30c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a310:	0800a369 	.word	0x0800a369
 800a314:	0800a37d 	.word	0x0800a37d
 800a318:	0800a2f9 	.word	0x0800a2f9
 800a31c:	0800a2f9 	.word	0x0800a2f9
 800a320:	0800a2f9 	.word	0x0800a2f9
 800a324:	0800a2f9 	.word	0x0800a2f9
 800a328:	0800a37d 	.word	0x0800a37d
 800a32c:	0800a2f9 	.word	0x0800a2f9
 800a330:	0800a2f9 	.word	0x0800a2f9
 800a334:	0800a2f9 	.word	0x0800a2f9
 800a338:	0800a2f9 	.word	0x0800a2f9
 800a33c:	0800a489 	.word	0x0800a489
 800a340:	0800a3ad 	.word	0x0800a3ad
 800a344:	0800a46b 	.word	0x0800a46b
 800a348:	0800a2f9 	.word	0x0800a2f9
 800a34c:	0800a2f9 	.word	0x0800a2f9
 800a350:	0800a4ab 	.word	0x0800a4ab
 800a354:	0800a2f9 	.word	0x0800a2f9
 800a358:	0800a3ad 	.word	0x0800a3ad
 800a35c:	0800a2f9 	.word	0x0800a2f9
 800a360:	0800a2f9 	.word	0x0800a2f9
 800a364:	0800a473 	.word	0x0800a473
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	1d1a      	adds	r2, r3, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	602a      	str	r2, [r5, #0]
 800a370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a378:	2301      	movs	r3, #1
 800a37a:	e0a3      	b.n	800a4c4 <_printf_i+0x1f4>
 800a37c:	6820      	ldr	r0, [r4, #0]
 800a37e:	6829      	ldr	r1, [r5, #0]
 800a380:	0606      	lsls	r6, r0, #24
 800a382:	f101 0304 	add.w	r3, r1, #4
 800a386:	d50a      	bpl.n	800a39e <_printf_i+0xce>
 800a388:	680e      	ldr	r6, [r1, #0]
 800a38a:	602b      	str	r3, [r5, #0]
 800a38c:	2e00      	cmp	r6, #0
 800a38e:	da03      	bge.n	800a398 <_printf_i+0xc8>
 800a390:	232d      	movs	r3, #45	; 0x2d
 800a392:	4276      	negs	r6, r6
 800a394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a398:	485e      	ldr	r0, [pc, #376]	; (800a514 <_printf_i+0x244>)
 800a39a:	230a      	movs	r3, #10
 800a39c:	e019      	b.n	800a3d2 <_printf_i+0x102>
 800a39e:	680e      	ldr	r6, [r1, #0]
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3a6:	bf18      	it	ne
 800a3a8:	b236      	sxthne	r6, r6
 800a3aa:	e7ef      	b.n	800a38c <_printf_i+0xbc>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	6820      	ldr	r0, [r4, #0]
 800a3b0:	1d19      	adds	r1, r3, #4
 800a3b2:	6029      	str	r1, [r5, #0]
 800a3b4:	0601      	lsls	r1, r0, #24
 800a3b6:	d501      	bpl.n	800a3bc <_printf_i+0xec>
 800a3b8:	681e      	ldr	r6, [r3, #0]
 800a3ba:	e002      	b.n	800a3c2 <_printf_i+0xf2>
 800a3bc:	0646      	lsls	r6, r0, #25
 800a3be:	d5fb      	bpl.n	800a3b8 <_printf_i+0xe8>
 800a3c0:	881e      	ldrh	r6, [r3, #0]
 800a3c2:	4854      	ldr	r0, [pc, #336]	; (800a514 <_printf_i+0x244>)
 800a3c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a3c6:	bf0c      	ite	eq
 800a3c8:	2308      	moveq	r3, #8
 800a3ca:	230a      	movne	r3, #10
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3d2:	6865      	ldr	r5, [r4, #4]
 800a3d4:	60a5      	str	r5, [r4, #8]
 800a3d6:	2d00      	cmp	r5, #0
 800a3d8:	bfa2      	ittt	ge
 800a3da:	6821      	ldrge	r1, [r4, #0]
 800a3dc:	f021 0104 	bicge.w	r1, r1, #4
 800a3e0:	6021      	strge	r1, [r4, #0]
 800a3e2:	b90e      	cbnz	r6, 800a3e8 <_printf_i+0x118>
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	d04d      	beq.n	800a484 <_printf_i+0x1b4>
 800a3e8:	4615      	mov	r5, r2
 800a3ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a3f2:	5dc7      	ldrb	r7, [r0, r7]
 800a3f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3f8:	4637      	mov	r7, r6
 800a3fa:	42bb      	cmp	r3, r7
 800a3fc:	460e      	mov	r6, r1
 800a3fe:	d9f4      	bls.n	800a3ea <_printf_i+0x11a>
 800a400:	2b08      	cmp	r3, #8
 800a402:	d10b      	bne.n	800a41c <_printf_i+0x14c>
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	07de      	lsls	r6, r3, #31
 800a408:	d508      	bpl.n	800a41c <_printf_i+0x14c>
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	6861      	ldr	r1, [r4, #4]
 800a40e:	4299      	cmp	r1, r3
 800a410:	bfde      	ittt	le
 800a412:	2330      	movle	r3, #48	; 0x30
 800a414:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a418:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a41c:	1b52      	subs	r2, r2, r5
 800a41e:	6122      	str	r2, [r4, #16]
 800a420:	f8cd a000 	str.w	sl, [sp]
 800a424:	464b      	mov	r3, r9
 800a426:	aa03      	add	r2, sp, #12
 800a428:	4621      	mov	r1, r4
 800a42a:	4640      	mov	r0, r8
 800a42c:	f7ff fee2 	bl	800a1f4 <_printf_common>
 800a430:	3001      	adds	r0, #1
 800a432:	d14c      	bne.n	800a4ce <_printf_i+0x1fe>
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	b004      	add	sp, #16
 800a43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43e:	4835      	ldr	r0, [pc, #212]	; (800a514 <_printf_i+0x244>)
 800a440:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a444:	6829      	ldr	r1, [r5, #0]
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	f851 6b04 	ldr.w	r6, [r1], #4
 800a44c:	6029      	str	r1, [r5, #0]
 800a44e:	061d      	lsls	r5, r3, #24
 800a450:	d514      	bpl.n	800a47c <_printf_i+0x1ac>
 800a452:	07df      	lsls	r7, r3, #31
 800a454:	bf44      	itt	mi
 800a456:	f043 0320 	orrmi.w	r3, r3, #32
 800a45a:	6023      	strmi	r3, [r4, #0]
 800a45c:	b91e      	cbnz	r6, 800a466 <_printf_i+0x196>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	f023 0320 	bic.w	r3, r3, #32
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	2310      	movs	r3, #16
 800a468:	e7b0      	b.n	800a3cc <_printf_i+0xfc>
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	f043 0320 	orr.w	r3, r3, #32
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	2378      	movs	r3, #120	; 0x78
 800a474:	4828      	ldr	r0, [pc, #160]	; (800a518 <_printf_i+0x248>)
 800a476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a47a:	e7e3      	b.n	800a444 <_printf_i+0x174>
 800a47c:	0659      	lsls	r1, r3, #25
 800a47e:	bf48      	it	mi
 800a480:	b2b6      	uxthmi	r6, r6
 800a482:	e7e6      	b.n	800a452 <_printf_i+0x182>
 800a484:	4615      	mov	r5, r2
 800a486:	e7bb      	b.n	800a400 <_printf_i+0x130>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	6826      	ldr	r6, [r4, #0]
 800a48c:	6961      	ldr	r1, [r4, #20]
 800a48e:	1d18      	adds	r0, r3, #4
 800a490:	6028      	str	r0, [r5, #0]
 800a492:	0635      	lsls	r5, r6, #24
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	d501      	bpl.n	800a49c <_printf_i+0x1cc>
 800a498:	6019      	str	r1, [r3, #0]
 800a49a:	e002      	b.n	800a4a2 <_printf_i+0x1d2>
 800a49c:	0670      	lsls	r0, r6, #25
 800a49e:	d5fb      	bpl.n	800a498 <_printf_i+0x1c8>
 800a4a0:	8019      	strh	r1, [r3, #0]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	4615      	mov	r5, r2
 800a4a8:	e7ba      	b.n	800a420 <_printf_i+0x150>
 800a4aa:	682b      	ldr	r3, [r5, #0]
 800a4ac:	1d1a      	adds	r2, r3, #4
 800a4ae:	602a      	str	r2, [r5, #0]
 800a4b0:	681d      	ldr	r5, [r3, #0]
 800a4b2:	6862      	ldr	r2, [r4, #4]
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f7f5 fea2 	bl	8000200 <memchr>
 800a4bc:	b108      	cbz	r0, 800a4c2 <_printf_i+0x1f2>
 800a4be:	1b40      	subs	r0, r0, r5
 800a4c0:	6060      	str	r0, [r4, #4]
 800a4c2:	6863      	ldr	r3, [r4, #4]
 800a4c4:	6123      	str	r3, [r4, #16]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4cc:	e7a8      	b.n	800a420 <_printf_i+0x150>
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	462a      	mov	r2, r5
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	47d0      	blx	sl
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d0ab      	beq.n	800a434 <_printf_i+0x164>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	079b      	lsls	r3, r3, #30
 800a4e0:	d413      	bmi.n	800a50a <_printf_i+0x23a>
 800a4e2:	68e0      	ldr	r0, [r4, #12]
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	4298      	cmp	r0, r3
 800a4e8:	bfb8      	it	lt
 800a4ea:	4618      	movlt	r0, r3
 800a4ec:	e7a4      	b.n	800a438 <_printf_i+0x168>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	4632      	mov	r2, r6
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	47d0      	blx	sl
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d09b      	beq.n	800a434 <_printf_i+0x164>
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	68e3      	ldr	r3, [r4, #12]
 800a500:	9903      	ldr	r1, [sp, #12]
 800a502:	1a5b      	subs	r3, r3, r1
 800a504:	42ab      	cmp	r3, r5
 800a506:	dcf2      	bgt.n	800a4ee <_printf_i+0x21e>
 800a508:	e7eb      	b.n	800a4e2 <_printf_i+0x212>
 800a50a:	2500      	movs	r5, #0
 800a50c:	f104 0619 	add.w	r6, r4, #25
 800a510:	e7f5      	b.n	800a4fe <_printf_i+0x22e>
 800a512:	bf00      	nop
 800a514:	0800adb5 	.word	0x0800adb5
 800a518:	0800adc6 	.word	0x0800adc6

0800a51c <_read_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4d07      	ldr	r5, [pc, #28]	; (800a53c <_read_r+0x20>)
 800a520:	4604      	mov	r4, r0
 800a522:	4608      	mov	r0, r1
 800a524:	4611      	mov	r1, r2
 800a526:	2200      	movs	r2, #0
 800a528:	602a      	str	r2, [r5, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	f7f7 faa0 	bl	8001a70 <_read>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_read_r+0x1e>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	b103      	cbz	r3, 800a53a <_read_r+0x1e>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	2000301c 	.word	0x2000301c

0800a540 <nan>:
 800a540:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a548 <nan+0x8>
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	00000000 	.word	0x00000000
 800a54c:	7ff80000 	.word	0x7ff80000

0800a550 <strncmp>:
 800a550:	b510      	push	{r4, lr}
 800a552:	b17a      	cbz	r2, 800a574 <strncmp+0x24>
 800a554:	4603      	mov	r3, r0
 800a556:	3901      	subs	r1, #1
 800a558:	1884      	adds	r4, r0, r2
 800a55a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a55e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a562:	4290      	cmp	r0, r2
 800a564:	d101      	bne.n	800a56a <strncmp+0x1a>
 800a566:	42a3      	cmp	r3, r4
 800a568:	d101      	bne.n	800a56e <strncmp+0x1e>
 800a56a:	1a80      	subs	r0, r0, r2
 800a56c:	bd10      	pop	{r4, pc}
 800a56e:	2800      	cmp	r0, #0
 800a570:	d1f3      	bne.n	800a55a <strncmp+0xa>
 800a572:	e7fa      	b.n	800a56a <strncmp+0x1a>
 800a574:	4610      	mov	r0, r2
 800a576:	e7f9      	b.n	800a56c <strncmp+0x1c>

0800a578 <__swbuf_r>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	460e      	mov	r6, r1
 800a57c:	4614      	mov	r4, r2
 800a57e:	4605      	mov	r5, r0
 800a580:	b118      	cbz	r0, 800a58a <__swbuf_r+0x12>
 800a582:	6983      	ldr	r3, [r0, #24]
 800a584:	b90b      	cbnz	r3, 800a58a <__swbuf_r+0x12>
 800a586:	f7fd f9ef 	bl	8007968 <__sinit>
 800a58a:	4b21      	ldr	r3, [pc, #132]	; (800a610 <__swbuf_r+0x98>)
 800a58c:	429c      	cmp	r4, r3
 800a58e:	d12b      	bne.n	800a5e8 <__swbuf_r+0x70>
 800a590:	686c      	ldr	r4, [r5, #4]
 800a592:	69a3      	ldr	r3, [r4, #24]
 800a594:	60a3      	str	r3, [r4, #8]
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	071a      	lsls	r2, r3, #28
 800a59a:	d52f      	bpl.n	800a5fc <__swbuf_r+0x84>
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	b36b      	cbz	r3, 800a5fc <__swbuf_r+0x84>
 800a5a0:	6923      	ldr	r3, [r4, #16]
 800a5a2:	6820      	ldr	r0, [r4, #0]
 800a5a4:	1ac0      	subs	r0, r0, r3
 800a5a6:	6963      	ldr	r3, [r4, #20]
 800a5a8:	b2f6      	uxtb	r6, r6
 800a5aa:	4283      	cmp	r3, r0
 800a5ac:	4637      	mov	r7, r6
 800a5ae:	dc04      	bgt.n	800a5ba <__swbuf_r+0x42>
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f7fe fc00 	bl	8008db8 <_fflush_r>
 800a5b8:	bb30      	cbnz	r0, 800a608 <__swbuf_r+0x90>
 800a5ba:	68a3      	ldr	r3, [r4, #8]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	60a3      	str	r3, [r4, #8]
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	701e      	strb	r6, [r3, #0]
 800a5c8:	6963      	ldr	r3, [r4, #20]
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	4283      	cmp	r3, r0
 800a5ce:	d004      	beq.n	800a5da <__swbuf_r+0x62>
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	07db      	lsls	r3, r3, #31
 800a5d4:	d506      	bpl.n	800a5e4 <__swbuf_r+0x6c>
 800a5d6:	2e0a      	cmp	r6, #10
 800a5d8:	d104      	bne.n	800a5e4 <__swbuf_r+0x6c>
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f7fe fbeb 	bl	8008db8 <_fflush_r>
 800a5e2:	b988      	cbnz	r0, 800a608 <__swbuf_r+0x90>
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e8:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <__swbuf_r+0x9c>)
 800a5ea:	429c      	cmp	r4, r3
 800a5ec:	d101      	bne.n	800a5f2 <__swbuf_r+0x7a>
 800a5ee:	68ac      	ldr	r4, [r5, #8]
 800a5f0:	e7cf      	b.n	800a592 <__swbuf_r+0x1a>
 800a5f2:	4b09      	ldr	r3, [pc, #36]	; (800a618 <__swbuf_r+0xa0>)
 800a5f4:	429c      	cmp	r4, r3
 800a5f6:	bf08      	it	eq
 800a5f8:	68ec      	ldreq	r4, [r5, #12]
 800a5fa:	e7ca      	b.n	800a592 <__swbuf_r+0x1a>
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	4628      	mov	r0, r5
 800a600:	f000 f81a 	bl	800a638 <__swsetup_r>
 800a604:	2800      	cmp	r0, #0
 800a606:	d0cb      	beq.n	800a5a0 <__swbuf_r+0x28>
 800a608:	f04f 37ff 	mov.w	r7, #4294967295
 800a60c:	e7ea      	b.n	800a5e4 <__swbuf_r+0x6c>
 800a60e:	bf00      	nop
 800a610:	0800a9c8 	.word	0x0800a9c8
 800a614:	0800a9e8 	.word	0x0800a9e8
 800a618:	0800a9a8 	.word	0x0800a9a8

0800a61c <__ascii_wctomb>:
 800a61c:	b149      	cbz	r1, 800a632 <__ascii_wctomb+0x16>
 800a61e:	2aff      	cmp	r2, #255	; 0xff
 800a620:	bf85      	ittet	hi
 800a622:	238a      	movhi	r3, #138	; 0x8a
 800a624:	6003      	strhi	r3, [r0, #0]
 800a626:	700a      	strbls	r2, [r1, #0]
 800a628:	f04f 30ff 	movhi.w	r0, #4294967295
 800a62c:	bf98      	it	ls
 800a62e:	2001      	movls	r0, #1
 800a630:	4770      	bx	lr
 800a632:	4608      	mov	r0, r1
 800a634:	4770      	bx	lr
	...

0800a638 <__swsetup_r>:
 800a638:	4b32      	ldr	r3, [pc, #200]	; (800a704 <__swsetup_r+0xcc>)
 800a63a:	b570      	push	{r4, r5, r6, lr}
 800a63c:	681d      	ldr	r5, [r3, #0]
 800a63e:	4606      	mov	r6, r0
 800a640:	460c      	mov	r4, r1
 800a642:	b125      	cbz	r5, 800a64e <__swsetup_r+0x16>
 800a644:	69ab      	ldr	r3, [r5, #24]
 800a646:	b913      	cbnz	r3, 800a64e <__swsetup_r+0x16>
 800a648:	4628      	mov	r0, r5
 800a64a:	f7fd f98d 	bl	8007968 <__sinit>
 800a64e:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <__swsetup_r+0xd0>)
 800a650:	429c      	cmp	r4, r3
 800a652:	d10f      	bne.n	800a674 <__swsetup_r+0x3c>
 800a654:	686c      	ldr	r4, [r5, #4]
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a65c:	0719      	lsls	r1, r3, #28
 800a65e:	d42c      	bmi.n	800a6ba <__swsetup_r+0x82>
 800a660:	06dd      	lsls	r5, r3, #27
 800a662:	d411      	bmi.n	800a688 <__swsetup_r+0x50>
 800a664:	2309      	movs	r3, #9
 800a666:	6033      	str	r3, [r6, #0]
 800a668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	f04f 30ff 	mov.w	r0, #4294967295
 800a672:	e03e      	b.n	800a6f2 <__swsetup_r+0xba>
 800a674:	4b25      	ldr	r3, [pc, #148]	; (800a70c <__swsetup_r+0xd4>)
 800a676:	429c      	cmp	r4, r3
 800a678:	d101      	bne.n	800a67e <__swsetup_r+0x46>
 800a67a:	68ac      	ldr	r4, [r5, #8]
 800a67c:	e7eb      	b.n	800a656 <__swsetup_r+0x1e>
 800a67e:	4b24      	ldr	r3, [pc, #144]	; (800a710 <__swsetup_r+0xd8>)
 800a680:	429c      	cmp	r4, r3
 800a682:	bf08      	it	eq
 800a684:	68ec      	ldreq	r4, [r5, #12]
 800a686:	e7e6      	b.n	800a656 <__swsetup_r+0x1e>
 800a688:	0758      	lsls	r0, r3, #29
 800a68a:	d512      	bpl.n	800a6b2 <__swsetup_r+0x7a>
 800a68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a68e:	b141      	cbz	r1, 800a6a2 <__swsetup_r+0x6a>
 800a690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a694:	4299      	cmp	r1, r3
 800a696:	d002      	beq.n	800a69e <__swsetup_r+0x66>
 800a698:	4630      	mov	r0, r6
 800a69a:	f7fd fa49 	bl	8007b30 <_free_r>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6063      	str	r3, [r4, #4]
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	f043 0308 	orr.w	r3, r3, #8
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	b94b      	cbnz	r3, 800a6d2 <__swsetup_r+0x9a>
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6c8:	d003      	beq.n	800a6d2 <__swsetup_r+0x9a>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f000 f84d 	bl	800a76c <__smakebuf_r>
 800a6d2:	89a0      	ldrh	r0, [r4, #12]
 800a6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6d8:	f010 0301 	ands.w	r3, r0, #1
 800a6dc:	d00a      	beq.n	800a6f4 <__swsetup_r+0xbc>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60a3      	str	r3, [r4, #8]
 800a6e2:	6963      	ldr	r3, [r4, #20]
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	61a3      	str	r3, [r4, #24]
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	b943      	cbnz	r3, 800a6fe <__swsetup_r+0xc6>
 800a6ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6f0:	d1ba      	bne.n	800a668 <__swsetup_r+0x30>
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	0781      	lsls	r1, r0, #30
 800a6f6:	bf58      	it	pl
 800a6f8:	6963      	ldrpl	r3, [r4, #20]
 800a6fa:	60a3      	str	r3, [r4, #8]
 800a6fc:	e7f4      	b.n	800a6e8 <__swsetup_r+0xb0>
 800a6fe:	2000      	movs	r0, #0
 800a700:	e7f7      	b.n	800a6f2 <__swsetup_r+0xba>
 800a702:	bf00      	nop
 800a704:	20000010 	.word	0x20000010
 800a708:	0800a9c8 	.word	0x0800a9c8
 800a70c:	0800a9e8 	.word	0x0800a9e8
 800a710:	0800a9a8 	.word	0x0800a9a8

0800a714 <abort>:
 800a714:	b508      	push	{r3, lr}
 800a716:	2006      	movs	r0, #6
 800a718:	f000 f890 	bl	800a83c <raise>
 800a71c:	2001      	movs	r0, #1
 800a71e:	f7f7 f99d 	bl	8001a5c <_exit>

0800a722 <__swhatbuf_r>:
 800a722:	b570      	push	{r4, r5, r6, lr}
 800a724:	460e      	mov	r6, r1
 800a726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72a:	2900      	cmp	r1, #0
 800a72c:	b096      	sub	sp, #88	; 0x58
 800a72e:	4614      	mov	r4, r2
 800a730:	461d      	mov	r5, r3
 800a732:	da08      	bge.n	800a746 <__swhatbuf_r+0x24>
 800a734:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	602a      	str	r2, [r5, #0]
 800a73c:	061a      	lsls	r2, r3, #24
 800a73e:	d410      	bmi.n	800a762 <__swhatbuf_r+0x40>
 800a740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a744:	e00e      	b.n	800a764 <__swhatbuf_r+0x42>
 800a746:	466a      	mov	r2, sp
 800a748:	f000 f894 	bl	800a874 <_fstat_r>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	dbf1      	blt.n	800a734 <__swhatbuf_r+0x12>
 800a750:	9a01      	ldr	r2, [sp, #4]
 800a752:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a756:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a75a:	425a      	negs	r2, r3
 800a75c:	415a      	adcs	r2, r3
 800a75e:	602a      	str	r2, [r5, #0]
 800a760:	e7ee      	b.n	800a740 <__swhatbuf_r+0x1e>
 800a762:	2340      	movs	r3, #64	; 0x40
 800a764:	2000      	movs	r0, #0
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	b016      	add	sp, #88	; 0x58
 800a76a:	bd70      	pop	{r4, r5, r6, pc}

0800a76c <__smakebuf_r>:
 800a76c:	898b      	ldrh	r3, [r1, #12]
 800a76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a770:	079d      	lsls	r5, r3, #30
 800a772:	4606      	mov	r6, r0
 800a774:	460c      	mov	r4, r1
 800a776:	d507      	bpl.n	800a788 <__smakebuf_r+0x1c>
 800a778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	6123      	str	r3, [r4, #16]
 800a780:	2301      	movs	r3, #1
 800a782:	6163      	str	r3, [r4, #20]
 800a784:	b002      	add	sp, #8
 800a786:	bd70      	pop	{r4, r5, r6, pc}
 800a788:	ab01      	add	r3, sp, #4
 800a78a:	466a      	mov	r2, sp
 800a78c:	f7ff ffc9 	bl	800a722 <__swhatbuf_r>
 800a790:	9900      	ldr	r1, [sp, #0]
 800a792:	4605      	mov	r5, r0
 800a794:	4630      	mov	r0, r6
 800a796:	f7fd fa37 	bl	8007c08 <_malloc_r>
 800a79a:	b948      	cbnz	r0, 800a7b0 <__smakebuf_r+0x44>
 800a79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a0:	059a      	lsls	r2, r3, #22
 800a7a2:	d4ef      	bmi.n	800a784 <__smakebuf_r+0x18>
 800a7a4:	f023 0303 	bic.w	r3, r3, #3
 800a7a8:	f043 0302 	orr.w	r3, r3, #2
 800a7ac:	81a3      	strh	r3, [r4, #12]
 800a7ae:	e7e3      	b.n	800a778 <__smakebuf_r+0xc>
 800a7b0:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <__smakebuf_r+0x7c>)
 800a7b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7b4:	89a3      	ldrh	r3, [r4, #12]
 800a7b6:	6020      	str	r0, [r4, #0]
 800a7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7bc:	81a3      	strh	r3, [r4, #12]
 800a7be:	9b00      	ldr	r3, [sp, #0]
 800a7c0:	6163      	str	r3, [r4, #20]
 800a7c2:	9b01      	ldr	r3, [sp, #4]
 800a7c4:	6120      	str	r0, [r4, #16]
 800a7c6:	b15b      	cbz	r3, 800a7e0 <__smakebuf_r+0x74>
 800a7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f000 f863 	bl	800a898 <_isatty_r>
 800a7d2:	b128      	cbz	r0, 800a7e0 <__smakebuf_r+0x74>
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	f023 0303 	bic.w	r3, r3, #3
 800a7da:	f043 0301 	orr.w	r3, r3, #1
 800a7de:	81a3      	strh	r3, [r4, #12]
 800a7e0:	89a0      	ldrh	r0, [r4, #12]
 800a7e2:	4305      	orrs	r5, r0
 800a7e4:	81a5      	strh	r5, [r4, #12]
 800a7e6:	e7cd      	b.n	800a784 <__smakebuf_r+0x18>
 800a7e8:	08007901 	.word	0x08007901

0800a7ec <_raise_r>:
 800a7ec:	291f      	cmp	r1, #31
 800a7ee:	b538      	push	{r3, r4, r5, lr}
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	d904      	bls.n	800a800 <_raise_r+0x14>
 800a7f6:	2316      	movs	r3, #22
 800a7f8:	6003      	str	r3, [r0, #0]
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a802:	b112      	cbz	r2, 800a80a <_raise_r+0x1e>
 800a804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a808:	b94b      	cbnz	r3, 800a81e <_raise_r+0x32>
 800a80a:	4620      	mov	r0, r4
 800a80c:	f000 f830 	bl	800a870 <_getpid_r>
 800a810:	462a      	mov	r2, r5
 800a812:	4601      	mov	r1, r0
 800a814:	4620      	mov	r0, r4
 800a816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a81a:	f000 b817 	b.w	800a84c <_kill_r>
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d00a      	beq.n	800a838 <_raise_r+0x4c>
 800a822:	1c59      	adds	r1, r3, #1
 800a824:	d103      	bne.n	800a82e <_raise_r+0x42>
 800a826:	2316      	movs	r3, #22
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	2001      	movs	r0, #1
 800a82c:	e7e7      	b.n	800a7fe <_raise_r+0x12>
 800a82e:	2400      	movs	r4, #0
 800a830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a834:	4628      	mov	r0, r5
 800a836:	4798      	blx	r3
 800a838:	2000      	movs	r0, #0
 800a83a:	e7e0      	b.n	800a7fe <_raise_r+0x12>

0800a83c <raise>:
 800a83c:	4b02      	ldr	r3, [pc, #8]	; (800a848 <raise+0xc>)
 800a83e:	4601      	mov	r1, r0
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	f7ff bfd3 	b.w	800a7ec <_raise_r>
 800a846:	bf00      	nop
 800a848:	20000010 	.word	0x20000010

0800a84c <_kill_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	; (800a86c <_kill_r+0x20>)
 800a850:	2300      	movs	r3, #0
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	f7f7 f8ef 	bl	8001a3c <_kill>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	d102      	bne.n	800a868 <_kill_r+0x1c>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b103      	cbz	r3, 800a868 <_kill_r+0x1c>
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	bd38      	pop	{r3, r4, r5, pc}
 800a86a:	bf00      	nop
 800a86c:	2000301c 	.word	0x2000301c

0800a870 <_getpid_r>:
 800a870:	f7f7 b8dc 	b.w	8001a2c <_getpid>

0800a874 <_fstat_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4d07      	ldr	r5, [pc, #28]	; (800a894 <_fstat_r+0x20>)
 800a878:	2300      	movs	r3, #0
 800a87a:	4604      	mov	r4, r0
 800a87c:	4608      	mov	r0, r1
 800a87e:	4611      	mov	r1, r2
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	f7f7 f93a 	bl	8001afa <_fstat>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d102      	bne.n	800a890 <_fstat_r+0x1c>
 800a88a:	682b      	ldr	r3, [r5, #0]
 800a88c:	b103      	cbz	r3, 800a890 <_fstat_r+0x1c>
 800a88e:	6023      	str	r3, [r4, #0]
 800a890:	bd38      	pop	{r3, r4, r5, pc}
 800a892:	bf00      	nop
 800a894:	2000301c 	.word	0x2000301c

0800a898 <_isatty_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4d06      	ldr	r5, [pc, #24]	; (800a8b4 <_isatty_r+0x1c>)
 800a89c:	2300      	movs	r3, #0
 800a89e:	4604      	mov	r4, r0
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	602b      	str	r3, [r5, #0]
 800a8a4:	f7f7 f939 	bl	8001b1a <_isatty>
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	d102      	bne.n	800a8b2 <_isatty_r+0x1a>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	b103      	cbz	r3, 800a8b2 <_isatty_r+0x1a>
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	2000301c 	.word	0x2000301c

0800a8b8 <_init>:
 800a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ba:	bf00      	nop
 800a8bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8be:	bc08      	pop	{r3}
 800a8c0:	469e      	mov	lr, r3
 800a8c2:	4770      	bx	lr

0800a8c4 <_fini>:
 800a8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c6:	bf00      	nop
 800a8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ca:	bc08      	pop	{r3}
 800a8cc:	469e      	mov	lr, r3
 800a8ce:	4770      	bx	lr
